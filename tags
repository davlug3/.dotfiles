!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
$FZF_DEFAULT_COMMAND	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^    let $FZF_DEFAULT_COMMAND = command$/;"	v
$FZF_DEFAULT_COMMAND	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^    let $FZF_DEFAULT_COMMAND = prev_default_command$/;"	v
<Plug>(-fzf-complete-finish)	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-finish) <c-o>l$/;"	m
<Plug>(-fzf-complete-finish)	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <silent> <Plug>(-fzf-complete-finish) a$/;"	m
<Plug>(-fzf-complete-trigger)	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
<Plug>(fzf-insert)	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-insert) i$/;"	m
<Plug>(fzf-normal)	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-normal) <Nop>$/;"	m
<Plug>ChangeCommentary	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>$/;"	m
<Plug>Commentary	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>Commentary     <SID>go()$/;"	m
<Plug>Commentary	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(get(v:, 'operator', '') ==# 'c')<CR>$/;"	m
<Plug>CommentaryLine	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>CommentaryLine <SID>go() . '_'$/;"	m
<Plug>CommentaryUndo	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^nmap <silent> <Plug>CommentaryUndo :echoerr "Change your <Plug>CommentaryUndo map to <Plug>Commentary<Plug>Commentary"<CR>$/;"	m
<plug>(-fzf-/)	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-\/) \/$/;"	m
<plug>(-fzf-:)	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-:) :$/;"	m
<plug>(-fzf-vim-do)	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(fzf-complete-buffer-line)	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-complete-file)	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -type f -print -o -type l -print \\| sed 's:^..::'")$/;"	m
<plug>(fzf-complete-file)	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-file-ag)	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-path)	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -print \\| sed '1d;s:^..::'")$/;"	m
<plug>(fzf-complete-path)	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-word)	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-maps-i)	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-n)	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
AcceptSelection	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:AcceptSelection(action)$/;"	f
AcceptSelection	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:AcceptSelection(action)$/;"	f
Add	vim/.vim/pack/plugins/start/fzf/src/cache.go	/^func (cc *ChunkCache) Add(chunk *Chunk, key string, list []Result) {$/;"	f
Algo	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^type Algo func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int)$/;"	t
Alt	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Alt$/;"	c
AltBackspace	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	AltBackspace$/;"	c
AltDown	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	AltDown$/;"	c
AltKey	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func AltKey(r rune) Event {$/;"	f
AltLeft	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	AltLeft$/;"	c
AltRight	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	AltRight$/;"	c
AltShiftDown	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	AltShiftDown$/;"	c
AltShiftLeft	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	AltShiftLeft$/;"	c
AltShiftRight	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	AltShiftRight$/;"	c
AltShiftUp	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	AltShiftUp$/;"	c
AltUp	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	AltUp$/;"	c
AsEvent	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (t EventType) AsEvent() Event {$/;"	f
AsString	vim/.vim/pack/plugins/start/fzf/src/item.go	/^func (item *Item) AsString(stripAnsi bool) string {$/;"	f
AsString	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func (p *Pattern) AsString() string {$/;"	f
AsUint16	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func AsUint16(val int) uint16 {$/;"	f
AtExit	vim/.vim/pack/plugins/start/fzf/src/util/atexit.go	/^func AtExit(fn func()) {$/;"	f
AtomicBool	vim/.vim/pack/plugins/start/fzf/src/util/atomicbool.go	/^type AtomicBool struct {$/;"	t
Attr	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^type Attr int32$/;"	t
Attr	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^type Attr int32$/;"	t
Attr	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (p ColorPair) Attr() Attr {$/;"	f
AttrClear	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^	AttrClear     = Attr(1 << 9)$/;"	c
AttrClear	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	AttrClear     = Attr(1 << 8)$/;"	c
AttrRegular	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^	AttrRegular   = Attr(1 << 8)$/;"	c
AttrRegular	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	AttrRegular   = Attr(1 << 7)$/;"	c
AttrUndefined	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^	AttrUndefined = Attr(0)$/;"	c
AttrUndefined	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	AttrUndefined = Attr(0)$/;"	c
AutoUpdate	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:AutoUpdate(fname, force, ...) abort$/;"	f
BINARY	vim/.vim/pack/plugins/start/fzf/Makefile	/^	BINARY := $(BINARY32)$/;"	m
BINARY	vim/.vim/pack/plugins/start/fzf/Makefile	/^	BINARY := $(BINARY64)$/;"	m
BINARY	vim/.vim/pack/plugins/start/fzf/Makefile	/^	BINARY := $(BINARYARM5)$/;"	m
BINARY	vim/.vim/pack/plugins/start/fzf/Makefile	/^	BINARY := $(BINARYARM6)$/;"	m
BINARY	vim/.vim/pack/plugins/start/fzf/Makefile	/^	BINARY := $(BINARYARM7)$/;"	m
BINARY	vim/.vim/pack/plugins/start/fzf/Makefile	/^	BINARY := $(BINARYARM8)$/;"	m
BINARY	vim/.vim/pack/plugins/start/fzf/Makefile	/^	BINARY := $(BINARYLOONG64)$/;"	m
BINARY	vim/.vim/pack/plugins/start/fzf/Makefile	/^	BINARY := $(BINARYPPC64LE)$/;"	m
BINARY	vim/.vim/pack/plugins/start/fzf/Makefile	/^	BINARY := $(BINARYRISCV64)$/;"	m
BINARY	vim/.vim/pack/plugins/start/fzf/Makefile	/^	BINARY := $(BINARYS390)$/;"	m
BINARY32	vim/.vim/pack/plugins/start/fzf/Makefile	/^BINARY32       := fzf-$(GOOS)_386$/;"	m
BINARY64	vim/.vim/pack/plugins/start/fzf/Makefile	/^BINARY64       := fzf-$(GOOS)_amd64$/;"	m
BINARYARM5	vim/.vim/pack/plugins/start/fzf/Makefile	/^BINARYARM5     := fzf-$(GOOS)_arm5$/;"	m
BINARYARM6	vim/.vim/pack/plugins/start/fzf/Makefile	/^BINARYARM6     := fzf-$(GOOS)_arm6$/;"	m
BINARYARM7	vim/.vim/pack/plugins/start/fzf/Makefile	/^BINARYARM7     := fzf-$(GOOS)_arm7$/;"	m
BINARYARM8	vim/.vim/pack/plugins/start/fzf/Makefile	/^BINARYARM8     := fzf-$(GOOS)_arm8$/;"	m
BINARYLOONG64	vim/.vim/pack/plugins/start/fzf/Makefile	/^BINARYLOONG64  := fzf-$(GOOS)_loong64$/;"	m
BINARYPPC64LE	vim/.vim/pack/plugins/start/fzf/Makefile	/^BINARYPPC64LE  := fzf-$(GOOS)_ppc64le$/;"	m
BINARYRISCV64	vim/.vim/pack/plugins/start/fzf/Makefile	/^BINARYRISCV64  := fzf-$(GOOS)_riscv64$/;"	m
BINARYS390	vim/.vim/pack/plugins/start/fzf/Makefile	/^BINARYS390     := fzf-$(GOOS)_s390x$/;"	m
BUILD_FLAGS	vim/.vim/pack/plugins/start/fzf/Makefile	/^BUILD_FLAGS    := -a -ldflags "-s -w -X main.version=$(VERSION) -X main.revision=$(REVISION)" -tags "$(TAGS)" -trimpath$/;"	m
BUILD_INVERTED_INDEX	vim-gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
BUILD_INVERTED_INDEX	vim-gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
BUILD_INVERTED_INDEX	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
BUILD_INVERTED_INDEX	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
Backspace	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Backspace$/;"	c
BackwardEOF	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BackwardEOF$/;"	c
Become	vim/.vim/pack/plugins/start/fzf/src/util/util_unix.go	/^func (x *Executor) Become(stdin *os.File, environ []string, command string) {$/;"	f
Become	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^func (x *Executor) Become(stdin *os.File, environ []string, command string) {$/;"	f
BenchmarkExtractColor	vim/.vim/pack/plugins/start/fzf/src/ansi_test.go	/^func BenchmarkExtractColor(b *testing.B) {$/;"	f
BenchmarkNextAnsiEscapeSequence	vim/.vim/pack/plugins/start/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence(b *testing.B) {$/;"	f
BenchmarkNextAnsiEscapeSequence_Regex	vim/.vim/pack/plugins/start/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence_Regex(b *testing.B) {$/;"	f
Bg	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (p ColorPair) Bg() Color {$/;"	f
Blink	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^	Blink         = Attr(1 << 4)$/;"	c
Blink	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	Blink              = Attr(tcell.AttrBlink)$/;"	c
Blink2	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^	Blink2        = Attr(1 << 5)$/;"	c
Bold	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^	Bold          = Attr(1)$/;"	c
Bold	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	Bold          Attr = Attr(tcell.AttrBold)$/;"	c
Bookmark.AddBookmark	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.CompareBookmarksByName	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
Bookmark.Edit	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Edit()$/;"	f
Bookmark.GetNodeForName	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
Bookmark.GetSelected	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.SortBookmarksList	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
Bookmark.ToRoot	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
Bookmark.Write	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
Bookmark.delete	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.open	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
Bookmark.openInNewTab	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
Bookmark.validate	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
BorderBlock	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderBlock$/;"	c
BorderBold	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderBold$/;"	c
BorderBottom	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderBottom$/;"	c
BorderCharacter	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type BorderCharacter int$/;"	t
BorderDouble	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderDouble$/;"	c
BorderHorizontal	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderHorizontal$/;"	c
BorderLeft	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderLeft$/;"	c
BorderNone	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderNone$/;"	c
BorderRight	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderRight$/;"	c
BorderRounded	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderRounded$/;"	c
BorderShape	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type BorderShape int$/;"	t
BorderSharp	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderSharp$/;"	c
BorderStyle	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type BorderStyle struct {$/;"	t
BorderThinBlock	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderThinBlock$/;"	c
BorderTop	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderTop$/;"	c
BorderUndefined	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderUndefined BorderShape = iota$/;"	c
BorderVertical	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	BorderVertical$/;"	c
BuildPattern	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func BuildPattern(cache *ChunkCache, patternCache map[string]*Pattern, fuzzy bool, fuzzyAlgo algo.Algo, extended bool, caseMode Case, normalize bool, forward bool,$/;"	f
BuildPrompt	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:BuildPrompt(upd)$/;"	f
BuildPrompt	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:BuildPrompt(upd)$/;"	f
ByOrder	vim/.vim/pack/plugins/start/fzf/src/result.go	/^type ByOrder []Offset$/;"	t
ByRelevance	vim/.vim/pack/plugins/start/fzf/src/result.go	/^type ByRelevance []Result$/;"	t
ByRelevanceTac	vim/.vim/pack/plugins/start/fzf/src/result.go	/^type ByRelevanceTac []Result$/;"	t
Byte	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (t EventType) Byte() byte {$/;"	f
Bytes	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) Bytes() []byte {$/;"	f
CFill	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) CFill(fg Color, bg Color, attr Attr, text string) FillReturn {$/;"	f
CFill	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CFill(fg Color, bg Color, a Attr, str string) FillReturn {$/;"	f
CPrint	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) CPrint(pair ColorPair, text string) {$/;"	f
CPrint	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CPrint(pair ColorPair, text string) {$/;"	f
CR	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^const CR string = "\\x1b[2m␍"$/;"	c
CSCOPE_ARGS	vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
CSCOPE_ARGS	vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_ARGS	vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_ARGS	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
CSCOPE_ARGS	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_ARGS	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_EXE	vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CSCOPE_EXE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CTAGS_ARGS	vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_ARGS	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CTAGS_EXE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CacheKey	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func (p *Pattern) CacheKey() string {$/;"	f
Case	vim/.vim/pack/plugins/start/fzf/src/options.go	/^type Case int$/;"	t
CaseIgnore	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	CaseIgnore$/;"	c
CaseRespect	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	CaseRespect$/;"	c
CaseSmart	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	CaseSmart Case = iota$/;"	c
Change	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Change$/;"	c
ChangeFoldLevel	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ChangeFoldLevel(diff, force) abort$/;"	f
Chars	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^type Chars struct {$/;"	t
CheckExCtagsVersion	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:CheckExCtagsVersion(output) abort$/;"	f
CheckFTCtags	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:CheckFTCtags(bin, ftype) abort$/;"	f
CheckForExCtags	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:CheckForExCtags(silent) abort$/;"	f
CheckMouseClick	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:CheckMouseClick() abort$/;"	f
Chunk	vim/.vim/pack/plugins/start/fzf/src/chunklist.go	/^type Chunk struct {$/;"	t
ChunkCache	vim/.vim/pack/plugins/start/fzf/src/cache.go	/^type ChunkCache struct {$/;"	t
ChunkList	vim/.vim/pack/plugins/start/fzf/src/chunklist.go	/^type ChunkList struct {$/;"	t
CleanUp	vim-gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
CleanUp	vim/.vim/pack/plugins/start/vim-gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
Clear	vim/.vim/pack/plugins/start/fzf/src/cache.go	/^func (cc *ChunkCache) Clear() {$/;"	f
Clear	vim/.vim/pack/plugins/start/fzf/src/chunklist.go	/^func (cl *ChunkList) Clear() {$/;"	f
Clear	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Clear()                             {}$/;"	f
Clear	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Clear() {$/;"	f
Clear	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Clear() {$/;"	f
Clear	vim/.vim/pack/plugins/start/fzf/src/util/eventbox.go	/^func (events *Events) Clear() {$/;"	f
ClearAllCtrlPCaches	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar ClearAllCtrlPCaches cal ctrlp#clra()$/;"	c
ClearAllCtrlPCaches	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar ClearAllCtrlPCaches cal ctrlp#clra()$/;"	c
ClearCtrlPCache	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar ClearCtrlPCache     cal ctrlp#clr()$/;"	c
ClearCtrlPCache	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar ClearCtrlPCache     cal ctrlp#clr()$/;"	c
ClickHeader	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ClickHeader$/;"	c
Close	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Close()$/;"	f
Close	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Close()$/;"	f
Close	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Close()                             {}$/;"	f
Close	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Close() {$/;"	f
Close	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) Close() {$/;"	f
Close	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Close() {$/;"	f
Close	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Close() {$/;"	f
CloseFold	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:CloseFold() abort$/;"	f
CloseWindow	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:CloseWindow() abort$/;"	f
ColBorder	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColBorder               ColorPair$/;"	v
ColBorderLabel	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColBorderLabel          ColorPair$/;"	v
ColCurrent	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColCurrent              ColorPair$/;"	v
ColCurrentCursor	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColCurrentCursor        ColorPair$/;"	v
ColCurrentCursorEmpty	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColCurrentCursorEmpty   ColorPair$/;"	v
ColCurrentMarker	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColCurrentMarker        ColorPair$/;"	v
ColCurrentMatch	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColCurrentMatch         ColorPair$/;"	v
ColCurrentSelectedEmpty	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColCurrentSelectedEmpty ColorPair$/;"	v
ColCursor	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColCursor               ColorPair$/;"	v
ColCursorEmpty	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColCursorEmpty          ColorPair$/;"	v
ColDisabled	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColDisabled             ColorPair$/;"	v
ColHeader	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColHeader               ColorPair$/;"	v
ColInfo	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColInfo                 ColorPair$/;"	v
ColInput	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColInput                ColorPair$/;"	v
ColMarker	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColMarker               ColorPair$/;"	v
ColMatch	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColMatch                ColorPair$/;"	v
ColNormal	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColNormal               ColorPair$/;"	v
ColPreview	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColPreview              ColorPair$/;"	v
ColPreviewBorder	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColPreviewBorder        ColorPair$/;"	v
ColPreviewLabel	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColPreviewLabel         ColorPair$/;"	v
ColPreviewScrollbar	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColPreviewScrollbar     ColorPair$/;"	v
ColPreviewSpinner	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColPreviewSpinner       ColorPair$/;"	v
ColPrompt	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColPrompt               ColorPair$/;"	v
ColScrollbar	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColScrollbar            ColorPair$/;"	v
ColSelected	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColSelected             ColorPair$/;"	v
ColSelectedMatch	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColSelectedMatch        ColorPair$/;"	v
ColSeparator	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColSeparator            ColorPair$/;"	v
ColSpinner	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ColSpinner              ColorPair$/;"	v
Color	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type Color int32$/;"	t
ColorAttr	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type ColorAttr struct {$/;"	t
ColorPair	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type ColorPair struct {$/;"	t
ColorTheme	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type ColorTheme struct {$/;"	t
Colors	vim/.vim/pack/plugins/start/fzf/src/item.go	/^func (item *Item) Colors() []ansiOffset {$/;"	f
Commentary	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^command! -range -bar -bang Commentary call s:go(<line1>,<line2>,<bang>0)$/;"	c
Comparable	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (e Event) Comparable() Event {$/;"	f
CompareVersions	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func CompareVersions(v1, v2 string) int {$/;"	f
CompletionTest	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^module CompletionTest$/;"	m	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept
Constrain	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func Constrain(val int, min int, max int) int {$/;"	f
Constrain32	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func Constrain32(val int32, min int32, max int32) int32 {$/;"	f
CopyRunes	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) CopyRunes(dest []rune, from int) {$/;"	f
CorrectFocusOnStartup	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:CorrectFocusOnStartup() abort$/;"	f
CountItems	vim/.vim/pack/plugins/start/fzf/src/chunklist.go	/^func CountItems(cs []*Chunk) int {$/;"	f
CreateAutocommands	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:CreateAutocommands() abort$/;"	f
CreateNewFile	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:CreateNewFile(...)$/;"	f
CreateNewFile	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:CreateNewFile(...)$/;"	f
CreateTabTreeVCS	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:CreateTabTreeVCS(name)$/;"	f
Creator.BufNamePrefix	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
Creator.CreateExploreTree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateExploreTree(dir)$/;"	f
Creator.CreateMirror	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
Creator.CreateTabTree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
Creator.CreateWindowTree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
Creator.New	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
Creator.ToggleTabTree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
Creator._bindMappings	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
Creator._broadcastInitEvent	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
Creator._createNERDTree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
Creator._createTreeWin	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
Creator._isBufHidden	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
Creator._nextBufferName	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName(...)$/;"	f
Creator._nextBufferNumber	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
Creator._pathForString	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
Creator._removeTreeBufForTab	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
Creator._setCommonBufOptions	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
Creator._setupStatusline	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
Creator._tabpagevar	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
Creator._uniq	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
Creator.createMirror	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
Creator.createTabTree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
Creator.createWindowTree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
Creator.toggleTabTree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
CtagsErrMsg	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:CtagsErrMsg(errmsg, infomsg, silent, ...) abort$/;"	f
CtrlA	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlA$/;"	c
CtrlAlt	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlAlt$/;"	c
CtrlAltKey	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func CtrlAltKey(r rune) Event {$/;"	f
CtrlB	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlB$/;"	c
CtrlBackSlash	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlBackSlash$/;"	c
CtrlC	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlC$/;"	c
CtrlCaret	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlCaret$/;"	c
CtrlD	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlD$/;"	c
CtrlDelete	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlDelete$/;"	c
CtrlE	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlE$/;"	c
CtrlF	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlF$/;"	c
CtrlG	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlG$/;"	c
CtrlH	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlH$/;"	c
CtrlJ	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlJ$/;"	c
CtrlK	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlK$/;"	c
CtrlL	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlL$/;"	c
CtrlM	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlM$/;"	c
CtrlN	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlN$/;"	c
CtrlO	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlO$/;"	c
CtrlP	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlP         cal ctrlp#init(0, { 'dir': <q-args> })$/;"	c
CtrlP	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlP         cal ctrlp#init(0, { 'dir': <q-args> })$/;"	c
CtrlP	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlP$/;"	c
CtrlPAug	ctrlp.vim/autoload/ctrlp.vim	/^	aug CtrlPAug$/;"	a
CtrlPAug	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^	aug CtrlPAug$/;"	a
CtrlPBookmarkDir	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBookmarkDir cal ctrlp#init(ctrlp#bookmarkdir#id())$/;"	c
CtrlPBookmarkDir	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBookmarkDir cal ctrlp#init(ctrlp#bookmarkdir#id())$/;"	c
CtrlPBookmarkDirAdd	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlPBookmarkDirAdd$/;"	c
CtrlPBookmarkDirAdd	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlPBookmarkDirAdd$/;"	c
CtrlPBufTag	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPBufTag$/;"	c
CtrlPBufTag	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPBufTag$/;"	c
CtrlPBufTagAll	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBufTagAll cal ctrlp#init(ctrlp#buffertag#cmd(1))$/;"	c
CtrlPBufTagAll	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBufTagAll cal ctrlp#init(ctrlp#buffertag#cmd(1))$/;"	c
CtrlPBuffer	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBuffer   cal ctrlp#init(1)$/;"	c
CtrlPBuffer	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBuffer   cal ctrlp#init(1)$/;"	c
CtrlPChange	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPChange$/;"	c
CtrlPChange	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPChange$/;"	c
CtrlPChangeAll	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPChangeAll   cal ctrlp#init(ctrlp#changes#cmd(1))$/;"	c
CtrlPChangeAll	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPChangeAll   cal ctrlp#init(ctrlp#changes#cmd(1))$/;"	c
CtrlPClearAllCaches	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPClearAllCaches cal ctrlp#clra()$/;"	c
CtrlPClearAllCaches	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPClearAllCaches cal ctrlp#clra()$/;"	c
CtrlPClearCache	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPClearCache     cal ctrlp#clr()$/;"	c
CtrlPClearCache	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPClearCache     cal ctrlp#clr()$/;"	c
CtrlPCurFile	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPCurFile cal ctrlp#init(0, { 'mode': 'c' })$/;"	c
CtrlPCurFile	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPCurFile cal ctrlp#init(0, { 'mode': 'c' })$/;"	c
CtrlPCurWD	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPCurWD   cal ctrlp#init(0, { 'mode': '' })$/;"	c
CtrlPCurWD	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPCurWD   cal ctrlp#init(0, { 'mode': '' })$/;"	c
CtrlPDir	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlPDir$/;"	c
CtrlPDir	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlPDir$/;"	c
CtrlPLastMode	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? CtrlPLastMode cal ctrlp#init(-1, { 'args': <q-args> })$/;"	c
CtrlPLastMode	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? CtrlPLastMode cal ctrlp#init(-1, { 'args': <q-args> })$/;"	c
CtrlPLine	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPLine$/;"	c
CtrlPLine	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPLine$/;"	c
CtrlPMRUFiles	ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlPMRUFiles cal ctrlp#init(2, { 'dir': <q-args> })$/;"	c
CtrlPMRUFiles	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlPMRUFiles cal ctrlp#init(2, { 'dir': <q-args> })$/;"	c
CtrlPMixed	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPMixed       cal ctrlp#init(ctrlp#mixed#id())$/;"	c
CtrlPMixed	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPMixed       cal ctrlp#init(ctrlp#mixed#id())$/;"	c
CtrlPQuickfix	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPQuickfix cal ctrlp#init(ctrlp#quickfix#id())$/;"	c
CtrlPQuickfix	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPQuickfix cal ctrlp#init(ctrlp#quickfix#id())$/;"	c
CtrlPRTS	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPRTS       cal ctrlp#init(ctrlp#rtscript#id())$/;"	c
CtrlPRTS	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPRTS       cal ctrlp#init(ctrlp#rtscript#id())$/;"	c
CtrlPRoot	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPRoot    cal ctrlp#init(0, { 'mode': 'r' })$/;"	c
CtrlPRoot	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPRoot    cal ctrlp#init(0, { 'mode': 'r' })$/;"	c
CtrlPTag	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPTag      cal ctrlp#init(ctrlp#tag#id())$/;"	c
CtrlPTag	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPTag      cal ctrlp#init(ctrlp#tag#id())$/;"	c
CtrlPUndo	ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPUndo      cal ctrlp#init(ctrlp#undo#id())$/;"	c
CtrlPUndo	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPUndo      cal ctrlp#init(ctrlp#undo#id())$/;"	c
CtrlQ	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlQ$/;"	c
CtrlR	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlR$/;"	c
CtrlRightBracket	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlRightBracket$/;"	c
CtrlS	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlS$/;"	c
CtrlSlash	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlSlash$/;"	c
CtrlSpace	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlSpace$/;"	c
CtrlT	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlT$/;"	c
CtrlU	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlU$/;"	c
CtrlV	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlV$/;"	c
CtrlW	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlW$/;"	c
CtrlX	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlX$/;"	c
CtrlY	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlY$/;"	c
CtrlZ	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	CtrlZ$/;"	c
DB_FILE	vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DB_FILE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DEBUG	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^var DEBUG bool$/;"	v
Dark256	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Dark256   *ColorTheme$/;"	v
Default16	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Default16 *ColorTheme$/;"	v
DefaultBorderShape	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^var DefaultBorderShape = BorderRounded$/;"	v
DefaultBorderShape	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^var DefaultBorderShape BorderShape = BorderSharp$/;"	v
Delete	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Delete$/;"	c
Delimiter	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^type Delimiter struct {$/;"	t
DetectFiletype	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:DetectFiletype(bufnr) abort$/;"	f
Dim	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^	Dim           = Attr(1 << 1)$/;"	c
Dim	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	Dim                = Attr(tcell.AttrDim)$/;"	c
DoneParseArgs	vim-gutentags/plat/win32/update_gtags.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_gtags.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
DoubleClick	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	DoubleClick$/;"	c
Down	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Down$/;"	c
DrawBorder	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) DrawBorder() {$/;"	f
DrawBorder	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) DrawBorder() {$/;"	f
DrawHBorder	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) DrawHBorder() {$/;"	f
DrawHBorder	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) DrawHBorder() {$/;"	f
DurWithin	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func DurWithin($/;"	f
EmptyMerger	vim/.vim/pack/plugins/start/fzf/src/merger.go	/^func EmptyMerger(revision revision) *Merger {$/;"	f
EmptyTheme	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func EmptyTheme() *ColorTheme {$/;"	f
Enabled	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (s resumableState) Enabled() bool {$/;"	f
Enclose	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) Enclose(y int, x int) bool {$/;"	f
Enclose	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Enclose(y int, x int) bool {$/;"	f
End	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	End$/;"	c
EqualMatch	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func EqualMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {$/;"	f
Erase	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) Erase() {$/;"	f
Erase	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Erase() {$/;"	f
EraseMaybe	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) EraseMaybe() bool {$/;"	f
EraseMaybe	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) EraseMaybe() bool {$/;"	f
Esc	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Esc$/;"	c
EscapeCtagsCmd	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:EscapeCtagsCmd(ctags_bin, args, ...) abort$/;"	f
Event	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type Event struct {$/;"	t
Event.New	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
EventBox	vim/.vim/pack/plugins/start/fzf/src/util/eventbox.go	/^type EventBox struct {$/;"	t
EventType	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type EventType int$/;"	t
EventType	vim/.vim/pack/plugins/start/fzf/src/util/eventbox.go	/^type EventType int$/;"	t
Events	vim/.vim/pack/plugins/start/fzf/src/util/eventbox.go	/^type Events map[EventType]interface{}$/;"	t
EvtHeader	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	EvtHeader$/;"	c
EvtQuit	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	EvtQuit$/;"	c
EvtReadFin	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	EvtReadFin$/;"	c
EvtReadFin	vim/.vim/pack/plugins/start/fzf/src/util/eventbox_test.go	/^	EvtReadFin$/;"	c
EvtReadNew	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	EvtReadNew util.EventType = iota$/;"	c
EvtReadNew	vim/.vim/pack/plugins/start/fzf/src/util/eventbox_test.go	/^	EvtReadNew EventType = iota$/;"	c
EvtReadNone	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	EvtReadNone$/;"	c
EvtReady	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	EvtReady$/;"	c
EvtSearchFin	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	EvtSearchFin$/;"	c
EvtSearchFin	vim/.vim/pack/plugins/start/fzf/src/util/eventbox_test.go	/^	EvtSearchFin$/;"	c
EvtSearchNew	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	EvtSearchNew$/;"	c
EvtSearchNew	vim/.vim/pack/plugins/start/fzf/src/util/eventbox_test.go	/^	EvtSearchNew$/;"	c
EvtSearchProgress	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	EvtSearchProgress$/;"	c
EvtSearchProgress	vim/.vim/pack/plugins/start/fzf/src/util/eventbox_test.go	/^	EvtSearchProgress$/;"	c
ExactMatchNaive	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func ExactMatchNaive(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {$/;"	f
ExecCommand	vim/.vim/pack/plugins/start/fzf/src/util/util_unix.go	/^func (x *Executor) ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f
ExecCommand	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^func (x *Executor) ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f
ExecuteCtags	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtags(ctags_cmd) abort$/;"	f
ExecuteCtagsOnFile	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtagsOnFile(fname, realfname, typeinfo) abort$/;"	f
Executor	vim/.vim/pack/plugins/start/fzf/src/util/util_unix.go	/^type Executor struct {$/;"	t
Executor	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^type Executor struct {$/;"	t
ExitBecome	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	ExitBecome    = 126$/;"	c
ExitError	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	ExitError     = 2$/;"	c
ExitInterrupt	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	ExitInterrupt = 130$/;"	c
ExitNoMatch	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	ExitNoMatch   = 1$/;"	c
ExitOk	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	ExitOk        = 0$/;"	c
F1	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	F1$/;"	c
F10	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	F10$/;"	c
F11	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	F11$/;"	c
F12	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	F12$/;"	c
F2	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	F2$/;"	c
F3	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	F3$/;"	c
F4	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	F4$/;"	c
F5	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	F5$/;"	c
F6	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	F6$/;"	c
F7	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	F7$/;"	c
F8	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	F8$/;"	c
F9	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	F9$/;"	c
FILESIZE	vim-gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
FILESIZE	vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILESIZE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
FILESIZE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILE_LIST_CMD	vim-gutentags/plat/win32/update_gtags.cmd	/^	set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_gtags.cmd	/^	set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FZF	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^command! -nargs=* -complete=dir -bang FZF call s:cmd(<bang>0, <f-args>)$/;"	c
Fatal	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Fatal$/;"	c
Fg	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (p ColorPair) Fg() Color {$/;"	f
Fill	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) Fill(text string) FillReturn {$/;"	f
Fill	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Fill(str string) FillReturn {$/;"	f
FillContinue	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	FillContinue FillReturn = iota$/;"	c
FillNextLine	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	FillNextLine$/;"	c
FillReturn	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type FillReturn int$/;"	t
FillSuspend	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	FillSuspend$/;"	c
FindIndex	vim/.vim/pack/plugins/start/fzf/src/merger.go	/^func (mg *Merger) FindIndex(itemIndex int32) int {$/;"	f
FindParentVCSRoot	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:FindParentVCSRoot(path)$/;"	f
FinishFill	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) FinishFill() {$/;"	f
FinishFill	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) FinishFill() {$/;"	f
First	vim/.vim/pack/plugins/start/fzf/src/merger.go	/^func (mg *Merger) First() Result {$/;"	f
FlagSet.New	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
FlagSet._flagsForScope	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
FlagSet.addFlag	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
FlagSet.clearFlags	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
FlagSet.removeFlag	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
FlagSet.renderToString	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
Focus	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Focus$/;"	c
Force	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (s *resumableState) Force(flag bool) {$/;"	f
ForceUpdate	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ForceUpdate()$/;"	f
ForceUpdate	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ForceUpdate()$/;"	f
FullscreenRenderer	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type FullscreenRenderer struct {$/;"	t
FuzzyMatchV1	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func FuzzyMatchV1(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {$/;"	f
FuzzyMatchV2	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func FuzzyMatchV2(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {$/;"	f
GO	vim/.vim/pack/plugins/start/fzf/Makefile	/^GO             ?= go$/;"	m
GOOS	vim/.vim/pack/plugins/start/fzf/Makefile	/^GOOS           ?= $(shell $(GO) env GOOS)$/;"	m
GTAGS_EXE	vim-gutentags/plat/win32/update_gtags.cmd	/^	set GTAGS_EXE=%~2$/;"	v
GTAGS_EXE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_gtags.cmd	/^	set GTAGS_EXE=%~2$/;"	v
Get	vim/.vim/pack/plugins/start/fzf/src/merger.go	/^func (mg *Merger) Get(idx int) Result {$/;"	f
Get	vim/.vim/pack/plugins/start/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Get() bool {$/;"	f
Get	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) Get(i int) rune {$/;"	f
GetChar	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) GetChar() Event { return Event{} }$/;"	f
GetChar	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) GetChar() Event {$/;"	f
GetChar	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) GetChar() Event {$/;"	f
GetFileWinnr	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:GetFileWinnr(fileinfo) abort$/;"	f
GetNearbyTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:GetNearbyTag(request, forcecurrent, ...) abort$/;"	f
GetSupportedFiletypes	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:GetSupportedFiletypes() abort$/;"	f
GetTagInfo	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:GetTagInfo(linenr, ignorepseudo) abort$/;"	f
GlobPath	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:GlobPath(dirs, depth)$/;"	f
GlobPath	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:GlobPath(dirs, depth)$/;"	f
GotoFileWindow	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:GotoFileWindow(fileinfo, ...) abort$/;"	f
GotoNextFold	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:GotoNextFold() abort$/;"	f
GotoNextToplevelTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:GotoNextToplevelTag(direction) abort$/;"	f
GotoPrevFold	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:GotoPrevFold() abort$/;"	f
GutentagsToggleEnabled	vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleEnabled	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleFake	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsToggleTrace	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
HandleBufDelete	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:HandleBufDelete(bufname, bufnr) abort$/;"	f
HandleBufWrite	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:HandleBufWrite(fname) abort$/;"	f
HandleOnlyWindow	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:HandleOnlyWindow() abort$/;"	f
HasBg	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (p ColorPair) HasBg() bool {$/;"	f
HasFullscreenRenderer	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func HasFullscreenRenderer() bool {$/;"	f
HasFullscreenRenderer	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func HasFullscreenRenderer() bool {$/;"	f
HasLeft	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (s BorderShape) HasLeft() bool {$/;"	f
HasOpenFileWindows	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:HasOpenFileWindows() abort$/;"	f
HasRight	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (s BorderShape) HasRight() bool {$/;"	f
HasTop	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (s BorderShape) HasTop() bool {$/;"	f
Height	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) Height() int {$/;"	f
Height	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Height() int {$/;"	f
HexToColor	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func HexToColor(rrggbb string) Color {$/;"	f
HighlightTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:HighlightTag(openfolds, ...) abort$/;"	f
History	vim/.vim/pack/plugins/start/fzf/src/history.go	/^type History struct {$/;"	t
Home	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Home$/;"	c
INDEX_WHOLE_PROJECT	vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
INDEX_WHOLE_PROJECT	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
Index	vim/.vim/pack/plugins/start/fzf/src/item.go	/^func (item *Item) Index() int32 {$/;"	f
Index	vim/.vim/pack/plugins/start/fzf/src/result.go	/^func (result *Result) Index() int32 {$/;"	f
Init	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func Init(scheme string) bool {$/;"	f
Init	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Init() error                        { return nil }$/;"	f
Init	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Init() error {$/;"	f
Init	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Init() error {$/;"	f
Init	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:Init(silent) abort$/;"	f
InitTypes	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:InitTypes() abort$/;"	f
InitWindow	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:InitWindow(autoclose) abort$/;"	f
Input	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) Input() (bool, []rune) {$/;"	f
Insert	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Insert$/;"	c
Int	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (t EventType) Int() int {$/;"	f
Invalid	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Invalid$/;"	c
IsBytes	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) IsBytes() bool {$/;"	f
IsDefault	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (c Color) IsDefault() bool {$/;"	f
IsEmpty	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func (p *Pattern) IsEmpty() bool {$/;"	f
IsFull	vim/.vim/pack/plugins/start/fzf/src/chunklist.go	/^func (c *Chunk) IsFull() bool {$/;"	f
IsLightRendererSupported	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func IsLightRendererSupported() bool {$/;"	f
IsLightRendererSupported	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^func IsLightRendererSupported() bool {$/;"	f
IsLineVisible	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:IsLineVisible(line) abort$/;"	f
IsLocal	vim/.vim/pack/plugins/start/fzf/src/server.go	/^func (addr listenAddress) IsLocal() bool {$/;"	f
IsTty	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func IsTty(file *os.File) bool {$/;"	f
IsValidFile	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:IsValidFile(fname, ftype) abort$/;"	f
IsWindows	vim/.vim/pack/plugins/start/fzf/src/util/util_unix.go	/^func IsWindows() bool {$/;"	f
IsWindows	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^func IsWindows() bool {$/;"	f
Italic	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^	Italic        = Attr(1 << 2)$/;"	c
Italic	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	Italic             = Attr(tcell.AttrItalic)$/;"	c
Item	vim/.vim/pack/plugins/start/fzf/src/item.go	/^type Item struct {$/;"	t
ItemBuilder	vim/.vim/pack/plugins/start/fzf/src/chunklist.go	/^type ItemBuilder func(*Item, []byte) bool$/;"	t
Job.onExitCB	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onExitCB() abort$/;"	f
Job.onFailed	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onFailed() abort$/;"	f
Job.onStderrCB	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onStderrCB(data) abort$/;"	f
Job.onStdoutCB	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onStdoutCB(data) abort$/;"	f
Job.onSuccess	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onSuccess() abort$/;"	f
Job.run	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^    function! s:Job.run(cmd) abort$/;"	f
Jump	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Jump$/;"	c
JumpCancel	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	JumpCancel$/;"	c
JumpToNearbyTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:JumpToNearbyTag(direction, request, flags) abort$/;"	f
JumpToTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:JumpToTag(stay_in_tagbar, ...) abort$/;"	f
Key	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func Key(r rune) Event {$/;"	f
KeyLoop	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:KeyLoop()$/;"	f
KeyLoop	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:KeyLoop()$/;"	f
KeyMap.Add	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
KeyMap.All	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Compare	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Compare(keyMap1, keyMap2)$/;"	f
KeyMap.Create	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.FindFor	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
KeyMap.Invoke	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
KeyMap.Remove	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
KeyMap.bind	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
KeyMap.invoke	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
KeyName	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (e Event) KeyName() string {$/;"	f
KillCommand	vim/.vim/pack/plugins/start/fzf/src/util/util_unix.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f
KillCommand	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f
LF	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^const LF string = "\\x1b[2m␊"$/;"	c
LOG_FILE	vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
LeadingWhitespaces	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) LeadingWhitespaces() int {$/;"	f
Left	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) Left() int {$/;"	f
Left	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Left() int {$/;"	f
Left	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Left$/;"	c
LeftClick	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	LeftClick$/;"	c
Len	vim/.vim/pack/plugins/start/fzf/src/result.go	/^func (a ByOrder) Len() int {$/;"	f
Len	vim/.vim/pack/plugins/start/fzf/src/result.go	/^func (a ByRelevance) Len() int {$/;"	f
Len	vim/.vim/pack/plugins/start/fzf/src/result.go	/^func (a ByRelevanceTac) Len() int {$/;"	f
Len	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (a byTimeOrder) Len() int {$/;"	f
Length	vim/.vim/pack/plugins/start/fzf/src/merger.go	/^func (mg *Merger) Length() int {$/;"	f
Length	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) Length() int {$/;"	f
Less	vim/.vim/pack/plugins/start/fzf/src/result.go	/^func (a ByOrder) Less(i, j int) bool {$/;"	f
Less	vim/.vim/pack/plugins/start/fzf/src/result.go	/^func (a ByRelevance) Less(i, j int) bool {$/;"	f
Less	vim/.vim/pack/plugins/start/fzf/src/result.go	/^func (a ByRelevanceTac) Less(i, j int) bool {$/;"	f
Less	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (a byTimeOrder) Less(i, j int) bool {$/;"	f
Light256	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Light256  *ColorTheme$/;"	v
LightRenderer	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^type LightRenderer struct {$/;"	t
LightWindow	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^type LightWindow struct {$/;"	t
Lines	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) Lines(multiLine bool, maxLines int, wrapCols int, wrapSignWidth int, tabstop int) ([][]rune, bool) {$/;"	f
Listener.HasPath	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.HasPath(path_str) abort$/;"	f
Listener.OnInit	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.OnInit(event) abort$/;"	f
Listener.OnRefresh	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.OnRefresh(event) abort$/;"	f
Listener.OnRefreshFlags	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.OnRefreshFlags(event) abort$/;"	f
Listener.SetNext	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.SetNext(cache) abort$/;"	f
Listener.TryUpdateNERDTreeUI	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.TryUpdateNERDTreeUI() abort$/;"	f
Listener.callback	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.callback(event) abort$/;"	f
Listener.changed	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.changed() abort$/;"	f
Listener.getOption	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.getOption(name, default) abort$/;"	f
Listener.update	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.update() abort$/;"	f
Load	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Load$/;"	c
LoadUserTypeDefs	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:LoadUserTypeDefs(...) abort$/;"	f
Logger.debug	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.debug(msg) abort$/;"	f
Logger.error	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.error(msg) abort$/;"	f
Logger.info	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.info(msg) abort$/;"	f
Logger.output	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.output(level, msg) abort$/;"	f
Logger.warning	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.warning(msg) abort$/;"	f
Lookup	vim/.vim/pack/plugins/start/fzf/src/cache.go	/^func (cc *ChunkCache) Lookup(chunk *Chunk, key string) []Result {$/;"	f
Loop	vim/.vim/pack/plugins/start/fzf/src/matcher.go	/^func (m *Matcher) Loop() {$/;"	f
Loop	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) Loop() error {$/;"	f
LoopParseArgs	vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
MAKEFILE	vim/.vim/pack/plugins/start/fzf/Makefile	/^MAKEFILE       := $(realpath $(lastword $(MAKEFILE_LIST)))$/;"	m
MakeBorderStyle	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func MakeBorderStyle(shape BorderShape, unicode bool) BorderStyle {$/;"	f
MakeSlab	vim/.vim/pack/plugins/start/fzf/src/util/slab.go	/^func MakeSlab(size16 int, size32 int) *Slab {$/;"	f
MakeTransparentBorder	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func MakeTransparentBorder() BorderStyle {$/;"	f
MapKeys	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:MapKeys() abort$/;"	f
MapNorms	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MapNorms()$/;"	f
MapNorms	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MapNorms()$/;"	f
MapSpecs	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MapSpecs()$/;"	f
MapSpecs	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MapSpecs()$/;"	f
MarkToOpen	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MarkToOpen()$/;"	f
MarkToOpen	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MarkToOpen()$/;"	f
Match	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func (p *Pattern) Match(chunk *Chunk, slab *util.Slab) []Result {$/;"	f
MatchIt	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MatchIt(items, pat, limit, exc)$/;"	f
MatchIt	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MatchIt(items, pat, limit, exc)$/;"	f
MatchItem	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func (p *Pattern) MatchItem(item *Item, withPos bool, slab *util.Slab) (*Result, []Offset, *[]int) {$/;"	f
MatchRequest	vim/.vim/pack/plugins/start/fzf/src/matcher.go	/^type MatchRequest struct {$/;"	t
MatchedItems	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MatchedItems(items, pat, limit)$/;"	f
MatchedItems	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MatchedItems(items, pat, limit)$/;"	f
Matcher	vim/.vim/pack/plugins/start/fzf/src/matcher.go	/^type Matcher struct {$/;"	t
Max	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func Max(first int, second int) int {$/;"	f
Max16	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func Max16(first int16, second int16) int16 {$/;"	f
Max32	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func Max32(first int32, second int32) int32 {$/;"	f
MaxFitAndPad	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) MaxFitAndPad() (int, int) {$/;"	f
MaxX	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxX() int      { return 0 }$/;"	f
MaxX	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxX() int {$/;"	f
MaxX	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxX() int {$/;"	f
MaxY	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxY() int      { return 0 }$/;"	f
MaxY	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxY() int {$/;"	f
MaxY	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxY() int {$/;"	f
MenuController.New	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.isMinimal	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.isMinimal()$/;"	f
MenuController.showMenu	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
Merge	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f
Merge	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f
Merge	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (p ColorPair) Merge(other ColorPair) ColorPair {$/;"	f
MergeAttr	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (p ColorPair) MergeAttr(other ColorPair) ColorPair {$/;"	f
MergeNonDefault	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (p ColorPair) MergeNonDefault(other ColorPair) ColorPair {$/;"	f
Merger	vim/.vim/pack/plugins/start/fzf/src/merger.go	/^type Merger struct {$/;"	t
Min	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func Min(first int, second int) int {$/;"	f
Min32	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func Min32(first int32, second int32) int32 {$/;"	f
MinimizeMaxFoldLevel	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:MinimizeMaxFoldLevel(fileinfo, tags) abort$/;"	f
Mouse	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Mouse$/;"	c
MouseEvent	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type MouseEvent struct {$/;"	t
Move	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) Move(y int, x int) {$/;"	f
Move	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Move(y int, x int) {$/;"	f
MoveAndClear	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) MoveAndClear(y int, x int) {$/;"	f
MoveAndClear	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) MoveAndClear(y int, x int) {$/;"	f
NERDTree	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree.AddPathFilter	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
NERDTree.Close	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
NERDTree.CursorToBookmarkTable	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
NERDTree.CursorToTreeWin	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin(...)$/;"	f
NERDTree.ExistsForBuf	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
NERDTree.ExistsForTab	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
NERDTree.ForCurrentBuf	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
NERDTree.ForCurrentTab	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
NERDTree.GetWinNum	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
NERDTree.IsOpen	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
NERDTree.MustBeOpen	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
NERDTree.New	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
NERDTree.PathFilters	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
NERDTree.changeRoot	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
NERDTree.getRoot	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
NERDTree.isTabTree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
NERDTree.isWinTree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
NERDTree.previousBuf	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
NERDTree.render	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
NERDTree.setPreviousBuf	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
NERDTreeAddKeyMap	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeCWD	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeChDirOnTabSwitch	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeChDirOnTabSwitch$/;"	a
NERDTreeChangePermissions	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeChangePermissions()$/;"	f
NERDTreeCopyNode	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeCopyPath	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyPath()$/;"	f
NERDTreeDeleteNode	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeExecuteFileLinux	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileLinux()$/;"	f
NERDTreeExecuteFileWindows	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileWindows()$/;"	f
NERDTreeFocus	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeHijackNetrw	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeListNode	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMoveNode	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRender	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealFileLinux	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealFileLinux()$/;"	f
NERDTreeRevealInExplorer	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInExplorer()$/;"	f
NERDTreeRevealInFinder	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeSystemCommand	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeSystemCommand()$/;"	f
NERDTreeToggleVCS	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeToggleVCS :call <SID>ToggleTabTreeVCS('<args>')$/;"	c
NERDTreeVCS	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeVCS :call <SID>CreateTabTreeVCS('<args>')$/;"	c
Name	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (a actionType) Name() string {$/;"	f
NeedScrollbarRedraw	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NeedScrollbarRedraw() bool          { return false }$/;"	f
NeedScrollbarRedraw	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) NeedScrollbarRedraw() bool {$/;"	f
NeedScrollbarRedraw	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NeedScrollbarRedraw() bool {$/;"	f
NewAtomicBool	vim/.vim/pack/plugins/start/fzf/src/util/atomicbool.go	/^func NewAtomicBool(initialState bool) *AtomicBool {$/;"	f
NewChunkCache	vim/.vim/pack/plugins/start/fzf/src/cache.go	/^func NewChunkCache() *ChunkCache {$/;"	f
NewChunkList	vim/.vim/pack/plugins/start/fzf/src/chunklist.go	/^func NewChunkList(cache *ChunkCache, trans ItemBuilder) *ChunkList {$/;"	f
NewColorAttr	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func NewColorAttr() ColorAttr {$/;"	f
NewColorPair	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func NewColorPair(fg Color, bg Color, attr Attr) ColorPair {$/;"	f
NewEventBox	vim/.vim/pack/plugins/start/fzf/src/util/eventbox.go	/^func NewEventBox() *EventBox {$/;"	f
NewExecutor	vim/.vim/pack/plugins/start/fzf/src/util/util_unix.go	/^func NewExecutor(withShell string) *Executor {$/;"	f
NewExecutor	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^func NewExecutor(withShell string) *Executor {$/;"	f
NewFullscreenRenderer	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func NewFullscreenRenderer(theme *ColorTheme, forceBlack bool, mouse bool) Renderer {$/;"	f
NewHistory	vim/.vim/pack/plugins/start/fzf/src/history.go	/^func NewHistory(path string, maxSize int) (*History, error) {$/;"	f
NewLightRenderer	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func NewLightRenderer(ttyin *os.File, theme *ColorTheme, forceBlack bool, mouse bool, tabstop int, clearOnExit bool, fullscreen bool, maxHeightFunc func(int) int) (Renderer, error) {$/;"	f
NewMatcher	vim/.vim/pack/plugins/start/fzf/src/matcher.go	/^func NewMatcher(cache *ChunkCache, patternBuilder func([]rune) *Pattern,$/;"	f
NewMerger	vim/.vim/pack/plugins/start/fzf/src/merger.go	/^func NewMerger(pattern *Pattern, lists [][]Result, sorted bool, tac bool, revision revision, minIndex int32) *Merger {$/;"	f
NewReader	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^func NewReader(pusher func([]byte) bool, eventBox *util.EventBox, executor *util.Executor, delimNil bool, wait bool) *Reader {$/;"	f
NewTerminal	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func NewTerminal(opts *Options, eventBox *util.EventBox, executor *util.Executor) (*Terminal, error) {$/;"	f
NewWindow	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, borderStyle BorderStyle) Window {$/;"	f
NewWindow	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) NewWindow(top int, left int, width int, height int, preview bool, borderStyle BorderStyle) Window {$/;"	f
NewWindow	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, borderStyle BorderStyle) Window {$/;"	f
NoColorTheme	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func NoColorTheme() *ColorTheme {$/;"	f
NormalizeRunes	vim/.vim/pack/plugins/start/fzf/src/algo/normalize.go	/^func NormalizeRunes(runes []rune) []rune {$/;"	f
Notifier.AddListener	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
Notifier.GetListenersForEvent	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
Notifier.GetListenersMap	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
Notifier.NotifyListeners	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
NumLines	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) NumLines(atMost int) (int, bool) {$/;"	f
Offset	vim/.vim/pack/plugins/start/fzf/src/result.go	/^type Offset [2]int32$/;"	t
Once	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func Once(nextResponse bool) func() bool {$/;"	f
One	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	One$/;"	c
Open	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Open()$/;"	f
Open	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Open()$/;"	f
OpenFold	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:OpenFold() abort$/;"	f
OpenMulti	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:OpenMulti(...)$/;"	f
OpenMulti	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:OpenMulti(...)$/;"	f
OpenNoMarks	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:OpenNoMarks(md, line)$/;"	f
OpenNoMarks	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:OpenNoMarks(md, line)$/;"	f
OpenParents	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:OpenParents(...) abort$/;"	f
OpenWindow	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:OpenWindow(flags) abort$/;"	f
Opener.New	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
Opener._bufInWindows	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
Opener._checkToCloseTree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
Opener._firstUsableWindow	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
Opener._gotoTargetWin	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
Opener._isWindowUsable	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
Opener._newSplit	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
Opener._newVSplit	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
Opener._openDirectory	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
Opener._openFile	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
Opener._previousWindow	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
Opener._restoreCursorPos	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
Opener._reuseWindow	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
Opener._saveCursorPos	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
Opener.open	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
Options	vim/.vim/pack/plugins/start/fzf/src/options.go	/^type Options struct {$/;"	t
PAUSE_BEFORE_EXIT	vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
PAUSE_BEFORE_EXIT	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
POST_PROCESS_CMD	vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
POST_PROCESS_CMD	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_ROOT	vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJECT_ROOT	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PROJ_ROOT	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PageDown	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	PageDown$/;"	c
PageUp	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	PageUp$/;"	c
ParseArgs	vim-gutentags/plat/win32/update_gtags.cmd	/^:ParseArgs$/;"	l
ParseArgs	vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParseArgs	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_gtags.cmd	/^:ParseArgs$/;"	l
ParseArgs	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParseOptions	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func ParseOptions(useDefaults bool, args []string) (*Options, error) {$/;"	f
ParseRange	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^func ParseRange(str *string) (Range, bool) {$/;"	f
ParseTagline	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo, fileinfo) abort$/;"	f
PassMerger	vim/.vim/pack/plugins/start/fzf/src/merger.go	/^func PassMerger(chunks *[]*Chunk, tac bool, revision revision) *Merger {$/;"	f
PassThrough	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) PassThrough(string)                 {}$/;"	f
PassThrough	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) PassThrough(str string) {$/;"	f
PassThrough	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) PassThrough(str string) {$/;"	f
Path.AbsolutePathFor	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
Path.CopyingSupported	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(pathStr)$/;"	f
Path.Resolve	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
Path.WinToUnixPath	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._escChars	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
Path._ignorePatternMatches	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
Path._splitChunks	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
Path._str	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
Path.addDelimiter	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.addDelimiter(line)$/;"	f
Path.bookmarkNames	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
Path.changeToDir	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
Path.copy	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.createParentDirectories	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
Path.delete	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
Path.edit	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
Path.equals	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortKey	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
Path.getSortOrderIndex	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
Path.isAncestor	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(child)$/;"	f
Path.isHiddenUnder	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
Path.isUnder	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(parent)$/;"	f
Path.isUnixHiddenFile	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
Path.isUnixHiddenPath	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
Path.readInfoFromDisk	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
Path.refreshFlags	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
Path.rename	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
Path.tabnr	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
Pattern	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^type Pattern struct {$/;"	t
Pause	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Pause(bool)                         {}$/;"	f
Pause	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Pause(clear bool) {$/;"	f
Pause	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Pause(clear bool) {$/;"	f
Peek	vim/.vim/pack/plugins/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Peek(event EventType) bool {$/;"	f
PrefixMatch	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func PrefixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {$/;"	f
Prepend	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) Prepend(prefix string) {$/;"	f
PreviewScrollDown	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	PreviewScrollDown$/;"	c
PreviewScrollUp	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	PreviewScrollUp$/;"	c
Print	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) Print(text string) {$/;"	f
Print	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Print(text string) {$/;"	f
PrintHelp	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:PrintHelp() abort$/;"	f
PrintKinds	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:PrintKinds(typeinfo, fileinfo) abort$/;"	f
PrintTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:PrintTag(tag, depth, output, fileinfo, typeinfo) abort$/;"	f
ProcessFile	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ProcessFile(fname, ftype) abort$/;"	f
ProcessTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ProcessTag(name, filename, pattern, fields, is_split, typeinfo, fileinfo) abort$/;"	f
Protect	vim/.vim/pack/plugins/start/fzf/src/protector/protector.go	/^func Protect() {}$/;"	f
Protect	vim/.vim/pack/plugins/start/fzf/src/protector/protector_openbsd.go	/^func Protect() {$/;"	f
PrtAdd	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtAdd(char)$/;"	f
PrtAdd	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtAdd(char)$/;"	f
PrtBS	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtBS()$/;"	f
PrtBS	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtBS()$/;"	f
PrtClear	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtClear()$/;"	f
PrtClear	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtClear()$/;"	f
PrtClearCache	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtClearCache()$/;"	f
PrtClearCache	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtClearCache()$/;"	f
PrtCurEnd	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurEnd()$/;"	f
PrtCurEnd	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurEnd()$/;"	f
PrtCurLeft	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurLeft()$/;"	f
PrtCurLeft	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurLeft()$/;"	f
PrtCurRight	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurRight()$/;"	f
PrtCurRight	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurRight()$/;"	f
PrtCurStart	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurStart()$/;"	f
PrtCurStart	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurStart()$/;"	f
PrtDelete	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDelete()$/;"	f
PrtDelete	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDelete()$/;"	f
PrtDeleteEnt	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteEnt()$/;"	f
PrtDeleteEnt	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteEnt()$/;"	f
PrtDeleteMRU	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteMRU()$/;"	f
PrtDeleteMRU	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteMRU()$/;"	f
PrtDeleteWord	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteWord()$/;"	f
PrtDeleteWord	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteWord()$/;"	f
PrtExit	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtExit()$/;"	f
PrtExit	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtExit()$/;"	f
PrtExpandDir	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtExpandDir()$/;"	f
PrtExpandDir	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtExpandDir()$/;"	f
PrtFocusMap	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtFocusMap(char)$/;"	f
PrtFocusMap	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtFocusMap(char)$/;"	f
PrtHistory	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtHistory(...)$/;"	f
PrtHistory	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtHistory(...)$/;"	f
PrtInsert	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtInsert(...)$/;"	f
PrtInsert	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtInsert(...)$/;"	f
PrtSelectJump	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSelectJump(char)$/;"	f
PrtSelectJump	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSelectJump(char)$/;"	f
PrtSelectMove	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSelectMove(dir)$/;"	f
PrtSelectMove	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSelectMove(dir)$/;"	f
PrtSwitcher	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSwitcher()$/;"	f
PrtSwitcher	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSwitcher()$/;"	f
Push	vim/.vim/pack/plugins/start/fzf/src/chunklist.go	/^func (cl *ChunkList) Push(data []byte) bool {$/;"	f
QuoteEntry	vim/.vim/pack/plugins/start/fzf/src/util/util_unix.go	/^func (x *Executor) QuoteEntry(entry string) string {$/;"	f
QuoteEntry	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^func (x *Executor) QuoteEntry(entry string) string {$/;"	f
REVISION	vim/.vim/pack/plugins/start/fzf/Makefile	/^REVISION       := $(FZF_REVISION)$/;"	m
REVISION	vim/.vim/pack/plugins/start/fzf/Makefile	/^REVISION       := $(shell git log -n 1 --pretty=format:%h --abbrev=8 -- $(SOURCES) 2> \/dev\/null)$/;"	m
ROOT_DIR	vim/.vim/pack/plugins/start/fzf/Makefile	/^ROOT_DIR       := $(shell dirname $(MAKEFILE))$/;"	m
Range	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^type Range struct {$/;"	t
Read	vim/.vim/pack/plugins/start/fzf/src/util/util_unix.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f
Read	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f
ReadSource	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^func (r *Reader) ReadSource(inputChan chan string, root string, opts walkerOpts, ignores []string) {$/;"	f
Reader	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^type Reader struct {$/;"	t
Refresh	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Refresh()                           {}$/;"	f
Refresh	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Refresh() {$/;"	f
Refresh	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) Refresh() {$/;"	f
Refresh	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Refresh() {$/;"	f
Refresh	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Refresh() {$/;"	f
RefreshWindows	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {}$/;"	f
RefreshWindows	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) RefreshWindows(windows []Window) {$/;"	f
RefreshWindows	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {$/;"	f
Render	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Render(lines, pat)$/;"	f
Render	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Render(lines, pat)$/;"	f
RenderContent	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:RenderContent(...) abort$/;"	f
RenderKeepView	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:RenderKeepView(...) abort$/;"	f
Renderer	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type Renderer interface {$/;"	t
ReopenWindow	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ReopenWindow(delbufname) abort$/;"	f
RepeatToFill	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func RepeatToFill(str string, length int, limit int) string {$/;"	f
Reset	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Reset(args)$/;"	f
Reset	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Reset(args)$/;"	f
Reset	vim/.vim/pack/plugins/start/fzf/src/matcher.go	/^func (m *Matcher) Reset(chunks []*Chunk, patternRunes []rune, cancel bool, final bool, sort bool, revision revision) {$/;"	f
Resize	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resize(maxHeightFunc func(int) int) {}$/;"	f
Resize	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Resize(maxHeightFunc func(int) int) {$/;"	f
Resize	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resize(maxHeightFunc func(int) int) {}$/;"	f
Resize	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Resize$/;"	c
RestoreSession	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:RestoreSession() abort$/;"	f
Result	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^type Result struct {$/;"	t
Result	vim/.vim/pack/plugins/start/fzf/src/result.go	/^type Result struct {$/;"	t
Result	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Result$/;"	c
Resume	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resume(bool, bool)                  {}$/;"	f
Resume	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Resume(clear bool, sigcont bool) {$/;"	f
Resume	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resume(clear bool, sigcont bool) {$/;"	f
Reverse	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^	Reverse       = Attr(1 << 6)$/;"	c
Reverse	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	Reverse            = Attr(tcell.AttrReverse)$/;"	c
Revision	vim/.vim/pack/plugins/start/fzf/src/merger.go	/^func (mg *Merger) Revision() revision {$/;"	f
Right	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Right$/;"	c
RightClick	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	RightClick$/;"	c
Run	vim/.vim/pack/plugins/start/fzf/src/core.go	/^func Run(opts *Options) (int, error) {$/;"	f
RunAtExitFuncs	vim/.vim/pack/plugins/start/fzf/src/util/atexit.go	/^func RunAtExitFuncs() {$/;"	f
RunOnce	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func RunOnce(f func()) func() {$/;"	f
Rune	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Rune EventType = iota$/;"	c
RunesToChars	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func RunesToChars(runes []rune) Chars {$/;"	f
RunesWidth	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func RunesWidth(runes []rune, prefixWidth int, tabstop int, limit int) (int, int) {$/;"	f
SHELL	vim/.vim/pack/plugins/start/fzf/Makefile	/^	SHELL=\/bin\/sh GOOS= $(GO) test -v -tags "$(TAGS)" \\$/;"	m
SHELL	vim/.vim/pack/plugins/start/fzf/Makefile	/^SHELL          := bash$/;"	m
SID	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function s:SID()$/;"	f
SID	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:SID() abort$/;"	f
SLeftClick	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	SLeftClick$/;"	c
SOURCES	vim/.vim/pack/plugins/start/fzf/Makefile	/^SOURCES        := $(wildcard *.go src\/*.go src\/*\/*.go shell\/*sh man\/man1\/*.1) $(MAKEFILE)$/;"	m
SRightClick	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	SRightClick$/;"	c
SScrollDown	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	SScrollDown$/;"	c
SScrollUp	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	SScrollUp$/;"	c
ScrollDown	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ScrollDown$/;"	c
ScrollUp	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ScrollUp$/;"	c
Search	vim/.vim/pack/plugins/start/fzf/src/cache.go	/^func (cc *ChunkCache) Search(chunk *Chunk, key string) []Result {$/;"	f
Set	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (s *resumableState) Set(flag bool) {$/;"	f
Set	vim/.vim/pack/plugins/start/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Set(newState bool) bool {$/;"	f
Set	vim/.vim/pack/plugins/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Set(event EventType, value interface{}) {$/;"	f
SetDefTxt	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SetDefTxt()$/;"	f
SetDefTxt	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SetDefTxt()$/;"	f
SetFoldLevel	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevel(level, force) abort$/;"	f
SetFoldLevelRecursive	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevelRecursive(fileinfo, tags, level) abort$/;"	f
SetNonblock	vim/.vim/pack/plugins/start/fzf/src/util/util_unix.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f
SetNonblock	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f
SetStatusLine	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:SetStatusLine() abort$/;"	f
SetStdin	vim/.vim/pack/plugins/start/fzf/src/util/util_unix.go	/^func SetStdin(file *os.File) {$/;"	f
SetStdin	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^func SetStdin(file *os.File) {$/;"	f
SetWD	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SetWD(args)$/;"	f
SetWD	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SetWD(args)$/;"	f
Shell	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^class Shell$/;"	c
ShiftDelete	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ShiftDelete$/;"	c
ShiftDown	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ShiftDown$/;"	c
ShiftLeft	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ShiftLeft$/;"	c
ShiftRight	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ShiftRight$/;"	c
ShiftTab	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ShiftTab$/;"	c
ShiftUp	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	ShiftUp$/;"	c
ShouldEmitResizeEvent	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) ShouldEmitResizeEvent() bool        { return false }$/;"	f
ShouldEmitResizeEvent	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) ShouldEmitResizeEvent() bool {$/;"	f
ShouldEmitResizeEvent	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) ShouldEmitResizeEvent() bool {$/;"	f
ShowInPreviewWin	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ShowInPreviewWin() abort$/;"	f
ShowPrototype	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ShowPrototype(short) abort$/;"	f
ShowUsage	vim-gutentags/plat/unix/update_gtags.sh	/^ShowUsage() {$/;"	f
ShowUsage	vim-gutentags/plat/unix/update_pyscopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
ShowUsage	vim/.vim/pack/plugins/start/vim-gutentags/plat/unix/update_gtags.sh	/^ShowUsage() {$/;"	f
ShowUsage	vim/.vim/pack/plugins/start/vim-gutentags/plat/unix/update_pyscopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	vim/.vim/pack/plugins/start/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	vim/.vim/pack/plugins/start/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
ShrinkIfExpanded	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ShrinkIfExpanded() abort$/;"	f
Size	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Size() TermSize                     { return TermSize{} }$/;"	f
Size	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) Size() TermSize {$/;"	f
Size	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) Size() TermSize {$/;"	f
Size	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Size() TermSize {$/;"	f
Slab	vim/.vim/pack/plugins/start/fzf/src/util/slab.go	/^type Slab struct {$/;"	t
Snapshot	vim/.vim/pack/plugins/start/fzf/src/chunklist.go	/^func (cl *ChunkList) Snapshot(tail int) ([]*Chunk, int, bool) {$/;"	f
SpecInputs	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SpecInputs(str)$/;"	f
SpecInputs	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SpecInputs(str)$/;"	f
SplitPattern	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SplitPattern(str)$/;"	f
SplitPattern	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SplitPattern(str)$/;"	f
Start	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Start$/;"	c
State.New	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/state.vim	/^function! s:State.New() abort dict$/;"	f
State.getCurrent	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/state.vim	/^function! s:State.getCurrent(force_current) abort dict$/;"	f
State.setCurrentFile	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/state.vim	/^function! s:State.setCurrentFile(fileinfo) abort dict$/;"	f
State.setPaused	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/state.vim	/^function! s:State.setPaused() abort dict$/;"	f
Status	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type Status struct {$/;"	t
StatusItem	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type StatusItem struct {$/;"	t
Stop	vim/.vim/pack/plugins/start/fzf/src/matcher.go	/^func (m *Matcher) Stop() {$/;"	f
StrikeThrough	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^	StrikeThrough = Attr(1 << 7)$/;"	c
StrikeThrough	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	StrikeThrough      = Attr(tcell.AttrStrikeThrough)$/;"	c
String	vim/.vim/pack/plugins/start/fzf/src/actiontype_string.go	/^func (i actionType) String() string {$/;"	f
String	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func (s sizeSpec) String() string {$/;"	f
String	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func (t term) String() string {$/;"	f
String	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func (item *Item) String() string {$/;"	f
String	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^func (d Delimiter) String() string {$/;"	f
String	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^func (t Token) String() string {$/;"	f
String	vim/.vim/pack/plugins/start/fzf/src/tui/eventtype_string.go	/^func (i EventType) String() string {$/;"	f
String	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) String() string {$/;"	f
StringWidth	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func StringWidth(s string) int {$/;"	f
Style	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (c Color) Style() tcell.Color {$/;"	f
SuffixMatch	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func SuffixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {$/;"	f
Swap	vim/.vim/pack/plugins/start/fzf/src/result.go	/^func (a ByOrder) Swap(i, j int) {$/;"	f
Swap	vim/.vim/pack/plugins/start/fzf/src/result.go	/^func (a ByRelevance) Swap(i, j int) {$/;"	f
Swap	vim/.vim/pack/plugins/start/fzf/src/result.go	/^func (a ByRelevanceTac) Swap(i, j int) {$/;"	f
Swap	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (a byTimeOrder) Swap(i, j int) {$/;"	f
TAGS	vim/.vim/pack/plugins/start/fzf/Makefile	/^	TAGS=tcell make test$/;"	m
TAGS_FILE	vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
TAGS_FILE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
Tab	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Tab$/;"	c
Tagbar	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=? Tagbar              call tagbar#ToggleWindow(<f-args>)$/;"	c
TagbarBalloonExpr	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! TagbarBalloonExpr() abort$/;"	f
TagbarBufName	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:TagbarBufName() abort$/;"	f
TagbarClose	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarClose         call tagbar#CloseWindow()$/;"	c
TagbarCurrentTag	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=* TagbarCurrentTag    echo tagbar#currenttag('%s', 'No current tag', <f-args>)$/;"	c
TagbarDebug	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarDebug         call tagbar#debug#start_debug(<f-args>)$/;"	c
TagbarDebugEnd	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarDebugEnd      call tagbar#debug#stop_debug()$/;"	c
TagbarForceUpdate	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarForceUpdate   call tagbar#ForceUpdate()$/;"	c
TagbarGetTypeConfig	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=1 TagbarGetTypeConfig call tagbar#gettypeconfig(<f-args>)$/;"	c
TagbarJump	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJump   call tagbar#jump()$/;"	c
TagbarJumpNext	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJumpNext      call tagbar#jumpToNearbyTag(1)$/;"	c
TagbarJumpPrev	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJumpPrev      call tagbar#jumpToNearbyTag(-1)$/;"	c
TagbarOpen	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarOpen          call tagbar#OpenWindow(<f-args>)$/;"	c
TagbarOpenAutoClose	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call tagbar#OpenWindow('fcj')$/;"	c
TagbarSession	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^augroup TagbarSession$/;"	a
TagbarSetFoldlevel	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)$/;"	c
TagbarShowTag	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarShowTag       call tagbar#highlighttag(1, 1)$/;"	c
TagbarToggle	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarToggle        call tagbar#ToggleWindow(<f-args>)$/;"	c
TagbarTogglePause	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarTogglePause   call tagbar#toggle_pause()$/;"	c
TcellWindow	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^type TcellWindow struct {$/;"	t
TermSize	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type TermSize struct {$/;"	t
Terminal	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type Terminal struct {$/;"	t
TestAdditiveExpect	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestAdditiveExpect(t *testing.T) {$/;"	f
TestAnsiCodeStringConversion	vim/.vim/pack/plugins/start/fzf/src/ansi_test.go	/^func TestAnsiCodeStringConversion(t *testing.T) {$/;"	f
TestAsUint16	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestAsUint16(t *testing.T) {$/;"	f
TestAtExit	vim/.vim/pack/plugins/start/fzf/src/util/atexit_test.go	/^func TestAtExit(t *testing.T) {$/;"	f
TestAtomicBool	vim/.vim/pack/plugins/start/fzf/src/util/atomicbool_test.go	/^func TestAtomicBool(t *testing.T) {$/;"	f
TestBase	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^class TestBase < Minitest::Test$/;"	c
TestBash	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^class TestBash < TestBase$/;"	c	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept
TestBind	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestBind(t *testing.T) {$/;"	f
TestCacheKey	vim/.vim/pack/plugins/start/fzf/src/pattern_test.go	/^func TestCacheKey(t *testing.T) {$/;"	f
TestCacheable	vim/.vim/pack/plugins/start/fzf/src/pattern_test.go	/^func TestCacheable(t *testing.T) {$/;"	f
TestCaseSensitivity	vim/.vim/pack/plugins/start/fzf/src/pattern_test.go	/^func TestCaseSensitivity(t *testing.T) {$/;"	f
TestCharsLength	vim/.vim/pack/plugins/start/fzf/src/util/chars_test.go	/^func TestCharsLength(t *testing.T) {$/;"	f
TestCharsLines	vim/.vim/pack/plugins/start/fzf/src/util/chars_test.go	/^func TestCharsLines(t *testing.T) {$/;"	f
TestCharsToString	vim/.vim/pack/plugins/start/fzf/src/util/chars_test.go	/^func TestCharsToString(t *testing.T) {$/;"	f
TestChunkCache	vim/.vim/pack/plugins/start/fzf/src/cache_test.go	/^func TestChunkCache(t *testing.T) {$/;"	f
TestChunkList	vim/.vim/pack/plugins/start/fzf/src/chunklist_test.go	/^func TestChunkList(t *testing.T) {$/;"	f
TestChunkListTail	vim/.vim/pack/plugins/start/fzf/src/chunklist_test.go	/^func TestChunkListTail(t *testing.T) {$/;"	f
TestChunkTiebreak	vim/.vim/pack/plugins/start/fzf/src/result_test.go	/^func TestChunkTiebreak(t *testing.T) {$/;"	f
TestColorOffset	vim/.vim/pack/plugins/start/fzf/src/result_test.go	/^func TestColorOffset(t *testing.T) {$/;"	f
TestColorSpec	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestColorSpec(t *testing.T) {$/;"	f
TestCompareVersions	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestCompareVersions(t *testing.T) {$/;"	f
TestConstrain	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestConstrain(t *testing.T) {$/;"	f
TestConstrain32	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestConstrain32(t *testing.T) {$/;"	f
TestDefaultCtrlNP	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestDefaultCtrlNP(t *testing.T) {$/;"	f
TestDelimiterRegex	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestDelimiterRegex(t *testing.T) {$/;"	f
TestDelimiterRegexRegex	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestDelimiterRegexRegex(t *testing.T) {$/;"	f
TestDelimiterRegexRegexCaret	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestDelimiterRegexRegexCaret(t *testing.T) {$/;"	f
TestDelimiterRegexString	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestDelimiterRegexString(t *testing.T) {$/;"	f
TestDurWithIn	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestDurWithIn(t *testing.T) {$/;"	f
TestEmptyMerger	vim/.vim/pack/plugins/start/fzf/src/merger_test.go	/^func TestEmptyMerger(t *testing.T) {$/;"	f
TestEmptyPattern	vim/.vim/pack/plugins/start/fzf/src/algo/algo_test.go	/^func TestEmptyPattern(t *testing.T) {$/;"	f
TestEqual	vim/.vim/pack/plugins/start/fzf/src/pattern_test.go	/^func TestEqual(t *testing.T) {$/;"	f
TestEventBox	vim/.vim/pack/plugins/start/fzf/src/util/eventbox_test.go	/^func TestEventBox(t *testing.T) {$/;"	f
TestExact	vim/.vim/pack/plugins/start/fzf/src/pattern_test.go	/^func TestExact(t *testing.T) {$/;"	f
TestExactMatchNaive	vim/.vim/pack/plugins/start/fzf/src/algo/algo_test.go	/^func TestExactMatchNaive(t *testing.T) {$/;"	f
TestExactMatchNaiveBackward	vim/.vim/pack/plugins/start/fzf/src/algo/algo_test.go	/^func TestExactMatchNaiveBackward(t *testing.T) {$/;"	f
TestExtractColor	vim/.vim/pack/plugins/start/fzf/src/ansi_test.go	/^func TestExtractColor(t *testing.T) {$/;"	f
TestFish	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^class TestFish < TestBase$/;"	c	class:TestBase.TestGoFZF.test_kill_default_command_on_abort
TestFuzzyMatch	vim/.vim/pack/plugins/start/fzf/src/algo/algo_test.go	/^func TestFuzzyMatch(t *testing.T) {$/;"	f
TestFuzzyMatchBackward	vim/.vim/pack/plugins/start/fzf/src/algo/algo_test.go	/^func TestFuzzyMatchBackward(t *testing.T) {$/;"	f
TestGetCharEventKey	vim/.vim/pack/plugins/start/fzf/src/tui/tcell_test.go	/^func TestGetCharEventKey(t *testing.T) {$/;"	f
TestGoFZF	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^class TestGoFZF < TestBase$/;"	c	class:TestBase
TestHexToColor	vim/.vim/pack/plugins/start/fzf/src/tui/tui_test.go	/^func TestHexToColor(t *testing.T) {$/;"	f
TestHistory	vim/.vim/pack/plugins/start/fzf/src/history_test.go	/^func TestHistory(t *testing.T) {$/;"	f
TestInitProfiling	vim/.vim/pack/plugins/start/fzf/src/options_pprof_test.go	/^func TestInitProfiling(t *testing.T) {$/;"	f
TestIrrelevantNth	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestIrrelevantNth(t *testing.T) {$/;"	f
TestLongString	vim/.vim/pack/plugins/start/fzf/src/algo/algo_test.go	/^func TestLongString(t *testing.T) {$/;"	f
TestMaskActionContents	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestMaskActionContents(t *testing.T) {$/;"	f
TestMax	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestMax(t *testing.T) {$/;"	f
TestMax16	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestMax16(t *testing.T) {$/;"	f
TestMax32	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestMax32(t *testing.T) {$/;"	f
TestMergerSorted	vim/.vim/pack/plugins/start/fzf/src/merger_test.go	/^func TestMergerSorted(t *testing.T) {$/;"	f
TestMergerUnsorted	vim/.vim/pack/plugins/start/fzf/src/merger_test.go	/^func TestMergerUnsorted(t *testing.T) {$/;"	f
TestMin	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestMin(t *testing.T) {$/;"	f
TestMin32	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestMin32(t *testing.T) {$/;"	f
TestNextAnsiEscapeSequence	vim/.vim/pack/plugins/start/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence(t *testing.T) {$/;"	f
TestNextAnsiEscapeSequence_Fuzz_Modified	vim/.vim/pack/plugins/start/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Modified(t *testing.T) {$/;"	f
TestNextAnsiEscapeSequence_Fuzz_Random	vim/.vim/pack/plugins/start/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Random(t *testing.T) {$/;"	f
TestNormalize	vim/.vim/pack/plugins/start/fzf/src/algo/algo_test.go	/^func TestNormalize(t *testing.T) {$/;"	f
TestOffsetSort	vim/.vim/pack/plugins/start/fzf/src/result_test.go	/^func TestOffsetSort(t *testing.T) {$/;"	f
TestOnce	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestOnce(t *testing.T) {$/;"	f
TestOrigTextAndTransformed	vim/.vim/pack/plugins/start/fzf/src/pattern_test.go	/^func TestOrigTextAndTransformed(t *testing.T) {$/;"	f
TestParseAnsiCode	vim/.vim/pack/plugins/start/fzf/src/ansi_test.go	/^func TestParseAnsiCode(t *testing.T) {$/;"	f
TestParseKeys	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestParseKeys(t *testing.T) {$/;"	f
TestParseKeysWithComma	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestParseKeysWithComma(t *testing.T) {$/;"	f
TestParsePlaceholder	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func TestParsePlaceholder(t *testing.T) {$/;"	f
TestParseRange	vim/.vim/pack/plugins/start/fzf/src/tokenizer_test.go	/^func TestParseRange(t *testing.T) {$/;"	f
TestParseSingleActionList	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestParseSingleActionList(t *testing.T) {$/;"	f
TestParseSingleActionListError	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestParseSingleActionListError(t *testing.T) {$/;"	f
TestParseTermsEmpty	vim/.vim/pack/plugins/start/fzf/src/pattern_test.go	/^func TestParseTermsEmpty(t *testing.T) {$/;"	f
TestParseTermsExtended	vim/.vim/pack/plugins/start/fzf/src/pattern_test.go	/^func TestParseTermsExtended(t *testing.T) {$/;"	f
TestParseTermsExtendedExact	vim/.vim/pack/plugins/start/fzf/src/pattern_test.go	/^func TestParseTermsExtendedExact(t *testing.T) {$/;"	f
TestPowershellCommands	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func TestPowershellCommands(t *testing.T) {$/;"	f
TestPrefixMatch	vim/.vim/pack/plugins/start/fzf/src/algo/algo_test.go	/^func TestPrefixMatch(t *testing.T) {$/;"	f
TestPreviewOpts	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestPreviewOpts(t *testing.T) {$/;"	f
TestQuoteEntry	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func TestQuoteEntry(t *testing.T) {$/;"	f
TestRankComparison	vim/.vim/pack/plugins/start/fzf/src/result_test.go	/^func TestRankComparison(t *testing.T) {$/;"	f
TestReadFromCommand	vim/.vim/pack/plugins/start/fzf/src/reader_test.go	/^func TestReadFromCommand(t *testing.T) {$/;"	f
TestRepeatToFill	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestRepeatToFill(t *testing.T) {$/;"	f
TestReplacePlaceholder	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func TestReplacePlaceholder(t *testing.T) {$/;"	f
TestResultRank	vim/.vim/pack/plugins/start/fzf/src/result_test.go	/^func TestResultRank(t *testing.T) {$/;"	f
TestRunesWidth	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestRunesWidth(t *testing.T) {$/;"	f
TestShell	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^module TestShell$/;"	m	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort
TestSplitNth	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestSplitNth(t *testing.T) {$/;"	f
TestStringPtr	vim/.vim/pack/plugins/start/fzf/src/item_test.go	/^func TestStringPtr(t *testing.T) {$/;"	f
TestStringWidth	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestStringWidth(t *testing.T) {$/;"	f
TestSuffixMatch	vim/.vim/pack/plugins/start/fzf/src/algo/algo_test.go	/^func TestSuffixMatch(t *testing.T) {$/;"	f
TestToCharsAscii	vim/.vim/pack/plugins/start/fzf/src/util/chars_test.go	/^func TestToCharsAscii(t *testing.T) {$/;"	f
TestToggle	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestToggle(t *testing.T) {$/;"	f
TestTokenize	vim/.vim/pack/plugins/start/fzf/src/tokenizer_test.go	/^func TestTokenize(t *testing.T) {$/;"	f
TestTransform	vim/.vim/pack/plugins/start/fzf/src/tokenizer_test.go	/^func TestTransform(t *testing.T) {$/;"	f
TestTransformIndexOutOfBounds	vim/.vim/pack/plugins/start/fzf/src/tokenizer_test.go	/^func TestTransformIndexOutOfBounds(t *testing.T) {$/;"	f
TestTrimLength	vim/.vim/pack/plugins/start/fzf/src/util/chars_test.go	/^func TestTrimLength(t *testing.T) {$/;"	f
TestTruncate	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^func TestTruncate(t *testing.T) {$/;"	f
TestUnixCommands	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func TestUnixCommands(t *testing.T) {$/;"	f
TestValidateSign	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func TestValidateSign(t *testing.T) {$/;"	f
TestWindowsCommands	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func TestWindowsCommands(t *testing.T) {$/;"	f
TestZsh	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^class TestZsh < TestBase$/;"	c	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept
Tmux	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^class Tmux$/;"	c
ToChars	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func ToChars(bytes []byte) Chars {$/;"	f
ToKebabCase	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func ToKebabCase(s string) string {$/;"	f
ToRunes	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) ToRunes() []rune {$/;"	f
ToString	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^func (s *ansiState) ToString() string {$/;"	f
ToString	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) ToString() string {$/;"	f
Toggle	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func (o *previewOpts) Toggle() {$/;"	f
ToggleAutoclose	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleAutoclose() abort$/;"	f
ToggleByFname	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleByFname()$/;"	f
ToggleByFname	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleByFname()$/;"	f
ToggleCaseInsensitive	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleCaseInsensitive() abort$/;"	f
ToggleFocus	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleFocus()$/;"	f
ToggleFocus	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleFocus()$/;"	f
ToggleFold	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleFold() abort$/;"	f
ToggleHelp	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleHelp() abort$/;"	f
ToggleHideNonPublicTags	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleHideNonPublicTags() abort$/;"	f
ToggleKeyLoop	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleKeyLoop()$/;"	f
ToggleKeyLoop	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleKeyLoop()$/;"	f
ToggleMRURelative	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleMRURelative()$/;"	f
ToggleMRURelative	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleMRURelative()$/;"	f
TogglePause	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:TogglePause() abort$/;"	f
ToggleRegex	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleRegex()$/;"	f
ToggleRegex	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleRegex()$/;"	f
ToggleSort	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleSort() abort$/;"	f
ToggleTabTreeVCS	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:ToggleTabTreeVCS(name)$/;"	f
ToggleType	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleType(dir)$/;"	f
ToggleType	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleType(dir)$/;"	f
ToggleWindow	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ToggleWindow(flags) abort$/;"	f
Token	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^type Token struct {$/;"	t
Tokenize	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^func Tokenize(text string, delimiter Delimiter) []Token {$/;"	f
Top	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Top() int       { return 0 }$/;"	f
Top	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Top() int {$/;"	f
Top	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) Top() int {$/;"	f
Top	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Top() int {$/;"	f
Top	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Top() int {$/;"	f
TrailingWhitespaces	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) TrailingWhitespaces() int {$/;"	f
Transform	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^func Transform(tokens []Token, withNth []Range) []Token {$/;"	f
TransformUserTypeDef	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:TransformUserTypeDef(def) abort$/;"	f
TreeDirNode.AbsoluteTreeRoot	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
TreeDirNode._glob	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
TreeDirNode._initChildren	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openInNewTab	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
TreeDirNode.activate	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
TreeDirNode.addChild	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.displayString	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
TreeDirNode.findNode	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getCascade	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
TreeDirNode.getCascadeRoot	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascadeRoot()$/;"	f
TreeDirNode.getChild	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getDirChildren	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getDirChildren()$/;"	f
TreeDirNode.getVisibleChildCount	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.isCascadable	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
TreeDirNode.open	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
TreeDirNode.openAlong	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
TreeDirNode.openExplorer	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.refreshDirFlags	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
TreeDirNode.refreshFlags	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
TreeDirNode.removeChild	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
TreeDirNode.sortChildren	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
TreeDirNode.transplantChild	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetSelected	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
TreeFileNode._renderToString	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
TreeFileNode.activate	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
TreeFileNode.bookmark	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBookmarks	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
TreeFileNode.copy	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findSibling	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getNerdtree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
TreeFileNode.isRoot	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.open	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
TreeFileNode.openExplorer	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openExplorer()$/;"	f
TreeFileNode.openInNewTab	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.refreshFlags	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
TreeFileNode.rename	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TrimLength	vim/.vim/pack/plugins/start/fzf/src/item.go	/^func (item *Item) TrimLength() uint16 {$/;"	f
TrimLength	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) TrimLength() uint16 {$/;"	f
TrimTrailingWhitespaces	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) TrimTrailingWhitespaces() {$/;"	f
Truncate	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^func Truncate(input string, limit int) ([]rune, int) {$/;"	f
TtyIn	vim/.vim/pack/plugins/start/fzf/src/tui/ttyname_unix.go	/^func TtyIn() (*os.File, error) {$/;"	f
TtyIn	vim/.vim/pack/plugins/start/fzf/src/tui/ttyname_windows.go	/^func TtyIn() (*os.File, error) {$/;"	f
TtyOut	vim/.vim/pack/plugins/start/fzf/src/tui/ttyname_unix.go	/^func TtyOut() (*os.File, error) {$/;"	f
TtyOut	vim/.vim/pack/plugins/start/fzf/src/tui/ttyname_windows.go	/^func TtyOut() (*os.File, error) {$/;"	f
UI.IndentWid	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
UI.MarkupReg	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
UI.New	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
UI.UpDirLine	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
UI._dumpHelp	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
UI._indentLevelFor	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
UI._renderBookmarks	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
UI._stripMarkup	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
UI.centerView	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
UI.getLineNum	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(node)$/;"	f
UI.getPath	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
UI.getRootLineNum	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
UI.getShowBookmarks	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
UI.getShowFileLines	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFileLines()$/;"	f
UI.getShowFiles	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
UI.getShowHelp	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
UI.getShowHidden	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
UI.isIgnoreFilterEnabled	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
UI.isMinimal	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
UI.render	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
UI.renderViewSavingPosition	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
UI.restoreScreenState	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
UI.saveScreenState	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
UI.setShowBookmarks	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowBookmarks(value)$/;"	f
UI.setShowHidden	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
UI.toggleHelp	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
UI.toggleIgnoreFilter	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
UI.toggleShowBookmarks	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
UI.toggleShowFileLines	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFileLines()$/;"	f
UI.toggleShowFiles	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
UI.toggleShowHidden	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
UI.toggleZoom	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
UNAME_M	vim/.vim/pack/plugins/start/fzf/Makefile	/^UNAME_M := $(shell uname -m)$/;"	m
UPDATED_SOURCE	vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
UPDATED_SOURCE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
Underline	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^	Underline     = Attr(1 << 3)$/;"	c
Underline	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	Underline          = Attr(tcell.AttrUnderline)$/;"	c
Unlock	vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Unlock	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Unwatch	vim/.vim/pack/plugins/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Unwatch(events ...EventType) {$/;"	f
Up	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Up$/;"	c
Update	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Update(str)$/;"	f
Update	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Update(str)$/;"	f
UpdateCount	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) UpdateCount(cnt int, final bool, failedCommand *string) {$/;"	f
UpdateHeader	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) UpdateHeader(header []string) {$/;"	f
UpdateList	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) UpdateList(merger *Merger) {$/;"	f
UpdateProgress	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) UpdateProgress(progress float32) {$/;"	f
Usage	vim-gutentags/plat/win32/update_gtags.cmd	/^:Usage$/;"	l
Usage	vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
Usage	vim/.vim/pack/plugins/start/fzf/src/options.go	/^const Usage = `fzf is an interactive filter program for any kind of list.$/;"	c
Usage	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_gtags.cmd	/^:Usage$/;"	l
Usage	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
UserCmd	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:UserCmd(lscmd)$/;"	f
UserCmd	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:UserCmd(lscmd)$/;"	f
VERSION	vim/.vim/pack/plugins/start/fzf/Makefile	/^VERSION        := $(FZF_VERSION)$/;"	m
VERSION	vim/.vim/pack/plugins/start/fzf/Makefile	/^VERSION        := $(shell git describe --abbrev=0 2> \/dev\/null | sed "s\/^v\/\/")$/;"	m
VERSION_REGEX	vim/.vim/pack/plugins/start/fzf/Makefile	/^VERSION_REGEX  := $(subst .,\\.,$(VERSION_TRIM))$/;"	m
VERSION_TRIM	vim/.vim/pack/plugins/start/fzf/Makefile	/^VERSION_TRIM   := $(shell sed "s\/^v\/\/; s\/-.*\/\/" <<< $(VERSION))$/;"	m
VimuxAutocmds	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^augroup VimuxAutocmds$/;"	a
VimuxClearRunnerHistory	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^command -bar VimuxClearRunnerHistory :call VimuxClearRunnerHistory()$/;"	c
VimuxClearRunnerHistory	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxClearRunnerHistory() abort$/;"	f
VimuxClearTerminalScreen	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^command -bar VimuxClearTerminalScreen :call VimuxClearTerminalScreen()$/;"	c
VimuxClearTerminalScreen	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxClearTerminalScreen() abort$/;"	f
VimuxCloseRunner	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^command -bar VimuxCloseRunner :call VimuxCloseRunner()$/;"	c
VimuxCloseRunner	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxCloseRunner() abort$/;"	f
VimuxInspectRunner	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^command -bar VimuxInspectRunner :call VimuxInspectRunner()$/;"	c
VimuxInspectRunner	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxInspectRunner() abort$/;"	f
VimuxInterruptRunner	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^command -bar VimuxInterruptRunner :call VimuxInterruptRunner()$/;"	c
VimuxInterruptRunner	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxInterruptRunner() abort$/;"	f
VimuxOpenRunner	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^command -bar VimuxOpenRunner :call VimuxOpenRunner()$/;"	c
VimuxOpenRunner	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxOpenRunner() abort$/;"	f
VimuxOption	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxOption(name) abort$/;"	f
VimuxPromptCommand	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^command -nargs=? VimuxPromptCommand :call VimuxPromptCommand(<args>)$/;"	c
VimuxPromptCommand	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxPromptCommand(...) abort$/;"	f
VimuxRunCommand	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^command -nargs=* VimuxRunCommand :call VimuxRunCommand(<args>)$/;"	c
VimuxRunCommand	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxRunCommand(command, ...) abort$/;"	f
VimuxRunCommandInDir	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxRunCommandInDir(command, useFile) abort$/;"	f
VimuxRunLastCommand	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^command -bar VimuxRunLastCommand :call VimuxRunLastCommand()$/;"	c
VimuxRunLastCommand	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxRunLastCommand() abort$/;"	f
VimuxScrollDownInspect	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^command -bar VimuxScrollDownInspect :call VimuxScrollDownInspect()$/;"	c
VimuxScrollDownInspect	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxScrollDownInspect() abort$/;"	f
VimuxScrollUpInspect	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^command -bar VimuxScrollUpInspect :call VimuxScrollUpInspect()$/;"	c
VimuxScrollUpInspect	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxScrollUpInspect() abort$/;"	f
VimuxSendKeys	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxSendKeys(keys) abort$/;"	f
VimuxSendText	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxSendText(text) abort$/;"	f
VimuxTmux	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxTmux(arguments) abort$/;"	f
VimuxTogglePane	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^command -bar VimuxTogglePane :call VimuxTogglePane()$/;"	c
VimuxTogglePane	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxTogglePane() abort$/;"	f
VimuxZoomRunner	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^command -bar VimuxZoomRunner :call VimuxZoomRunner()$/;"	c
VimuxZoomRunner	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! VimuxZoomRunner() abort$/;"	f
Visible	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func (o *previewOpts) Visible() bool {$/;"	f
Wait	vim/.vim/pack/plugins/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Wait(callback func(*Events)) {$/;"	f
WaitFor	vim/.vim/pack/plugins/start/fzf/src/util/eventbox.go	/^func (b *EventBox) WaitFor(event EventType) {$/;"	f
Watch	vim/.vim/pack/plugins/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Watch(events ...EventType) {$/;"	f
Width	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) Width() int {$/;"	f
Width	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Width() int {$/;"	f
Window	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^type Window interface {$/;"	t
WithAttr	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (p ColorPair) WithAttr(attr Attr) ColorPair {$/;"	f
WriteTemporaryFile	vim/.vim/pack/plugins/start/fzf/src/functions.go	/^func WriteTemporaryFile(data []string, printSep string) string {$/;"	f
X	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) X() int {$/;"	f
X	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) X() int {$/;"	f
Y	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) Y() int {$/;"	f
Y	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Y() int {$/;"	f
Zero	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	Zero$/;"	c
ZoomWindow	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:ZoomWindow() abort$/;"	f
_	vim/.vim/pack/plugins/start/fzf/src/actiontype_string.go	/^func _() {$/;"	f
_	vim/.vim/pack/plugins/start/fzf/src/tui/eventtype_string.go	/^func _() {$/;"	f
_EventType_index	vim/.vim/pack/plugins/start/fzf/src/tui/eventtype_string.go	/^var _EventType_index = [...]uint16{0, 4, 9, 14, 19, 24, 29, 34, 39, 44, 47, 52, 57, 62, 67, 72, 77, 82, 87, 92, 97, 102, 107, 112, 117, 122, 127, 132, 135, 144, 154, 167, 183, 192, 201, 209, 218, 224, 230, 238, 240, 244, 248, 253, 257, 260, 266, 273, 282, 291, 301, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 333, 336, 339, 351, 356, 363, 370, 378, 388, 400, 412, 425, 428, 435, 442, 447, 452, 463, 472, 482, 492, 503, 511, 521, 530, 541, 556, 573, 579, 585, 596, 601, 605, 610, 613, 617, 623, 627, 637, 648}$/;"	v
_EventType_name	vim/.vim/pack/plugins/start/fzf/src/tui/eventtype_string.go	/^const _EventType_name = "RuneCtrlACtrlBCtrlCCtrlDCtrlECtrlFCtrlGCtrlHTabCtrlJCtrlKCtrlLCtrlMCtrlNCtrlOCtrlPCtrlQCtrlRCtrlSCtrlTCtrlUCtrlVCtrlWCtrlXCtrlYCtrlZEscCtrlSpaceCtrlDeleteCtrlBackSlashCtrlRightBracketCtrlCaretCtrlSlashShiftTabBackspaceDeletePageUpPageDownUpDownLeftRightHomeEndInsertShiftUpShiftDownShiftLeftShiftRightShiftDeleteF1F2F3F4F5F6F7F8F9F10F11F12AltBackspaceAltUpAltDownAltLeftAltRightAltShiftUpAltShiftDownAltShiftLeftAltShiftRightAltCtrlAltInvalidFatalMouseDoubleClickLeftClickRightClickSLeftClickSRightClickScrollUpScrollDownSScrollUpSScrollDownPreviewScrollUpPreviewScrollDownResizeChangeBackwardEOFStartLoadFocusOneZeroResultJumpJumpCancelClickHeader"$/;"	c
__fzf_cd__	vim/.vim/pack/plugins/start/fzf/shell/key-bindings.bash	/^__fzf_cd__() {$/;"	f
__fzf_comprun	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^__fzf_comprun() {$/;"	f
__fzf_comprun	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^__fzf_comprun() {$/;"	f
__fzf_defaults	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^__fzf_defaults() {$/;"	f
__fzf_defaults	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^__fzf_defaults() {$/;"	f
__fzf_defaults	vim/.vim/pack/plugins/start/fzf/shell/key-bindings.bash	/^__fzf_defaults() {$/;"	f
__fzf_defaults	vim/.vim/pack/plugins/start/fzf/shell/key-bindings.zsh	/^__fzf_defaults() {$/;"	f
__fzf_defc	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^__fzf_defc() {$/;"	f
__fzf_extract_command	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^__fzf_extract_command() {$/;"	f
__fzf_generic_path_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^__fzf_generic_path_completion() {$/;"	f
__fzf_generic_path_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^__fzf_generic_path_completion() {$/;"	f
__fzf_history__	vim/.vim/pack/plugins/start/fzf/shell/key-bindings.bash	/^  __fzf_history__() {$/;"	f
__fzf_list_hosts	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^  __fzf_list_hosts() {$/;"	f
__fzf_list_hosts	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^  __fzf_list_hosts() {$/;"	f
__fzf_orig_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^__fzf_orig_completion() {$/;"	f
__fzf_orig_completion_get_orig_func	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^__fzf_orig_completion_get_orig_func() {$/;"	f
__fzf_orig_completion_instantiate	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^__fzf_orig_completion_instantiate() {$/;"	f
__fzf_select	vim/.vim/pack/plugins/start/fzf/shell/key-bindings.zsh	/^__fzf_select() {$/;"	f
__fzf_select__	vim/.vim/pack/plugins/start/fzf/shell/key-bindings.bash	/^__fzf_select__() {$/;"	f
__fzfcmd	vim/.vim/pack/plugins/start/fzf/shell/key-bindings.bash	/^__fzfcmd() {$/;"	f
__fzfcmd	vim/.vim/pack/plugins/start/fzf/shell/key-bindings.zsh	/^__fzfcmd() {$/;"	f
_actionType_index	vim/.vim/pack/plugins/start/fzf/src/actiontype_string.go	/^var _actionType_index = [...]uint16{0, 9, 17, 25, 35, 42, 50, 68, 76, 85, 102, 123, 138, 159, 183, 198, 207, 227, 242, 256, 277, 292, 306, 320, 333, 350, 358, 371, 387, 399, 407, 421, 435, 446, 457, 475, 492, 499, 518, 530, 544, 553, 568, 580, 593, 604, 615, 627, 641, 662, 677, 690, 705, 722, 729, 734, 743, 754, 765, 778, 793, 804, 817, 832, 839, 852, 865, 882, 897, 910, 924, 938, 954, 974, 986, 1009, 1027, 1051, 1069, 1086, 1096, 1112, 1134, 1147, 1163, 1175, 1189, 1205, 1223, 1243, 1265, 1279, 1294, 1302, 1308, 1322, 1337, 1347, 1363, 1378, 1388, 1396, 1403, 1412, 1425, 1441, 1456, 1465, 1476, 1485, 1494, 1503, 1516, 1529}$/;"	v
_actionType_name	vim/.vim/pack/plugins/start/fzf/src/actiontype_string.go	/^const _actionType_name = "actIgnoreactStartactClickactInvalidactCharactMouseactBeginningOfLineactAbortactAcceptactAcceptNonEmptyactAcceptOrPrintQueryactBackwardCharactBackwardDeleteCharactBackwardDeleteCharEofactBackwardWordactCancelactChangeBorderLabelactChangeHeaderactChangeMultiactChangePreviewLabelactChangePromptactChangeQueryactClearScreenactClearQueryactClearSelectionactCloseactDeleteCharactDeleteCharEofactEndOfLineactFatalactForwardCharactForwardWordactKillLineactKillWordactUnixLineDiscardactUnixWordRuboutactYankactBackwardKillWordactSelectAllactDeselectAllactToggleactToggleSearchactToggleAllactToggleDownactToggleUpactToggleInactToggleOutactToggleTrackactToggleTrackCurrentactToggleHeaderactToggleWrapactTrackCurrentactUntrackCurrentactDownactUpactPageUpactPageDownactPositionactHalfPageUpactHalfPageDownactOffsetUpactOffsetDownactOffsetMiddleactJumpactJumpAcceptactPrintQueryactRefreshPreviewactReplaceQueryactToggleSortactShowPreviewactHidePreviewactTogglePreviewactTogglePreviewWrapactTransformactTransformBorderLabelactTransformHeaderactTransformPreviewLabelactTransformPromptactTransformQueryactPreviewactChangePreviewactChangePreviewWindowactPreviewTopactPreviewBottomactPreviewUpactPreviewDownactPreviewPageUpactPreviewPageDownactPreviewHalfPageUpactPreviewHalfPageDownactPrevHistoryactPrevSelectedactPrintactPutactNextHistoryactNextSelectedactExecuteactExecuteSilentactExecuteMultiactSigStopactFirstactLastactReloadactReloadSyncactDisableSearchactEnableSearchactSelectactDeselectactUnbindactRebindactBecomeactShowHeaderactHideHeader"$/;"	c
_colorToAttribute	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	_colorToAttribute = []tcell.Color{$/;"	v
_fzf_alias_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_alias_completion() {$/;"	f
_fzf_complete	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_complete() {$/;"	f
_fzf_complete	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^_fzf_complete() {$/;"	f
_fzf_complete_export	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^_fzf_complete_export() {$/;"	f
_fzf_complete_kill	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill_post	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^_fzf_complete_kill_post() {$/;"	f
_fzf_complete_ssh	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_ssh	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_telnet	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_unalias	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unset	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^_fzf_complete_unset() {$/;"	f
_fzf_dir_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_dir_completion() {$/;"	f
_fzf_dir_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^_fzf_dir_completion() {$/;"	f
_fzf_feed_fifo	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^_fzf_feed_fifo() {$/;"	f
_fzf_file_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_file_completion() {$/;"	f
_fzf_handle_dynamic_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_handle_dynamic_completion() {$/;"	f
_fzf_host_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_host_completion() {$/;"	f
_fzf_opts_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_opts_completion() {$/;"	f
_fzf_path_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_path_completion() {$/;"	f
_fzf_path_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.zsh	/^_fzf_path_completion() {$/;"	f
_fzf_proc_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_proc_completion() {$/;"	f
_fzf_proc_completion_post	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_proc_completion_post() {$/;"	f
_fzf_setup_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_setup_completion() {$/;"	f
_fzf_statusline	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
_fzf_var_completion	vim/.vim/pack/plugins/start/fzf/shell/completion.bash	/^_fzf_var_completion() {$/;"	f
_getPrefix	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:_getPrefix() abort dict$/;"	f
_handleOldOptions	vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
_handleOldOptions	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
_initialResize	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	_initialResize   bool = true$/;"	v
_prevMouseButton	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	_prevMouseButton tcell.ButtonMask$/;"	v
_screen	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^	_screen          tcell.Screen$/;"	v
_splitRegex	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^var _splitRegex *regexp.Regexp$/;"	v
a:temps	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^    let a:temps.shellscript = shellscript$/;"	v
aboveOrBelow	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func (a previewOpts) aboveOrBelow() bool {$/;"	f
actAbort	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actAbort$/;"	c
actAccept	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actAccept$/;"	c
actAcceptNonEmpty	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actAcceptNonEmpty$/;"	c
actAcceptOrPrintQuery	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actAcceptOrPrintQuery$/;"	c
actBackwardChar	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actBackwardChar$/;"	c
actBackwardDeleteChar	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actBackwardDeleteChar$/;"	c
actBackwardDeleteCharEof	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actBackwardDeleteCharEof$/;"	c
actBackwardKillWord	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actBackwardKillWord$/;"	c
actBackwardWord	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actBackwardWord$/;"	c
actBecome	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actBecome$/;"	c
actBeginningOfLine	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actBeginningOfLine$/;"	c
actCancel	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actCancel$/;"	c
actChangeBorderLabel	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actChangeBorderLabel$/;"	c
actChangeHeader	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actChangeHeader$/;"	c
actChangeMulti	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actChangeMulti$/;"	c
actChangePreview	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actChangePreview$/;"	c
actChangePreviewLabel	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actChangePreviewLabel$/;"	c
actChangePreviewWindow	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actChangePreviewWindow$/;"	c
actChangePrompt	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actChangePrompt$/;"	c
actChangeQuery	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actChangeQuery$/;"	c
actChar	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actChar$/;"	c
actClearQuery	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actClearQuery$/;"	c
actClearScreen	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actClearScreen$/;"	c
actClearSelection	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actClearSelection$/;"	c
actClick	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actClick$/;"	c
actClose	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actClose$/;"	c
actDeleteChar	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actDeleteChar$/;"	c
actDeleteCharEof	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actDeleteCharEof$/;"	c
actDeselect	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actDeselect$/;"	c
actDeselectAll	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actDeselectAll$/;"	c
actDisableSearch	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actDisableSearch$/;"	c
actDown	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actDown$/;"	c
actEnableSearch	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actEnableSearch$/;"	c
actEndOfLine	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actEndOfLine$/;"	c
actExecute	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actExecute$/;"	c
actExecuteMulti	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actExecuteMulti \/\/ Deprecated$/;"	c
actExecuteSilent	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actExecuteSilent$/;"	c
actFatal	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actFatal$/;"	c
actFirst	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actFirst$/;"	c
actForwardChar	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actForwardChar$/;"	c
actForwardWord	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actForwardWord$/;"	c
actHalfPageDown	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actHalfPageDown$/;"	c
actHalfPageUp	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actHalfPageUp$/;"	c
actHideHeader	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actHideHeader$/;"	c
actHidePreview	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actHidePreview$/;"	c
actIgnore	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actIgnore actionType = iota$/;"	c
actInvalid	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actInvalid$/;"	c
actJump	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actJump$/;"	c
actJumpAccept	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actJumpAccept \/\/ XXX Deprecated in favor of jump:accept binding$/;"	c
actKillLine	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actKillLine$/;"	c
actKillWord	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actKillWord$/;"	c
actLast	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actLast$/;"	c
actMouse	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actMouse$/;"	c
actNextHistory	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actNextHistory$/;"	c
actNextSelected	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actNextSelected$/;"	c
actOffsetDown	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actOffsetDown$/;"	c
actOffsetMiddle	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actOffsetMiddle$/;"	c
actOffsetUp	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actOffsetUp$/;"	c
actPageDown	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPageDown$/;"	c
actPageUp	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPageUp$/;"	c
actPosition	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPosition$/;"	c
actPrevHistory	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPrevHistory$/;"	c
actPrevSelected	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPrevSelected$/;"	c
actPreview	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPreview$/;"	c
actPreviewBottom	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPreviewBottom$/;"	c
actPreviewDown	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPreviewDown$/;"	c
actPreviewHalfPageDown	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPreviewHalfPageDown$/;"	c
actPreviewHalfPageUp	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPreviewHalfPageUp$/;"	c
actPreviewPageDown	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPreviewPageDown$/;"	c
actPreviewPageUp	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPreviewPageUp$/;"	c
actPreviewTop	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPreviewTop$/;"	c
actPreviewUp	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPreviewUp$/;"	c
actPrint	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPrint$/;"	c
actPrintQuery	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPrintQuery \/\/ XXX Deprecated (not very useful, just use --print-query)$/;"	c
actPut	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actPut$/;"	c
actRebind	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actRebind$/;"	c
actRefreshPreview	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actRefreshPreview$/;"	c
actReload	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actReload$/;"	c
actReloadSync	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actReloadSync$/;"	c
actReplaceQuery	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actReplaceQuery$/;"	c
actSelect	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actSelect$/;"	c
actSelectAll	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actSelectAll$/;"	c
actShowHeader	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actShowHeader$/;"	c
actShowPreview	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actShowPreview$/;"	c
actSigStop	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actSigStop$/;"	c
actStart	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actStart$/;"	c
actToggle	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actToggle$/;"	c
actToggleAll	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actToggleAll$/;"	c
actToggleDown	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actToggleDown$/;"	c
actToggleHeader	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actToggleHeader$/;"	c
actToggleIn	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actToggleIn$/;"	c
actToggleOut	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actToggleOut$/;"	c
actTogglePreview	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actTogglePreview$/;"	c
actTogglePreviewWrap	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actTogglePreviewWrap$/;"	c
actToggleSearch	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actToggleSearch$/;"	c
actToggleSort	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actToggleSort$/;"	c
actToggleTrack	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actToggleTrack$/;"	c
actToggleTrackCurrent	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actToggleTrackCurrent$/;"	c
actToggleUp	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actToggleUp$/;"	c
actToggleWrap	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actToggleWrap$/;"	c
actTrackCurrent	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actTrackCurrent$/;"	c
actTransform	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actTransform$/;"	c
actTransformBorderLabel	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actTransformBorderLabel$/;"	c
actTransformHeader	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actTransformHeader$/;"	c
actTransformPreviewLabel	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actTransformPreviewLabel$/;"	c
actTransformPrompt	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actTransformPrompt$/;"	c
actTransformQuery	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actTransformQuery$/;"	c
actUnbind	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actUnbind$/;"	c
actUnixLineDiscard	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actUnixLineDiscard$/;"	c
actUnixWordRubout	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actUnixWordRubout$/;"	c
actUntrackCurrent	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actUntrackCurrent$/;"	c
actUp	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actUp$/;"	c
actYank	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	actYank$/;"	c
action	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type action struct {$/;"	t
actionNameRegexp	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	actionNameRegexp *regexp.Regexp$/;"	v
actionType	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type actionType int$/;"	t
action_for	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:action_for(key, ...)$/;"	f
activateAll	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll() abort$/;"	f
activateBookmark	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm) abort$/;"	f
activateDirNode	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(directoryNode, ...) abort$/;"	f
activateFileNode	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node) abort$/;"	f
addChild	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:addChild(tag) abort dict$/;"	f
addTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:addTag(tag) abort dict$/;"	f
add_db	vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
add_db	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
add_snr	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_tag_recursive	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:add_tag_recursive(parent, taginfo, pathlist) abort$/;"	f
addtomrufs	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:addtomrufs(fname)$/;"	f
addtomrufs	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:addtomrufs(fname)$/;"	f
adjustMarginAndPadding	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) adjustMarginAndPadding() (int, int, [4]int, [4]int) {$/;"	f
ag_handler	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(name, lines)$/;"	f
ag_to_qf	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line)$/;"	f
algo	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^package algo$/;"	p
algo	vim/.vim/pack/plugins/start/fzf/src/algo/algo_test.go	/^package algo$/;"	p
algo	vim/.vim/pack/plugins/start/fzf/src/algo/normalize.go	/^package algo$/;"	p
align_lists	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
align_pairs	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
alloc16	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func alloc16(offset int, slab *util.Slab, size int) (int, []int16) {$/;"	f
alloc32	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func alloc32(offset int, slab *util.Slab, size int) (int, []int32) {$/;"	f
ansi	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
ansiBenchmarkString	vim/.vim/pack/plugins/start/fzf/src/ansi_test.go	/^const ansiBenchmarkString = "\\x1b[38;5;81m\\x1b[01;31m\\x1b[Kkernel\/\\x1b[0m\\x1b[38:5:81mbpf\/" +$/;"	c
ansiLabelPrinter	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) ansiLabelPrinter(str string, color *tui.ColorPair, fill bool) (labelPrinter, int) {$/;"	f
ansiOffset	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^type ansiOffset struct {$/;"	t
ansiRegexReference	vim/.vim/pack/plugins/start/fzf/src/ansi_test.go	/^var ansiRegexReference = regexp.MustCompile("(?:\\x1b[\\\\[()][0-9;:]*[a-zA-Z@]|\\x1b][0-9][;:][[:print:]]+(?:\\x1b\\\\\\\\|\\x07)|\\x1b.|[\\x0e\\x0f]|.\\x08)")$/;"	v
ansiState	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^type ansiState struct {$/;"	t
any_include?	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^          def any_include?(val)$/;"	f	class:Tmux.until
append	vim/.vim/pack/plugins/start/fzf/src/history.go	/^func (h *History) append(line string) error {$/;"	f
append_line	vim/.vim/pack/plugins/start/fzf/install	/^append_line() {$/;"	f
argmaps	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:argmaps(md, i)$/;"	f
argmaps	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:argmaps(md, i)$/;"	f
asTcellColor	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func asTcellColor(color Color) tcell.Color {$/;"	f
asciiCharClasses	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	asciiCharClasses [unicode.MaxASCII + 1]charClass$/;"	v
asciiFuzzyIndex	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func asciiFuzzyIndex(input *util.Chars, pattern []rune, caseSensitive bool) (int, int) {$/;"	f
ask	vim/.vim/pack/plugins/start/fzf/install	/^ask() {$/;"	f
ask	vim/.vim/pack/plugins/start/fzf/uninstall	/^ask() {$/;"	f
assert	vim/.vim/pack/plugins/start/fzf/src/merger_test.go	/^func assert(t *testing.T, cond bool, msg ...string) {$/;"	f
assert	vim/.vim/pack/plugins/start/fzf/src/tui/tcell_test.go	/^func assert(t *testing.T, context string, got interface{}, want interface{}) bool {$/;"	f
assertMatch	vim/.vim/pack/plugins/start/fzf/src/algo/algo_test.go	/^func assertMatch(t *testing.T, fun Algo, caseSensitive, forward bool, input, pattern string, sidx int, eidx int, score int) {$/;"	f
assertMatch2	vim/.vim/pack/plugins/start/fzf/src/algo/algo_test.go	/^func assertMatch2(t *testing.T, fun Algo, caseSensitive, normalize, forward bool, input, pattern string, sidx int, eidx int, score int) {$/;"	f
assert_block	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def assert_block(expected, lines)$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
assert_equal	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def assert_equal(expected, actual)$/;"	f	class:TestBase
at	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:at(str)$/;"	f
at	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:at(str)$/;"	f
atExitFuncs	vim/.vim/pack/plugins/start/fzf/src/util/atexit.go	/^var atExitFuncs []func()$/;"	v
atof	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func atof(str string) (float64, error) {$/;"	f
atoi	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func atoi(str string) (int, error) {$/;"	f
atoi	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func atoi(s string, defaultValue int) int {$/;"	f
attrCodes	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func attrCodes(attr Attr) []string {$/;"	f
autoclose	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! s:autoclose() abort$/;"	f
autocmds	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:autocmds()$/;"	f
autocmds	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:autocmds()$/;"	f
avgNumLines	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) avgNumLines() int {$/;"	f
awkBlack	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^	awkBlack$/;"	c
awkNil	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^	awkNil = iota$/;"	c
awkTokenizer	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^func awkTokenizer(input string) ([]string, int) {$/;"	f
awkWhite	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^	awkWhite$/;"	c
b:current_syntax	vim/.vim/pack/plugins/start/tagbar/syntax/tagbar.vim	/^let b:current_syntax = 'tagbar'$/;"	v
bash	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:bash()$/;"	f
bash	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^    def bash$/;"	f	class:Shell
bashCompletion	vim/.vim/pack/plugins/start/fzf/main.go	/^var bashCompletion []byte$/;"	v
bashKeyBindings	vim/.vim/pack/plugins/start/fzf/main.go	/^var bashKeyBindings []byte$/;"	v
basicMatch	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func (p *Pattern) basicMatch(item *Item, withPos bool, slab *util.Slab) (Offset, int, *[]int) {$/;"	f
becomeSuffix	vim/.vim/pack/plugins/start/fzf/src/proxy.go	/^const becomeSuffix = ".become"$/;"	c
blockDuration	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^const blockDuration = 1 * time.Second$/;"	c
bonusAt	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func bonusAt(input *util.Chars, idx int) int16 {$/;"	f
bonusBoundary	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	bonusBoundary = scoreMatch \/ 2$/;"	c
bonusBoundaryDelimiter	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	bonusBoundaryDelimiter int16 = bonusBoundary + 1$/;"	v
bonusBoundaryWhite	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	bonusBoundaryWhite int16 = bonusBoundary + 2$/;"	v
bonusCamel123	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	bonusCamel123 = bonusBoundary + scoreGapExtension$/;"	c
bonusConsecutive	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	bonusConsecutive = -(scoreGapStart + scoreGapExtension)$/;"	c
bonusFirstCharMultiplier	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	bonusFirstCharMultiplier = 2$/;"	c
bonusFor	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func bonusFor(prevClass charClass, class charClass) int16 {$/;"	f
bonusMatrix	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	bonusMatrix [charNumber + 1][charNumber + 1]int16$/;"	v
bonusNonWord	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	bonusNonWord = scoreMatch \/ 2$/;"	c
borderLines	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func borderLines(shape tui.BorderShape) int {$/;"	f
border_opt	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:border_opt(window)$/;"	f
btags_sink	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
btags_source	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
buffer_line_handler	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
buffer_lines	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines(query)$/;"	f
buffunc	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buffunc(e)$/;"	f
buffunc	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buffunc(e)$/;"	f
buflisted	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
bufopen	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
buftab	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buftab(bufnr, md)$/;"	f
buftab	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buftab(bufnr, md)$/;"	f
bufwins	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:bufwins(bufnr)$/;"	f
bufwins	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:bufwins(bufnr)$/;"	f
buildCacheKey	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func (p *Pattern) buildCacheKey() string {$/;"	f
buildGitStatusCommand	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:buildGitStatusCommand(workdir) abort$/;"	f
buildGitWorkdirCommand	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:buildGitWorkdirCommand(root) abort$/;"	f
buildLists	vim/.vim/pack/plugins/start/fzf/src/merger_test.go	/^func buildLists(partiallySorted bool) ([][]Result, []Result) {$/;"	f
buildPattern	vim/.vim/pack/plugins/start/fzf/src/pattern_test.go	/^func buildPattern(fuzzy bool, fuzzyAlgo algo.Algo, extended bool, caseMode Case, normalize bool, forward bool,$/;"	f
buildPlusList	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) buildPlusList(template string, forcePlus bool) (bool, []*Item) {$/;"	f
buildResult	vim/.vim/pack/plugins/start/fzf/src/result.go	/^func buildResult(item *Item, offsets []Offset, score int) Result {$/;"	f
buildpat	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buildpat(lst)$/;"	f
buildpat	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buildpat(lst)$/;"	f
bumpMajor	vim/.vim/pack/plugins/start/fzf/src/core.go	/^func (r *revision) bumpMajor() {$/;"	f
bumpMinor	vim/.vim/pack/plugins/start/fzf/src/core.go	/^func (r *revision) bumpMinor() {$/;"	f
byBegin	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	byBegin$/;"	c
byChunk	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	byChunk$/;"	c
byEnd	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	byEnd$/;"	c
byLength	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	byLength$/;"	c
byScore	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	byScore criterion = iota$/;"	c
byTimeOrder	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type byTimeOrder []selectedItem$/;"	t
byfname	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:byfname()$/;"	f
byfname	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:byfname()$/;"	f
byteString	vim/.vim/pack/plugins/start/fzf/src/functions.go	/^func byteString(data []byte) string {$/;"	f
cache_project_root	vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
cache_project_root	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
cacheable	vim/.vim/pack/plugins/start/fzf/src/merger.go	/^func (mg *Merger) cacheable() bool {$/;"	f
cachefile	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:cachefile()$/;"	f
cachefile	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:cachefile()$/;"	f
calc_size	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:calc_size(max, val, dict)$/;"	f
calculateScore	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func calculateScore(caseSensitive bool, normalize bool, text *util.Chars, pattern []rune, sidx int, eidx int, withPos bool) (int, *[]int) {$/;"	f
calculateSize	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func calculateSize(base int, size sizeSpec, occupied int, minSize int, pad int) int {$/;"	f
callback	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:callback(dict, lines) abort$/;"	f
canPreview	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) canPreview() bool {$/;"	f
cancelPreview	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) cancelPreview() {$/;"	f
capture	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def capture$/;"	f	class:Tmux
chCwd	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node) abort$/;"	f
chRoot	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node) abort$/;"	f
changeHeader	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) changeHeader(header string) bool {$/;"	f
changelist	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:changelist(bufnr)$/;"	f
changelist	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:changelist(bufnr)$/;"	f
changes_sink	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:changes_sink(lines)$/;"	f
channelTimeout	vim/.vim/pack/plugins/start/fzf/src/server.go	/^	channelTimeout   = 2 * time.Second$/;"	c
charClass	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^type charClass int$/;"	t
charClassOf	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func charClassOf(char rune) charClass {$/;"	f
charClassOfNonAscii	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func charClassOfNonAscii(char rune) charClass {$/;"	f
charDelimiter	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	charDelimiter$/;"	c
charLetter	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	charLetter$/;"	c
charLower	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	charLower$/;"	c
charNonWord	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	charNonWord$/;"	c
charNumber	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	charNumber$/;"	c
charUpper	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	charUpper$/;"	c
charWhite	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	charWhite charClass = iota$/;"	c
checkAscii	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func checkAscii(bytes []byte) (bool, int) {$/;"	f
check_binary	vim/.vim/pack/plugins/start/fzf/install	/^check_binary() {$/;"	f
check_requirements	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:check_requirements()$/;"	f
checkbuf	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:checkbuf()$/;"	f
checkbuf	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:checkbuf()$/;"	f
chknearby	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:chknearby(pat)$/;"	f
chknearby	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:chknearby(pat)$/;"	f
choices	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:choices(str, choices, func, args)$/;"	f
choices	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:choices(str, choices, func, args)$/;"	f
chomp	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
chop	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:chop(mrufs)$/;"	f
chop	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:chop(mrufs)$/;"	f
chunkSize	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	chunkSize int = 100$/;"	c
cleanse	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func cleanse(str string) string {$/;"	f
cleanup	vim/.vim/pack/plugins/start/fzf/bin/fzf-tmux	/^cleanup() {$/;"	f
clearCode	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^const clearCode string = "\\x1b[2J"$/;"	c
clearOldFolds	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:clearOldFolds() abort dict$/;"	f
closeChildren	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node) abort$/;"	f
closeCurrentDir	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node) abort$/;"	f
closeFold	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:closeFold() abort dict$/;"	f
closeFold	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:closeFold() abort dict$/;"	f
closeKindFold	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:closeKindFold(kind) abort dict$/;"	f
closePlatform	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) closePlatform() {$/;"	f
closePlatform	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) closePlatform() {$/;"	f
closeTreeWindow	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow() abort$/;"	f
cmd	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^      let cmd = 'start \/wait cmd \/c '.command$/;"	v
cmd	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:cmd(bang, ...) abort$/;"	f
cmd_history_sink	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
colBlack	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	colBlack Color = iota$/;"	c
colBlue	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	colBlue$/;"	c
colCyan	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	colCyan$/;"	c
colDefault	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	colDefault   Color = -1$/;"	c
colGreen	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	colGreen$/;"	c
colMagenta	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	colMagenta$/;"	c
colRed	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	colRed$/;"	c
colUndefined	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	colUndefined Color = -2$/;"	c
colWhite	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	colWhite$/;"	c
colYellow	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	colYellow$/;"	c
collect	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:collect(temps) abort$/;"	f
colorCodes	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func colorCodes(fg Color, bg Color) []string {$/;"	f
colorOffset	vim/.vim/pack/plugins/start/fzf/src/result.go	/^type colorOffset struct {$/;"	t
colorOffsets	vim/.vim/pack/plugins/start/fzf/src/result.go	/^func (result *Result) colorOffsets(matchOffsets []Offset, theme *tui.ColorTheme, colBase tui.ColorPair, colMatch tui.ColorPair, current bool) []colorOffset {$/;"	f
colored	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^func (s *ansiState) colored() bool {$/;"	f
command	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^  let command = a:grep_command . suffix$/;"	v
command	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^      let command = a:command$/;"	v
command	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^      let command = fzf.temps.batchfile$/;"	v
command	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^    let command .= s:term_marker$/;"	v
command	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^    let command = 'start \/\/WAIT sh -c '.shellscript$/;"	v
commandSpec	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type commandSpec struct {$/;"	t
command_sink	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
commits	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(range, buffer_local, args)$/;"	f
commits_sink	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
common_sink	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:common_sink(action, lines) abort$/;"	f
compareRanks	vim/.vim/pack/plugins/start/fzf/src/result_others.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f
compareRanks	vim/.vim/pack/plugins/start/fzf/src/result_x86.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f
compare_binary_versions	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:compare_binary_versions(a, b)$/;"	f
compare_by_kind	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_kind(tag1, tag2) abort$/;"	f
compare_by_line	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_line(tag1, tag2) abort$/;"	f
compare_versions	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:compare_versions(a, b)$/;"	f
comparent	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:comparent(...)$/;"	f
comparent	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:comparent(...)$/;"	f
compatible	vim/.vim/pack/plugins/start/fzf/src/core.go	/^func (r revision) compatible(other revision) bool {$/;"	f
compfnlen	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compfnlen(...)$/;"	f
compfnlen	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compfnlen(...)$/;"	f
complete_insert	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
complete_trigger	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
compmatlen	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmatlen(...)$/;"	f
compmatlen	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmatlen(...)$/;"	f
compmreb	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmreb(...)$/;"	f
compmreb	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmreb(...)$/;"	f
compmref	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmref(...)$/;"	f
compmref	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmref(...)$/;"	f
comptime	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:comptime(...)$/;"	f
comptime	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:comptime(...)$/;"	f
compval	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compval(...)$/;"	f
compval	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:compval(...)$/;"	f
compval	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compval(...)$/;"	f
compval	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:compval(...)$/;"	f
conf	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:conf(name, default)$/;"	f
conf	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^function! s:conf(name, default)$/;"	f
consoleDevice	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^const consoleDevice string = "\/dev\/tty"$/;"	c
consoleFlagsInput	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^	consoleFlagsInput  = uint32(windows.ENABLE_VIRTUAL_TERMINAL_INPUT | windows.ENABLE_PROCESSED_INPUT | windows.ENABLE_EXTENDED_FLAGS)$/;"	v
consoleFlagsOutput	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^	consoleFlagsOutput = uint32(windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING | windows.ENABLE_PROCESSED_OUTPUT | windows.DISABLE_NEWLINE_AUTO_RETURN)$/;"	v
constrain	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) constrain() {$/;"	f
convertBoolToInt32	vim/.vim/pack/plugins/start/fzf/src/util/atomicbool.go	/^func convertBoolToInt32(b bool) int32 {$/;"	f
coordinatorDelayMax	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	coordinatorDelayMax  time.Duration = 100 * time.Millisecond$/;"	c
coordinatorDelayStep	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	coordinatorDelayStep time.Duration = 10 * time.Millisecond$/;"	c
copySlice	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func copySlice(slice []rune) []rune {$/;"	f
counts	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^          def counts$/;"	f	class:Tmux.until
cprint2	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) cprint2(fg Color, bg Color, attr Attr, text string) {$/;"	f
createKinddict	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:createKinddict() abort dict$/;"	f
create_file	vim/.vim/pack/plugins/start/fzf/install	/^create_file() {$/;"	f
create_popup	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^  function s:create_popup(opts) abort$/;"	f
create_popup	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^  function! s:create_popup(opts) abort$/;"	f
create_pseudotag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:create_pseudotag(name, parent, kind, typeinfo, fileinfo) abort$/;"	f
criterion	vim/.vim/pack/plugins/start/fzf/src/options.go	/^type criterion int$/;"	t
crlf	vim/.vim/pack/plugins/start/fzf/src/server.go	/^	crlf             = "\\r\\n"$/;"	c
csi	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:csi(color, fg)$/;"	f
csi	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) csi(code string) string {$/;"	f
csi	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) csi(code string) string {$/;"	f
csiColor	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) csiColor(fg Color, bg Color, attr Attr) (bool, string) {$/;"	f
ctrlp#acceptfile	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#acceptfile(...)$/;"	f
ctrlp#acceptfile	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#acceptfile(...)$/;"	f
ctrlp#bookmarkdir#accept	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#accept(mode, str)$/;"	f
ctrlp#bookmarkdir#accept	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#accept(mode, str)$/;"	f
ctrlp#bookmarkdir#add	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#add(dir, ...)$/;"	f
ctrlp#bookmarkdir#add	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#add(dir, ...)$/;"	f
ctrlp#bookmarkdir#id	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#id()$/;"	f
ctrlp#bookmarkdir#id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#id()$/;"	f
ctrlp#bookmarkdir#init	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#init()$/;"	f
ctrlp#bookmarkdir#init	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#init()$/;"	f
ctrlp#bookmarkdir#remove	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#remove(entries)$/;"	f
ctrlp#bookmarkdir#remove	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#remove(entries)$/;"	f
ctrlp#buffers	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#buffers(...)$/;"	f
ctrlp#buffers	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#buffers(...)$/;"	f
ctrlp#buffertag#accept	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#accept(mode, str)$/;"	f
ctrlp#buffertag#accept	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#accept(mode, str)$/;"	f
ctrlp#buffertag#cmd	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#cmd(mode, ...)$/;"	f
ctrlp#buffertag#cmd	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#cmd(mode, ...)$/;"	f
ctrlp#buffertag#exit	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#exit()$/;"	f
ctrlp#buffertag#exit	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#exit()$/;"	f
ctrlp#buffertag#init	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#init(fname)$/;"	f
ctrlp#buffertag#init	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#init(fname)$/;"	f
ctrlp#buffertag#opts	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#opts()$/;"	f
ctrlp#buffertag#opts	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#opts()$/;"	f
ctrlp#call	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#call(func, ...)$/;"	f
ctrlp#call	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#call(func, ...)$/;"	f
ctrlp#changes#accept	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#accept(mode, str)$/;"	f
ctrlp#changes#accept	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#accept(mode, str)$/;"	f
ctrlp#changes#cmd	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#cmd(mode, ...)$/;"	f
ctrlp#changes#cmd	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#cmd(mode, ...)$/;"	f
ctrlp#changes#exit	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#exit()$/;"	f
ctrlp#changes#exit	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#exit()$/;"	f
ctrlp#changes#init	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#init(original_bufnr, bufnr)$/;"	f
ctrlp#changes#init	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#init(original_bufnr, bufnr)$/;"	f
ctrlp#clr	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#clr(...)$/;"	f
ctrlp#clr	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#clr(...)$/;"	f
ctrlp#clra	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#clra()$/;"	f
ctrlp#clra	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#clra()$/;"	f
ctrlp#complen	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#complen(...)$/;"	f
ctrlp#complen	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#complen(...)$/;"	f
ctrlp#dir#accept	ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#accept(mode, str)$/;"	f
ctrlp#dir#accept	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#accept(mode, str)$/;"	f
ctrlp#dir#id	ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#id()$/;"	f
ctrlp#dir#id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#id()$/;"	f
ctrlp#dir#init	ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#init(...)$/;"	f
ctrlp#dir#init	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#init(...)$/;"	f
ctrlp#dirnfile	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#dirnfile(entries)$/;"	f
ctrlp#dirnfile	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#dirnfile(entries)$/;"	f
ctrlp#exit	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#exit()$/;"	f
ctrlp#exit	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#exit()$/;"	f
ctrlp#files	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#files()$/;"	f
ctrlp#files	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#files()$/;"	f
ctrlp#getcline	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getcline()$/;"	f
ctrlp#getcline	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getcline()$/;"	f
ctrlp#getmarkedlist	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getmarkedlist()$/;"	f
ctrlp#getmarkedlist	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getmarkedlist()$/;"	f
ctrlp#getvar	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getvar(var)$/;"	f
ctrlp#getvar	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getvar(var)$/;"	f
ctrlp#hicheck	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#hicheck(grp, defgrp)$/;"	f
ctrlp#hicheck	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#hicheck(grp, defgrp)$/;"	f
ctrlp#igncwd	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#igncwd(cwd)$/;"	f
ctrlp#igncwd	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#igncwd(cwd)$/;"	f
ctrlp#init	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#init(type, ...)$/;"	f
ctrlp#init	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#init(type, ...)$/;"	f
ctrlp#j2l	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#j2l(nr)$/;"	f
ctrlp#j2l	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#j2l(nr)$/;"	f
ctrlp#line#accept	ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#accept(mode, str)$/;"	f
ctrlp#line#accept	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#accept(mode, str)$/;"	f
ctrlp#line#cmd	ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#cmd(mode, ...)$/;"	f
ctrlp#line#cmd	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#cmd(mode, ...)$/;"	f
ctrlp#line#init	ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#init(bufnr)$/;"	f
ctrlp#line#init	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#init(bufnr)$/;"	f
ctrlp#mixed#id	ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! ctrlp#mixed#id()$/;"	f
ctrlp#mixed#id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! ctrlp#mixed#id()$/;"	f
ctrlp#mixed#init	ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! ctrlp#mixed#init(clim)$/;"	f
ctrlp#mixed#init	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! ctrlp#mixed#init(clim)$/;"	f
ctrlp#modfilecond	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#modfilecond(w)$/;"	f
ctrlp#modfilecond	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#modfilecond(w)$/;"	f
ctrlp#mrufiles#add	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#add(fn)$/;"	f
ctrlp#mrufiles#add	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#add(fn)$/;"	f
ctrlp#mrufiles#bufs	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#bufs()$/;"	f
ctrlp#mrufiles#bufs	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#bufs()$/;"	f
ctrlp#mrufiles#cachefile	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#cachefile()$/;"	f
ctrlp#mrufiles#cachefile	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#cachefile()$/;"	f
ctrlp#mrufiles#init	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#init()$/;"	f
ctrlp#mrufiles#init	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#init()$/;"	f
ctrlp#mrufiles#list	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#list(...)$/;"	f
ctrlp#mrufiles#list	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#list(...)$/;"	f
ctrlp#mrufiles#opts	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#opts()$/;"	f
ctrlp#mrufiles#opts	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#opts()$/;"	f
ctrlp#mrufiles#refresh	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#refresh(...)$/;"	f
ctrlp#mrufiles#refresh	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#refresh(...)$/;"	f
ctrlp#mrufiles#remove	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#remove(files)$/;"	f
ctrlp#mrufiles#remove	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#remove(files)$/;"	f
ctrlp#mrufiles#tgrel	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#tgrel()$/;"	f
ctrlp#mrufiles#tgrel	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#tgrel()$/;"	f
ctrlp#normcmd	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#normcmd(cmd, ...)$/;"	f
ctrlp#normcmd	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#normcmd(cmd, ...)$/;"	f
ctrlp#nosy	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#nosy()$/;"	f
ctrlp#nosy	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#nosy()$/;"	f
ctrlp#progress	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#progress(enum, ...)$/;"	f
ctrlp#progress	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#progress(enum, ...)$/;"	f
ctrlp#prtclear	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#prtclear()$/;"	f
ctrlp#prtclear	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#prtclear()$/;"	f
ctrlp#quickfix#accept	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#accept(mode, str)$/;"	f
ctrlp#quickfix#accept	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#accept(mode, str)$/;"	f
ctrlp#quickfix#id	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#id()$/;"	f
ctrlp#quickfix#id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#id()$/;"	f
ctrlp#quickfix#init	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#init()$/;"	f
ctrlp#quickfix#init	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#init()$/;"	f
ctrlp#recordhist	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#recordhist()$/;"	f
ctrlp#recordhist	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#recordhist()$/;"	f
ctrlp#rmbasedir	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#rmbasedir(items)$/;"	f
ctrlp#rmbasedir	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#rmbasedir(items)$/;"	f
ctrlp#rtscript#id	ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! ctrlp#rtscript#id()$/;"	f
ctrlp#rtscript#id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! ctrlp#rtscript#id()$/;"	f
ctrlp#rtscript#init	ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! ctrlp#rtscript#init(caching)$/;"	f
ctrlp#rtscript#init	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! ctrlp#rtscript#init(caching)$/;"	f
ctrlp#setdir	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setdir(path, ...)$/;"	f
ctrlp#setdir	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setdir(path, ...)$/;"	f
ctrlp#setlcdir	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setlcdir()$/;"	f
ctrlp#setlcdir	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setlcdir()$/;"	f
ctrlp#setlines	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setlines(...)$/;"	f
ctrlp#setlines	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setlines(...)$/;"	f
ctrlp#statusline	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#statusline()$/;"	f
ctrlp#statusline	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#statusline()$/;"	f
ctrlp#switchtype	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#switchtype(id)$/;"	f
ctrlp#switchtype	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#switchtype(id)$/;"	f
ctrlp#syntax	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#syntax()$/;"	f
ctrlp#syntax	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#syntax()$/;"	f
ctrlp#tabcount	ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#tabcount()$/;"	f
ctrlp#tabcount	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#tabcount()$/;"	f
ctrlp#tag#accept	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#accept(mode, str)$/;"	f
ctrlp#tag#accept	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#accept(mode, str)$/;"	f
ctrlp#tag#enter	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#enter()$/;"	f
ctrlp#tag#enter	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#enter()$/;"	f
ctrlp#tag#id	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#id()$/;"	f
ctrlp#tag#id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#id()$/;"	f
ctrlp#tag#init	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#init()$/;"	f
ctrlp#tag#init	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#init()$/;"	f
ctrlp#undo#accept	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#accept(mode, str)$/;"	f
ctrlp#undo#accept	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#accept(mode, str)$/;"	f
ctrlp#undo#enter	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#enter()$/;"	f
ctrlp#undo#enter	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#enter()$/;"	f
ctrlp#undo#exit	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#exit()$/;"	f
ctrlp#undo#exit	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#exit()$/;"	f
ctrlp#undo#id	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#id()$/;"	f
ctrlp#undo#id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#id()$/;"	f
ctrlp#undo#init	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#init()$/;"	f
ctrlp#undo#init	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#init()$/;"	f
ctrlp#utils#cachedir	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#cachedir()$/;"	f
ctrlp#utils#cachedir	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#cachedir()$/;"	f
ctrlp#utils#cachefile	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#cachefile(...)$/;"	f
ctrlp#utils#cachefile	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#cachefile(...)$/;"	f
ctrlp#utils#fnesc	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#fnesc(path, type, ...)$/;"	f
ctrlp#utils#fnesc	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#fnesc(path, type, ...)$/;"	f
ctrlp#utils#glob	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#glob(...)$/;"	f
ctrlp#utils#glob	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#glob(...)$/;"	f
ctrlp#utils#globpath	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#globpath(...)$/;"	f
ctrlp#utils#globpath	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#globpath(...)$/;"	f
ctrlp#utils#lash	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#lash()$/;"	f
ctrlp#utils#lash	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#lash()$/;"	f
ctrlp#utils#mkdir	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#mkdir(dir)$/;"	f
ctrlp#utils#mkdir	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#mkdir(dir)$/;"	f
ctrlp#utils#opts	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#opts()$/;"	f
ctrlp#utils#opts	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#opts()$/;"	f
ctrlp#utils#readfile	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#readfile(file)$/;"	f
ctrlp#utils#readfile	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#readfile(file)$/;"	f
ctrlp#utils#writecache	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#writecache(lines, ...)$/;"	f
ctrlp#utils#writecache	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#writecache(lines, ...)$/;"	f
current	vim/.vim/pack/plugins/start/fzf/src/history.go	/^func (h *History) current() string {$/;"	f
currentIndex	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) currentIndex() int32 {$/;"	f
currentItem	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) currentItem() *Item {$/;"	f
customOpenBookmark	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenBookmark(node) abort$/;"	f
customOpenDir	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenDir(node) abort$/;"	f
customOpenFile	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenFile(node) abort$/;"	f
debugV2	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func debugV2(T []rune, pattern []rune, F []int32, lastIdx int, H []int16, C []int16) {$/;"	f
defaultEscDelay	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^	defaultEscDelay = 100$/;"	c
defaultHeight	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^	defaultHeight = 24$/;"	c
defaultHistoryMax	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	defaultHistoryMax int = 1000$/;"	c
defaultInfoPrefix	vim/.vim/pack/plugins/start/fzf/src/options.go	/^const defaultInfoPrefix = " < "$/;"	c
defaultJumpLabels	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	defaultJumpLabels string = "asdfghjklqwertyuiopzxcvbnm1234567890ASDFGHJKLQWERTYUIOPZXCVBNM`~;:,<.>\/?'\\"!@#$%^&*()[{]}-_=+"$/;"	c
defaultKeymap	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func defaultKeymap() map[tui.Event][]*action {$/;"	f
defaultListenAddr	vim/.vim/pack/plugins/start/fzf/src/server.go	/^var defaultListenAddr = listenAddress{"localhost", 0}$/;"	v
defaultMargin	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func defaultMargin() [4]sizeSpec {$/;"	f
defaultOptions	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func defaultOptions() *Options {$/;"	f
defaultPreviewOpts	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func defaultPreviewOpts(command string) previewOpts {$/;"	f
defaultTheme	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f
defaultTheme	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f
defaultTheme	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) defaultTheme() *ColorTheme {$/;"	f
defaultTmuxOptions	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func defaultTmuxOptions(index int) *tmuxOptions {$/;"	f
defaultWidth	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^	defaultWidth  = 80$/;"	c
default_layout	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:default_layout()$/;"	f
defaults	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:defaults()$/;"	f
deferActivation	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) deferActivation() bool {$/;"	f
defs	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
delChar	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) delChar() bool {$/;"	f
delent	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:delent(rfunc)$/;"	f
delent	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:delent(rfunc)$/;"	f
deleteBookmark	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bookmark) abort$/;"	f
delimiterChars	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^var delimiterChars = "\/,:;|"$/;"	v
delimiterRegexp	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func delimiterRegexp(str string) Delimiter {$/;"	f
deprecated	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:deprecated(oldv, newv) abort$/;"	f
deselectItem	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) deselectItem(item *Item) {$/;"	f
deselectItemChanged	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) deselectItemChanged(item *Item) bool {$/;"	f
devPrefixes	vim/.vim/pack/plugins/start/fzf/src/tui/ttyname_unix.go	/^var devPrefixes = [...]string{"\/dev\/pts\/", "\/dev\/"}$/;"	v
dict2list	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:dict2list(dict)$/;"	f
dict2list	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:dict2list(dict)$/;"	f
dictindex	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dictindex(dict, expr)$/;"	f
dictindex	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dictindex(dict, expr)$/;"	f
dircompl	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dircompl(be, sd)$/;"	f
dircompl	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dircompl(be, sd)$/;"	f
disableLiveUpdate	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:disableLiveUpdate() abort$/;"	f
disableMouse	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) disableMouse() {$/;"	f
disabledState	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	disabledState resumableState = iota$/;"	c
dismrk	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dismrk()$/;"	f
dismrk	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dismrk()$/;"	f
displayHelp	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp() abort$/;"	f
displayWidth	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) displayWidth(runes []rune) int {$/;"	f
displayWidthWithLimit	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) displayWidthWithLimit(runes []rune, prefixWidth int, limit int) int {$/;"	f
do_delayed_update	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:do_delayed_update() abort$/;"	f
dohighlight	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dohighlight()$/;"	f
dohighlight	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dohighlight()$/;"	f
dopopd	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:dopopd()$/;"	f
dosigns	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dosigns()$/;"	f
dosigns	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dosigns()$/;"	f
doubleClickDuration	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^	doubleClickDuration = 500 * time.Millisecond$/;"	c
download	vim/.vim/pack/plugins/start/fzf/install	/^download() {$/;"	f
drawBorder	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorder(onlyHorizontal bool) {$/;"	f
drawBorder	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) drawBorder(onlyHorizontal bool) {$/;"	f
drawBorderAround	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderAround(onlyHorizontal bool) {$/;"	f
drawBorderHorizontal	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderHorizontal(top, bottom bool) {$/;"	f
drawBorderVertical	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderVertical(left, right bool) {$/;"	f
dumpItem	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) dumpItem(i *Item) StatusItem {$/;"	f
dumpStatus	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) dumpStatus(params getParams) string {$/;"	f
dupeTheme	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func dupeTheme(theme *tui.ColorTheme) *tui.ColorTheme {$/;"	f
eachLine	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type eachLine struct {$/;"	t
elapsed	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:elapsed(nr)$/;"	f
elapsed	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:elapsed(nr)$/;"	f
enableLiveUpdate	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:enableLiveUpdate() abort$/;"	f
enableMouse	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) enableMouse() {$/;"	f
enabledState	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	enabledState$/;"	c
enc_to_cp	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^  function! s:enc_to_cp(str)$/;"	f
encodePlaceholder	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func (flags placeholderFlags) encodePlaceholder() string {$/;"	f
environ	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) environ() []string {$/;"	f
equals	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^func (s *ansiState) equals(t *ansiState) bool {$/;"	f
error	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:error(msg)$/;"	f
escPollInterval	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^	escPollInterval = 5$/;"	c
escSequence	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) escSequence(sz *int) Event {$/;"	f
escape	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
escape	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:escape(path)$/;"	f
escapeArg	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^func escapeArg(s string) string {$/;"	f
escapeRegex	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^var escapeRegex = regexp.MustCompile(`[&|<>()^%!"]`)$/;"	v
escapeSingleQuote	vim/.vim/pack/plugins/start/fzf/src/proxy.go	/^func escapeSingleQuote(str string) string {$/;"	f
escape_for_bash	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape_for_bash(path)$/;"	f
escapedColon	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	escapedColon = 0$/;"	c
escapedComma	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	escapedComma = 1$/;"	c
escapedPlus	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	escapedPlus  = 2$/;"	c
esctagscmd	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:esctagscmd(bin, args, ...)$/;"	f
esctagscmd	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:esctagscmd(bin, args, ...)$/;"	f
eval	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
evaluateHeight	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func evaluateHeight(opts *Options, termHeight int) int {$/;"	f
evaluateScrollOffset	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) evaluateScrollOffset() int {$/;"	f
evaluate_opts	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:evaluate_opts(options)$/;"	f
excl	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:excl(fn)$/;"	f
excl	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:excl(fn)$/;"	f
excmds	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
execextvar	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:execextvar(key)$/;"	f
execextvar	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:execextvar(key)$/;"	f
exectags	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:exectags(cmd)$/;"	f
exectags	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:exectags(cmd)$/;"	f
exectagsonfile	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:exectagsonfile(fname, ftype)$/;"	f
exectagsonfile	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:exectagsonfile(fname, ftype)$/;"	f
execute	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:execute(dict, command, use_height, temps) abort$/;"	f
executeCommand	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) executeCommand(template string, forcePlus bool, background bool, capture bool, firstLineOnly bool, info string) string {$/;"	f
executeRegexp	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	executeRegexp    *regexp.Regexp$/;"	v
execute_silent	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:execute_silent(cmd)$/;"	f
execute_term	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:execute_term(dict, command, temps) abort$/;"	f
execute_tmux	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:execute_tmux(dict, command, temps) abort$/;"	f
existingRunnerId	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! s:existingRunnerId() abort$/;"	f
exit	vim/.vim/pack/plugins/start/fzf/main.go	/^func exit(code int, err error) {$/;"	f
exit_handler	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:exit_handler(code, command, ...)$/;"	f
exit_status	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^  let exit_status = v:shell_error$/;"	v
extend	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
extend_opts	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
extendedMatch	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func (p *Pattern) extendedMatch(item *Item, withPos bool, slab *util.Slab) ([]Offset, int, *[]int) {$/;"	f
extraLines	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) extraLines() int {$/;"	f
extractColor	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^func extractColor(str string, state *ansiState, proc func(string, *ansiState) bool) (string, *[]ansiOffset, *ansiState) {$/;"	f
extract_option	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:extract_option(opts, name)$/;"	f
fail	vim/.vim/pack/plugins/start/fzf/bin/fzf-tmux	/^fail() {$/;"	f
fd	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) fd() int {$/;"	f
feed	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^func (r *Reader) feed(src io.Reader) {$/;"	f
fifo	vim/.vim/pack/plugins/start/fzf/src/proxy.go	/^func fifo(name string) (string, error) {$/;"	f
file_options	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
file_source	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
file_split_prefix	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
fill	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) fill(str string, resetCode string) FillReturn {$/;"	f
fill	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func fill(x, y, w, h int, n ColorPair, r rune) {$/;"	f
fillString	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) fillString(text string, pair ColorPair) FillReturn {$/;"	f
fill_quickfix	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:fill_quickfix(name, list)$/;"	f
filter	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:filter(tags)$/;"	f
filter	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:filter(tags)$/;"	f
filterNonEmpty	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func filterNonEmpty(input []string) []string {$/;"	f
fin	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^func (r *Reader) fin(success bool) {$/;"	f
findAndRevealPath	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath(pathStr) abort$/;"	f
findFirstMatch	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func findFirstMatch(pattern string, str string) int {$/;"	f
findHunk	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:findHunk(node, direction) abort$/;"	f
findLastMatch	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func findLastMatch(pattern string, str string) int {$/;"	f
findOffset	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f
findOffset	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f
find_open_window	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
findcommon	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:findcommon(items, seed)$/;"	f
findcommon	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:findcommon(items, seed)$/;"	f
findcount	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:findcount(str)$/;"	f
findcount	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:findcount(str)$/;"	f
findroot	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:findroot(curr, mark, depth, type)$/;"	f
findroot	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:findroot(curr, mark, depth, type)$/;"	f
firstKey	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func firstKey(keymap map[tui.Event]string) tui.Event {$/;"	f
firstLine	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func firstLine(s string) string {$/;"	f
first_line	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
fish	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^    def fish$/;"	f
fishKeyBindings	vim/.vim/pack/plugins/start/fzf/main.go	/^var fishKeyBindings []byte$/;"	v
fitpad	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type fitpad struct {$/;"	t
flatten	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:flatten(tree, cur)$/;"	f
flatten	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:flatten(tree, cur)$/;"	f
flush	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) flush() {$/;"	f
flush	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) flush() {$/;"	f
fname_prefix	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
fnesc	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:fnesc(...)$/;"	f
fnesc	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:fnesc(...)$/;"	f
focus	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def focus$/;"	f	class:Tmux
format	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:format(...)$/;"	f
format	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:format(...)$/;"	f
format_change	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_change(bufnr, offset, item)$/;"	f
format_change_offset	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_change_offset(current, index, cursor)$/;"	f
format_cmd	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
format_excmd	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
format_mark	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
format_win	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
formatline	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:formatline(str)$/;"	f
formatline	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:formatline(str)$/;"	f
formatul	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:formatul(...)$/;"	f
formatul	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:formatul(...)$/;"	f
fullRedraw	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) fullRedraw() {$/;"	f
function	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
function	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
fzf	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
fzf	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^      let fzf.temps.batchfile = s:fzf_tempname().'.bat'$/;"	v
fzf	vim/.vim/pack/plugins/start/fzf/src/actiontype_string.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/ansi_test.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/cache.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/cache_test.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/chunklist.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/chunklist_test.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/core.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/functions.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/history.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/history_test.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/item.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/item_test.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/matcher.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/merger.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/merger_test.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/options.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/options_no_pprof.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/options_pprof.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/options_pprof_test.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/pattern_test.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/proxy.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/proxy_unix.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/proxy_windows.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/reader_test.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/result.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/result_others.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/result_test.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/result_x86.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/server.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/terminal_unix.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/terminal_windows.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/tmux.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/tokenizer_test.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/winpty.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/src/winpty_windows.go	/^package fzf$/;"	p
fzf	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def fzf(*opts)$/;"	f	class:TestBase
fzf!	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def fzf!(*opts)$/;"	f	class:TestBase
fzf#complete	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf#exec	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! fzf#exec(...)$/;"	f
fzf#install	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! fzf#install()$/;"	f
fzf#run	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! fzf#run(...) abort$/;"	f
fzf#shellescape	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! fzf#shellescape(arg, ...)$/;"	f
fzf#vim#_buflisted_sorted	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_buflisted_sorted()$/;"	f
fzf#vim#_format_buffer	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_format_buffer(b)$/;"	f
fzf#vim#_lines	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#_recent_files	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_recent_files()$/;"	f
fzf#vim#_uniq	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_uniq(list)$/;"	f
fzf#vim#ag	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#buffer_commits	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...) range$/;"	f
fzf#vim#buffer_lines	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#buffer_tags	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
fzf#vim#buffers	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
fzf#vim#changes	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#changes(...)$/;"	f
fzf#vim#colors	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#command_history	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
fzf#vim#commands	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
fzf#vim#commits	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...) range$/;"	f
fzf#vim#complete	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
fzf#vim#complete#buffer_line	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
fzf#vim#complete#line	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#path	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
fzf#vim#complete#word	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
fzf#vim#files	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
fzf#vim#filetypes	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
fzf#vim#gitfiles	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
fzf#vim#grep	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, ...)$/;"	f
fzf#vim#grep2	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep2(command_prefix, query, ...)$/;"	f
fzf#vim#helptags	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#history	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
fzf#vim#jumps	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#jumps(...)$/;"	f
fzf#vim#lines	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
fzf#vim#listproc#location	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/listproc.vim	/^function! fzf#vim#listproc#location(list)$/;"	f
fzf#vim#listproc#quickfix	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/listproc.vim	/^function! fzf#vim#listproc#quickfix(list)$/;"	f
fzf#vim#locate	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
fzf#vim#maps	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
fzf#vim#marks	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...)$/;"	f
fzf#vim#search_history	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#snippets	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
fzf#vim#tags	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
fzf#vim#windows	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
fzf#vim#with_preview	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
fzf#wrap	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! fzf#wrap(...)$/;"	f
fzf.on_exit	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^  function! fzf.on_exit(id, code, ...)$/;"	f
fzf_buffers	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
fzf_call	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^  function! s:fzf_call(fn, ...)$/;"	f
fzf_expand	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:fzf_expand(fmt)$/;"	f
fzf_fnamemodify	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:fzf_fnamemodify(fname, mods)$/;"	f
fzf_getcwd	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:fzf_getcwd()$/;"	f
fzf_output	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def fzf_output$/;"	f	class:TestBase
fzf_output_lines	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def fzf_output_lines$/;"	f	class:TestBase
fzf_popd	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^augroup fzf_popd$/;"	a
fzf_restore_colors	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
fzf_tempname	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:fzf_tempname()$/;"	f
fzf_tmux	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:fzf_tmux(dict)$/;"	f
fzf_vim_term	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_vim_term()$/;"	f
g:NERDTree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoCenter	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenter            = get(g:, 'NERDTreeAutoCenter',            1)$/;"	v
g:NERDTreeAutoCenterThreshold	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenterThreshold   = get(g:, 'NERDTreeAutoCenterThreshold',   3)$/;"	v
g:NERDTreeAutoDeleteBuffer	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeBookmark	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeBookmarksFile	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksFile         = get(g:, 'NERDTreeBookmarksFile',         expand('$HOME') . '\/.NERDTreeBookmarks')$/;"	v
g:NERDTreeBookmarksSort	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksSort         = get(g:, 'NERDTreeBookmarksSort',         1)$/;"	v
g:NERDTreeCascadeOpenSingleChildDir	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeOpenSingleChildDir = get(g:, 'NERDTreeCascadeOpenSingleChildDir', 1)$/;"	v
g:NERDTreeCascadeSingleChildDir	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeSingleChildDir     = get(g:, 'NERDTreeCascadeSingleChildDir',     1)$/;"	v
g:NERDTreeCaseSensitiveFS	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCaseSensitiveFS       = get(g:, 'NERDTreeCaseSensitiveFS',       2)$/;"	v
g:NERDTreeCaseSensitiveSort	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCaseSensitiveSort     = get(g:, 'NERDTreeCaseSensitiveSort',     0)$/;"	v
g:NERDTreeChDirMode	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeChDirMode             = get(g:, 'NERDTreeChDirMode',             0)$/;"	v
g:NERDTreeCopyCmd	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyCmd      = get(g:, 'NERDTreeCopyCmd',      'cp -r ')$/;"	v
g:NERDTreeCopyDirCmd	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyDirCmd   = get(g:, 'NERDTreeCopyDirCmd',   'xcopy \/s \/e \/i \/y \/q ')$/;"	v
g:NERDTreeCopyFileCmd	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyFileCmd  = get(g:, 'NERDTreeCopyFileCmd',  'copy \/y ')$/;"	v
g:NERDTreeCreatePrefix	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCreatePrefix          = get(g:, 'NERDTreeCreatePrefix',          'silent')$/;"	v
g:NERDTreeCreator	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeDirArrowCollapsible	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '~')$/;"	v
g:NERDTreeDirArrowCollapsible	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '▾')$/;"	v
g:NERDTreeDirArrowExpandable	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '+')$/;"	v
g:NERDTreeDirArrowExpandable	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '▸')$/;"	v
g:NERDTreeDirNode	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileLines	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeFileLines             = get(g:, 'NERDTreeFileLines',             0)$/;"	v
g:NERDTreeFileNode	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeGlyphReadOnly	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeGlyphReadOnly = get(g:, 'NERDTreeGlyphReadOnly', 'RO')$/;"	v
g:NERDTreeHighlightCursorline	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHighlightCursorline   = get(g:, 'NERDTreeHighlightCursorline',   1)$/;"	v
g:NERDTreeHijackNetrw	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHijackNetrw           = get(g:, 'NERDTreeHijackNetrw',           1)$/;"	v
g:NERDTreeIgnore	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeIgnore                = get(g:, 'NERDTreeIgnore',                ['\\~$'])$/;"	v
g:NERDTreeKeyMap	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMapActivateNode	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapActivateNode    = get(g:, 'NERDTreeMapActivateNode',    'o')$/;"	v
g:NERDTreeMapCWD	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCWD             = get(g:, 'NERDTreeMapCWD',             'CD')$/;"	v
g:NERDTreeMapChangeRoot	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChangeRoot      = get(g:, 'NERDTreeMapChangeRoot',      'C')$/;"	v
g:NERDTreeMapChdir	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChdir           = get(g:, 'NERDTreeMapChdir',           'cd')$/;"	v
g:NERDTreeMapCloseChildren	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseChildren   = get(g:, 'NERDTreeMapCloseChildren',   'X')$/;"	v
g:NERDTreeMapCloseDir	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseDir        = get(g:, 'NERDTreeMapCloseDir',        'x')$/;"	v
g:NERDTreeMapCustomOpen	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCustomOpen      = get(g:, 'NERDTreeMapCustomOpen',      '<CR>')$/;"	v
g:NERDTreeMapDeleteBookmark	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapDeleteBookmark  = get(g:, 'NERDTreeMapDeleteBookmark',  'D')$/;"	v
g:NERDTreeMapHelp	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapHelp            = get(g:, 'NERDTreeMapHelp',            '?')$/;"	v
g:NERDTreeMapJumpBookmarks	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpBookmarks   = get(g:, 'NERDTreeMapJumpBookmarks',   'gb')$/;"	v
g:NERDTreeMapJumpFirstChild	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpFirstChild  = get(g:, 'NERDTreeMapJumpFirstChild',  'K')$/;"	v
g:NERDTreeMapJumpLastChild	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpLastChild   = get(g:, 'NERDTreeMapJumpLastChild',   'J')$/;"	v
g:NERDTreeMapJumpNextSibling	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpNextSibling = get(g:, 'NERDTreeMapJumpNextSibling', '<C-j>')$/;"	v
g:NERDTreeMapJumpParent	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpParent      = get(g:, 'NERDTreeMapJumpParent',      'p')$/;"	v
g:NERDTreeMapJumpPrevSibling	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpPrevSibling = get(g:, 'NERDTreeMapJumpPrevSibling', '<C-k>')$/;"	v
g:NERDTreeMapJumpRoot	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpRoot        = get(g:, 'NERDTreeMapJumpRoot',        'P')$/;"	v
g:NERDTreeMapMenu	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapMenu            = get(g:, 'NERDTreeMapMenu',            'm')$/;"	v
g:NERDTreeMapOpenExpl	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenExpl        = get(g:, 'NERDTreeMapOpenExpl',        'e')$/;"	v
g:NERDTreeMapOpenInTab	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTab       = get(g:, 'NERDTreeMapOpenInTab',       't')$/;"	v
g:NERDTreeMapOpenInTabSilent	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTabSilent = get(g:, 'NERDTreeMapOpenInTabSilent', 'T')$/;"	v
g:NERDTreeMapOpenRecursively	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenRecursively = get(g:, 'NERDTreeMapOpenRecursively', 'O')$/;"	v
g:NERDTreeMapOpenSplit	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenSplit       = get(g:, 'NERDTreeMapOpenSplit',       'i')$/;"	v
g:NERDTreeMapOpenVSplit	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenVSplit      = get(g:, 'NERDTreeMapOpenVSplit',      's')$/;"	v
g:NERDTreeMapPreview	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreview         = get(g:, 'NERDTreeMapPreview',         'g'.NERDTreeMapActivateNode)$/;"	v
g:NERDTreeMapPreviewSplit	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewSplit    = get(g:, 'NERDTreeMapPreviewSplit',    'g'.NERDTreeMapOpenSplit)$/;"	v
g:NERDTreeMapPreviewVSplit	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewVSplit   = get(g:, 'NERDTreeMapPreviewVSplit',   'g'.NERDTreeMapOpenVSplit)$/;"	v
g:NERDTreeMapQuit	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapQuit            = get(g:, 'NERDTreeMapQuit',            'q')$/;"	v
g:NERDTreeMapRefresh	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefresh         = get(g:, 'NERDTreeMapRefresh',         'r')$/;"	v
g:NERDTreeMapRefreshRoot	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefreshRoot     = get(g:, 'NERDTreeMapRefreshRoot',     'R')$/;"	v
g:NERDTreeMapToggleBookmarks	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleBookmarks = get(g:, 'NERDTreeMapToggleBookmarks', 'B')$/;"	v
g:NERDTreeMapToggleFileLines	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFileLines = get(g:, 'NERDTreeMapToggleFileLines', 'FL')$/;"	v
g:NERDTreeMapToggleFiles	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFiles     = get(g:, 'NERDTreeMapToggleFiles',     'F')$/;"	v
g:NERDTreeMapToggleFilters	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFilters   = get(g:, 'NERDTreeMapToggleFilters',   'f')$/;"	v
g:NERDTreeMapToggleHidden	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleHidden    = get(g:, 'NERDTreeMapToggleHidden',    'I')$/;"	v
g:NERDTreeMapToggleZoom	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleZoom      = get(g:, 'NERDTreeMapToggleZoom',      'A')$/;"	v
g:NERDTreeMapUpdir	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdir           = get(g:, 'NERDTreeMapUpdir',           'u')$/;"	v
g:NERDTreeMapUpdirKeepOpen	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdirKeepOpen   = get(g:, 'NERDTreeMapUpdirKeepOpen',   'U')$/;"	v
g:NERDTreeMarkBookmarks	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMarkBookmarks         = get(g:, 'NERDTreeMarkBookmarks',         1)$/;"	v
g:NERDTreeMenuController	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuDown	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuDown           = get(g:, 'NERDTreeMenuDown',           'j')$/;"	v
g:NERDTreeMenuItem	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeMenuUp	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuUp             = get(g:, 'NERDTreeMenuUp',             'k')$/;"	v
g:NERDTreeMinimalMenu	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalMenu           = get(g:, 'NERDTreeMinimalMenu',           0)$/;"	v
g:NERDTreeMinimalUI	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalUI             = get(g:, 'NERDTreeMinimalUI',             0)$/;"	v
g:NERDTreeMouseMode	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMouseMode             = get(g:, 'NERDTreeMouseMode',             1)$/;"	v
g:NERDTreeNaturalSort	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNaturalSort           = get(g:, 'NERDTreeNaturalSort',           0)$/;"	v
g:NERDTreeNodeDelimiter	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00a0")$/;"	v
g:NERDTreeNodeDelimiter	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00b7")$/;"	v
g:NERDTreeNodeDelimiter	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\x07")$/;"	v
g:NERDTreeNotificationThreshold	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNotificationThreshold = get(g:, 'NERDTreeNotificationThreshold', 100)$/;"	v
g:NERDTreeOldSortOrder	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOpener	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeQuitOnOpen	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeQuitOnOpen            = get(g:, 'NERDTreeQuitOnOpen',            0)$/;"	v
g:NERDTreeRemoveDirCmd	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rm -rf ')$/;"	v
g:NERDTreeRemoveDirCmd	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rmdir \/s \/q ')$/;"	v
g:NERDTreeRespectWildIgnore	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeRespectWildIgnore     = get(g:, 'NERDTreeRespectWildIgnore',     0)$/;"	v
g:NERDTreeShowBookmarks	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowBookmarks         = get(g:, 'NERDTreeShowBookmarks',         0)$/;"	v
g:NERDTreeShowFiles	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowFiles             = get(g:, 'NERDTreeShowFiles',             1)$/;"	v
g:NERDTreeShowHidden	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowHidden            = get(g:, 'NERDTreeShowHidden',            0)$/;"	v
g:NERDTreeShowLineNumbers	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowLineNumbers       = get(g:, 'NERDTreeShowLineNumbers',       0)$/;"	v
g:NERDTreeSortDirs	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortDirs              = get(g:, 'NERDTreeSortDirs',              1)$/;"	v
g:NERDTreeSortHiddenFirst	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortHiddenFirst       = get(g:, 'NERDTreeSortHiddenFirst',       1)$/;"	v
g:NERDTreeSortOrder	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortOrder    = get(g:, 'NERDTreeSortOrder', ['\\\/$', '*', '\\.swp$', '\\.bak$', '\\~$'])$/;"	v
g:NERDTreeStatusline	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeStatusline = get(g:, 'NERDTreeStatusline', "%{exists('b:NERDTree')?b:NERDTree.root.path.str():''}")$/;"	v
g:NERDTreeUI	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:NERDTreeUseTCD	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeUseTCD                = get(g:, 'NERDTreeUseTCD',                0)$/;"	v
g:NERDTreeWinPos	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinPos  = get(g:, 'NERDTreeWinPos', 'left')$/;"	v
g:NERDTreeWinSize	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinSize = get(g:, 'NERDTreeWinSize', 31)$/;"	v
g:VimuxCloseOnExit	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxCloseOnExit   = get(g:, 'VimuxCloseOnExit',   v:false)$/;"	v
g:VimuxCommandShell	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxCommandShell  = get(g:, 'VimuxCommandShell',   v:true)$/;"	v
g:VimuxDebug	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxDebug         = get(g:, 'VimuxDebug',         v:false)$/;"	v
g:VimuxExpandCommand	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxExpandCommand = get(g:, 'VimuxExpandCommand', v:false)$/;"	v
g:VimuxHeight	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxHeight        = get(g:, 'VimuxHeight',        20)$/;"	v
g:VimuxOpenExtraArgs	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxOpenExtraArgs = get(g:, 'VimuxOpenExtraArgs', '')$/;"	v
g:VimuxOrientation	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxOrientation   = get(g:, 'VimuxOrientation',   'v')$/;"	v
g:VimuxPromptString	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxPromptString  = get(g:, 'VimuxPromptString',  'Command? ')$/;"	v
g:VimuxResetSequence	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxResetSequence = get(g:, 'VimuxResetSequence', 'q C-u')$/;"	v
g:VimuxRunnerName	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxRunnerName    = get(g:, 'VimuxRunnerName',    '')$/;"	v
g:VimuxRunnerQuery	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxRunnerQuery   = get(g:, 'VimuxRunnerQuery',   {})$/;"	v
g:VimuxRunnerType	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxRunnerType    = get(g:, 'VimuxRunnerType',    'pane')$/;"	v
g:VimuxTmuxCommand	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxTmuxCommand   = get(g:, 'VimuxTmuxCommand',   'tmux')$/;"	v
g:VimuxUseNearest	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:VimuxUseNearest    = get(g:, 'VimuxUseNearest',    v:true)$/;"	v
g:__gutentags_vim_is_leaving	vim-gutentags/plugin/gutentags.vim	/^let g:__gutentags_vim_is_leaving = 0$/;"	v
g:__gutentags_vim_is_leaving	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:__gutentags_vim_is_leaving = 0$/;"	v
g:fzf#vim#buffers	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^  let g:fzf#vim#buffers = {}$/;"	v
g:gutentags_add_ctrlp_root_markers	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_ctrlp_root_markers	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_default_project_roots	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_add_default_project_roots	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_cscope	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_auto_add_pycscope	vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_auto_add_pycscope = 1$/;"	v
g:gutentags_auto_add_pycscope	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_auto_add_pycscope = 1$/;"	v
g:gutentags_background_update	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_background_update	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cache_dir	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_build_inverted_index	vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
g:gutentags_cscope_build_inverted_index	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
g:gutentags_cscope_build_inverted_index_maps	vim-gutentags/autoload/gutentags/cscope_maps.vim	/^    let g:gutentags_cscope_build_inverted_index_maps = 0$/;"	v
g:gutentags_cscope_build_inverted_index_maps	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^    let g:gutentags_cscope_build_inverted_index_maps = 0$/;"	v
g:gutentags_cscope_executable	vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_cscope_executable	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_cscope_executable_maps	vim-gutentags/autoload/gutentags/cscope_maps.vim	/^    let g:gutentags_cscope_executable_maps = 'cscope'$/;"	v
g:gutentags_cscope_executable_maps	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^    let g:gutentags_cscope_executable_maps = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_auto_set_tags	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_check_tagfile	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_exclude_wildignore	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_executable	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_extra_args	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_options_file	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_post_process_cmd	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_ctags_tagfile	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_debug	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_define_advanced_commands	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_enabled	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_filetypes	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_filetypes	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', $/;"	v
g:gutentags_exclude_project_root	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', $/;"	v
g:gutentags_fake	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_fake	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_file_list_command	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_empty_buffer	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_missing	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_new	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_generate_on_write	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_cscope_executable	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_dbpath	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_executable	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_gtags_options_file	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_init_user_func	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_modules	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_pause_after_update	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_plat_dir	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_info	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslckout']$/;"	v
g:gutentags_project_root	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslckout']$/;"	v
g:gutentags_project_root	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_project_root_finder	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_pycscope_executable	vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_pycscope_executable = 'pycscope'$/;"	v
g:gutentags_pycscope_executable	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_pycscope_executable = 'pycscope'$/;"	v
g:gutentags_pyscopefile	vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_pyscopefile = 'pycscope.out'$/;"	v
g:gutentags_pyscopefile	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_pyscopefile = 'pycscope.out'$/;"	v
g:gutentags_res_dir	vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_res_dir	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_resolve_symlinks	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_scopefile	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_scopefile_maps	vim-gutentags/autoload/gutentags/cscope_maps.vim	/^    let g:gutentags_scopefile_maps = 'cscope.out'$/;"	v
g:gutentags_scopefile_maps	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^    let g:gutentags_scopefile_maps = 'cscope.out'$/;"	v
g:gutentags_script_ext	vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_script_ext	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_trace	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:gutentags_use_jobs	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:loaded_commentary	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^let g:loaded_commentary = 1$/;"	v
g:loaded_ctrlp	ctrlp.vim/plugin/ctrlp.vim	/^let g:loaded_ctrlp = 1$/;"	v
g:loaded_ctrlp	vim/.vim/pack/plugins/start/ctrlp.vim/plugin/ctrlp.vim	/^let g:loaded_ctrlp = 1$/;"	v
g:loaded_ctrlp_bookmarkdir	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^let g:loaded_ctrlp_bookmarkdir = 1$/;"	v
g:loaded_ctrlp_bookmarkdir	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^let g:loaded_ctrlp_bookmarkdir = 1$/;"	v
g:loaded_ctrlp_buftag	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let g:loaded_ctrlp_buftag = 1$/;"	v
g:loaded_ctrlp_buftag	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let g:loaded_ctrlp_buftag = 1$/;"	v
g:loaded_ctrlp_changes	ctrlp.vim/autoload/ctrlp/changes.vim	/^let g:loaded_ctrlp_changes = 1$/;"	v
g:loaded_ctrlp_changes	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/changes.vim	/^let g:loaded_ctrlp_changes = 1$/;"	v
g:loaded_ctrlp_line	ctrlp.vim/autoload/ctrlp/line.vim	/^let g:loaded_ctrlp_line = 1$/;"	v
g:loaded_ctrlp_line	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/line.vim	/^let g:loaded_ctrlp_line = 1$/;"	v
g:loaded_ctrlp_quickfix	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^let g:loaded_ctrlp_quickfix = 1$/;"	v
g:loaded_ctrlp_quickfix	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^let g:loaded_ctrlp_quickfix = 1$/;"	v
g:loaded_ctrlp_tag	ctrlp.vim/autoload/ctrlp/tag.vim	/^let g:loaded_ctrlp_tag = 1$/;"	v
g:loaded_ctrlp_tag	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/tag.vim	/^let g:loaded_ctrlp_tag = 1$/;"	v
g:loaded_ctrlp_undo	ctrlp.vim/autoload/ctrlp/undo.vim	/^let g:loaded_ctrlp_undo = 1$/;"	v
g:loaded_ctrlp_undo	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^let g:loaded_ctrlp_undo = 1$/;"	v
g:loaded_fzf	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^let g:loaded_fzf = 1$/;"	v
g:loaded_fzf_vim	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^let g:loaded_fzf_vim = 1$/;"	v
g:loaded_gutentags	vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_gutentags	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_nerdtree_autoload	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_git_status	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let g:loaded_nerdtree_git_status = 1$/;"	v
g:loaded_nerdtree_git_status_autoload	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus.vim	/^let g:loaded_nerdtree_git_status_autoload = 1$/;"	v
g:loaded_nerdtree_git_status_job	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let g:loaded_nerdtree_git_status_job = 1$/;"	v
g:loaded_nerdtree_git_status_listener	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^let g:loaded_nerdtree_git_status_listener = 1$/;"	v
g:loaded_nerdtree_git_status_log	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let g:loaded_nerdtree_git_status_log = 1$/;"	v
g:loaded_nerdtree_git_status_util	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^let g:loaded_nerdtree_git_status_util = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_tagbar	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
g:loaded_vimux	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^let g:loaded_vimux = 1$/;"	v
g:tagbar#icon_closed	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_closed = g:tagbar_iconchars[0]$/;"	v
g:tagbar#icon_open	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_open   = g:tagbar_iconchars[1]$/;"	v
g:tagbar_iconchars	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['+', '-']$/;"	v
g:tagbar_iconchars	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['▸', '▾']$/;"	v
gc	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^  nmap gc  <Plug>Commentary$/;"	m
gc	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^  omap gc  <Plug>Commentary$/;"	m
gcc	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^  nmap gcc <Plug>CommentaryLine$/;"	m
gcu	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^  nmap gcu <Plug>Commentary<Plug>Commentary$/;"	m
generate_wildignore_options	vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
generate_wildignore_options	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
get	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/state.vim	/^function! s:get() abort$/;"	f
getBytes	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytes() ([]byte, error) {$/;"	f
getBytesInternal	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytesInternal(buffer []byte, nonblock bool) ([]byte, error) {$/;"	f
getChildren	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildren() dict abort$/;"	f
getChildrenByName	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildrenByName(tagname) dict abort$/;"	f
getClosedParentTline	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getClosedParentTline() abort dict$/;"	f
getDataType	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getDataType() abort dict$/;"	f
getDataType	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getDataType() abort dict$/;"	f
getEnv	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func getEnv(name string, defaultValue int) int {$/;"	f
getGitWorkdir	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:getGitWorkdir(ntRoot) abort$/;"	f
getIndicator	vim/.vim/pack/plugins/start/nerdtree-git-plugin/after/syntax/nerdtree.vim	/^function! s:getIndicator(status) abort$/;"	f
getKind	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:getKind(kind) abort dict$/;"	f
getParams	vim/.vim/pack/plugins/start/fzf/src/server.go	/^type getParams struct {$/;"	t
getPrototype	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getPrototype	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getPrototype	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getRegex	vim/.vim/pack/plugins/start/fzf/src/server.go	/^var getRegex *regexp.Regexp$/;"	v
getScrollbar	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) getScrollbar() (int, int) {$/;"	f
getScrollbar	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func getScrollbar(perLine int, total int, height int, offset int) (int, int) {$/;"	f
getStatusKey	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! s:getStatusKey(x, y) abort$/;"	f
getTags	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTags() dict abort$/;"	f
getTagsByName	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTagsByName(tagname) dict abort$/;"	f
getTargetFilter	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! s:getTargetFilter() abort$/;"	f
get_color	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
get_color	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:get_color(attr, ...)$/;"	f
get_ctags_executable	vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
get_ctags_executable	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
get_git_root	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root(dir)$/;"	f
get_git_status_output	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:get_git_status_output(workdir) abort$/;"	f
get_git_version	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:get_git_version() abort$/;"	f
get_map_str	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:get_map_str(map) abort$/;"	f
get_version	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function s:get_version(bin)$/;"	f
getbookmarks	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:getbookmarks()$/;"	f
getbookmarks	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:getbookmarks()$/;"	f
getch	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f
getch	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f
getenv	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getenv()$/;"	f
getenv	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getenv()$/;"	f
getextvar	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getextvar(key)$/;"	f
getextvar	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getextvar(key)$/;"	f
gethistdata	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:gethistdata()$/;"	f
gethistdata	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:gethistdata()$/;"	f
gethistloc	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:gethistloc()$/;"	f
gethistloc	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:gethistloc()$/;"	f
getinput	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getinput(...)$/;"	f
getinput	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:getinput(str, ...)$/;"	f
getinput	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getinput(...)$/;"	f
getinput	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:getinput(str, ...)$/;"	f
getnewmix	ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! s:getnewmix(cwd, clim)$/;"	f
getnewmix	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! s:getnewmix(cwd, clim)$/;"	f
getparent	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getparent(item)$/;"	f
getparent	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getparent(item)$/;"	f
getpos	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:getpos()$/;"	f
getregs	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getregs()$/;"	f
getregs	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getregs()$/;"	f
gettime	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/debug.vim	/^    function! s:gettime() abort$/;"	f
getundo	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:getundo()$/;"	f
getundo	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:getundo()$/;"	f
git_version_requirement	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:git_version_requirement(...)$/;"	f
gitstatus#doctor#Say	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! gitstatus#doctor#Say() abort$/;"	f
gitstatus#getIndicator	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus.vim	/^function! gitstatus#getIndicator(status) abort$/;"	f
gitstatus#isWin	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus.vim	/^function! gitstatus#isWin() abort$/;"	f
gitstatus#job#Spawn	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! gitstatus#job#Spawn(name, cmd, opts) abort$/;"	f
gitstatus#listener#New	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! gitstatus#listener#New(opts) abort$/;"	f
gitstatus#log#NewLogger	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! gitstatus#log#NewLogger(level) abort$/;"	f
gitstatus#shouldConceal	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus.vim	/^function! gitstatus#shouldConceal() abort$/;"	f
gitstatus#util#BuildGitStatusCommand	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#BuildGitStatusCommand(root, opts) abort$/;"	f
gitstatus#util#BuildGitWorkdirCommand	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#BuildGitWorkdirCommand(root, opts) abort$/;"	f
gitstatus#util#FormatPath	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^        function! gitstatus#util#FormatPath(path) abort$/;"	f
gitstatus#util#FormatPath	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^    function! gitstatus#util#FormatPath(path) abort$/;"	f
gitstatus#util#ParseGitStatusLine	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#ParseGitStatusLine(statusLine, opts) abort$/;"	f
gitstatus#util#ParseGitStatusLines	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#ParseGitStatusLines(root, statusLines, opts) abort$/;"	f
gitstatus#util#UpdateParentDirsStatus	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#UpdateParentDirsStatus(cache, root, pathStr, statusKey, opts) abort$/;"	f
give	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^type give struct {$/;"	t
given_range	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:given_range(line1, line2)$/;"	f
glbpath	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:glbpath(...)$/;"	f
glbpath	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:glbpath(...)$/;"	f
globdirs	ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:globdirs(dirs, depth)$/;"	f
globdirs	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:globdirs(dirs, depth)$/;"	f
go	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def go(args)$/;"	f
go	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^function! s:go(...) abort$/;"	f
goto_markedwin	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:goto_markedwin(...) abort$/;"	f
goto_tagbar	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:goto_tagbar(...) abort$/;"	f
goto_win	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:goto_win(winnr, ...) abort$/;"	f
grep_multi_line	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:grep_multi_line(opts)$/;"	f
gutentags#add_job	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#add_job	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#build_default_job_options	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#chdir	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#generate	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#init	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#cscope#on_job_exit	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#cscope_maps#generate	vim-gutentags/autoload/gutentags/cscope_maps.vim	/^function! gutentags#cscope_maps#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope_maps#generate	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^function! gutentags#cscope_maps#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope_maps#init	vim-gutentags/autoload/gutentags/cscope_maps.vim	/^function! gutentags#cscope_maps#init(project_root) abort$/;"	f
gutentags#cscope_maps#init	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^function! gutentags#cscope_maps#init(project_root) abort$/;"	f
gutentags#cscope_maps#on_job_exit	vim-gutentags/autoload/gutentags/cscope_maps.vim	/^function! gutentags#cscope_maps#on_job_exit(job, exit_val) abort$/;"	f
gutentags#cscope_maps#on_job_exit	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^function! gutentags#cscope_maps#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#generate	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#init	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#on_job_exit	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_get_project_root	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#default_get_project_root	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#default_stderr_cb	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stderr_cb(chan, msg) abort$/;"	f
gutentags#default_stderr_cb	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stderr_cb(chan, msg) abort$/;"	f
gutentags#default_stdout_cb	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stdout_cb(chan, msg) abort$/;"	f
gutentags#default_stdout_cb	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stdout_cb(chan, msg) abort$/;"	f
gutentags#error	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#error	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#fake	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_data	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#find_job_index_by_tags_file	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_cachefile	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_data	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_plat_file	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_file_list_cmd	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_info	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_project_root	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#get_res_file	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#generate	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#init	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#inprogress	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#is_path_rooted	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#make_args	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#normalizepath	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#on_vim_leave	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave() abort$/;"	f
gutentags#on_vim_leave	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave() abort$/;"	f
gutentags#on_vim_leave_pre	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave_pre() abort$/;"	f
gutentags#on_vim_leave_pre	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave_pre() abort$/;"	f
gutentags#pycscope#generate	vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#pycscope#generate	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#pycscope#init	vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#init(project_root) abort$/;"	f
gutentags#pycscope#init	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#init(project_root) abort$/;"	f
gutentags#pycscope#on_job_exit	vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#pycscope#on_job_exit	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#remove_job	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#remove_job_by_data	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#rescan	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#setup_gutentags	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#shellslash	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#start_job	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#statusline_cb	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#stripslash	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#throw	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#toggletrace	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#trace	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#validate_cmd	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags#warning	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
gutentags_detect	vim/.vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
handleHttpRequest	vim/.vim/pack/plugins/start/fzf/src/server.go	/^func (server *httpServer) handleHttpRequest(conn net.Conn) string {$/;"	f
handleLeftClick	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick() abort$/;"	f
handleMiddleMouse	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse() abort$/;"	f
handle_ambidouble	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:handle_ambidouble(dict)$/;"	f
hasPrefix	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:hasPrefix(text, prefix) abort$/;"	f
hasPreviewFlags	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func hasPreviewFlags(template string) (slot bool, plus bool, forceUpdate bool) {$/;"	f
hasPreviewWindow	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewWindow() bool {$/;"	f
hasPreviewer	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewer() bool {$/;"	f
hasRunner	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! s:hasRunner(index) abort$/;"	f
has_any	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:has_any(dict, keys)$/;"	f
headntail	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:headntail(str)$/;"	f
headntail	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:headntail(str)$/;"	f
heightSpec	vim/.vim/pack/plugins/start/fzf/src/options.go	/^type heightSpec struct {$/;"	t
help	vim/.vim/pack/plugins/start/fzf/bin/fzf-tmux	/^help() {$/;"	f
help	vim/.vim/pack/plugins/start/fzf/install	/^help() {$/;"	f
help	vim/.vim/pack/plugins/start/fzf/uninstall	/^help() {$/;"	f
helptag_sink	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
highlight	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:highlight(pat, grp)$/;"	f
highlight	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:highlight(pat, grp)$/;"	f
highlightFromGroup	vim/.vim/pack/plugins/start/nerdtree-git-plugin/after/syntax/nerdtree.vim	/^function! s:highlightFromGroup(group) abort$/;"	f
highlight_keys	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
history	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, extra, bang)$/;"	f
history_sink	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
history_source	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
httpBadRequest	vim/.vim/pack/plugins/start/fzf/src/server.go	/^	httpBadRequest   = "HTTP\/1.1 400 Bad Request" + crlf$/;"	c
httpOk	vim/.vim/pack/plugins/start/fzf/src/server.go	/^	httpOk           = "HTTP\/1.1 200 OK" + crlf$/;"	c
httpReadTimeout	vim/.vim/pack/plugins/start/fzf/src/server.go	/^	httpReadTimeout  = 10 * time.Second$/;"	c
httpServer	vim/.vim/pack/plugins/start/fzf/src/server.go	/^type httpServer struct {$/;"	t
httpUnauthorized	vim/.vim/pack/plugins/start/fzf/src/server.go	/^	httpUnauthorized = "HTTP\/1.1 401 Unauthorized" + crlf$/;"	c
httpUnavailable	vim/.vim/pack/plugins/start/fzf/src/server.go	/^	httpUnavailable  = "HTTP\/1.1 503 Service Unavailable" + crlf$/;"	c
ifilter	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ifilter(list, str)$/;"	f
ifilter	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ifilter(list, str)$/;"	f
ignore	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ignore()$/;"	f
ignore	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ignore()$/;"	f
indexAt	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func indexAt(index int, max int, forward bool) int {$/;"	f
infoDefault	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	infoDefault infoStyle = iota$/;"	c
infoHidden	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	infoHidden$/;"	c
infoInline	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	infoInline$/;"	c
infoInlineRight	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	infoInlineRight$/;"	c
infoRight	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	infoRight$/;"	c
infoStyle	vim/.vim/pack/plugins/start/fzf/src/options.go	/^type infoStyle int$/;"	t
init	vim/.vim/pack/plugins/start/fzf/src/algo/algo_test.go	/^func init() {$/;"	f
init	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func init() {$/;"	f
init	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func init() {$/;"	f
init	vim/.vim/pack/plugins/start/fzf/src/pattern_test.go	/^func init() {$/;"	f
init	vim/.vim/pack/plugins/start/fzf/src/server.go	/^func init() {$/;"	f
init	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func init() {$/;"	f
init	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func init() {$/;"	f
initCustomOpenArgs	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:initCustomOpenArgs() abort$/;"	f
initFoldState	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:initFoldState(known_files) abort dict$/;"	f
initPalette	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func initPalette(theme *ColorTheme) {$/;"	f
initPlatform	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) initPlatform() (err error) {$/;"	f
initPlatform	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) initPlatform() error {$/;"	f
initProfiling	vim/.vim/pack/plugins/start/fzf/src/options_no_pprof.go	/^func (o *Options) initProfiling() error {$/;"	f
initProfiling	vim/.vim/pack/plugins/start/fzf/src/options_pprof.go	/^func (o *Options) initProfiling() error {$/;"	f
initScreen	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) initScreen() error {$/;"	f
initTheme	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func initTheme(theme *ColorTheme, baseTheme *ColorTheme, forceBlack bool) {$/;"	f
initVariable	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:initVariable(var, value) abort$/;"	f
init_var	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^function! s:init_var(var, value) abort$/;"	f
initialCharClass	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	initialCharClass = charWhite$/;"	v
initialDelay	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	initialDelay      = 20 * time.Millisecond$/;"	c
initialDelayTac	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	initialDelayTac   = 100 * time.Millisecond$/;"	c
initialize	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def initialize(shell = :bash)$/;"	f	class:Tmux
inject_snippet	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
inputPrompt	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:inputPrompt(action)$/;"	f
insertcache	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:insertcache(str)$/;"	f
insertcache	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:insertcache(str)$/;"	f
insertstr	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:insertstr()$/;"	f
insertstr	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:insertstr()$/;"	f
interpretCode	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^func interpretCode(ansiCode string, prevState *ansiState) ansiState {$/;"	f
is24	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (c Color) is24() bool {$/;"	f
isAlphabet	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func isAlphabet(char uint8) bool {$/;"	f
isAscii	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func isAscii(runes []rune) bool {$/;"	f
isCtrlSeqStart	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^func isCtrlSeqStart(c uint8) bool {$/;"	f
isEOF	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:isEOF(data) abort$/;"	f
isExecuteAction	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func isExecuteAction(str string) actionType {$/;"	f
isFoldable	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFoldable() abort dict$/;"	f
isFoldable	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFoldable() abort dict$/;"	f
isFolded	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFolded() abort dict$/;"	f
isFolded	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFolded() abort dict$/;"	f
isKindheader	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isKindheader() abort dict$/;"	f
isKindheader	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isKindheader() abort dict$/;"	f
isMintty345	vim/.vim/pack/plugins/start/fzf/src/winpty_windows.go	/^func isMintty345() bool {$/;"	f
isNormalTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isNormalTag() abort dict$/;"	f
isNormalTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:isNormalTag() abort dict$/;"	f
isNumeric	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func isNumeric(char uint8) bool {$/;"	f
isPrint	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^func isPrint(c uint8) bool {$/;"	f
isPseudoTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
isPseudoTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
isSplitTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isSplitTag() abort dict$/;"	f
isSplitTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:isSplitTag() abort dict$/;"	f
isSymlinkToDir	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^func isSymlinkToDir(path string, de os.DirEntry) bool {$/;"	f
iscmdwin	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:iscmdwin()$/;"	f
iscmdwin	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:iscmdwin()$/;"	f
ispathitem	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ispathitem()$/;"	f
ispathitem	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ispathitem()$/;"	f
itemLine	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type itemLine struct {$/;"	t
itemLines	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) itemLines(item *Item, atMost int) ([][]rune, bool) {$/;"	f
item_count	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^          def item_count$/;"	f	class:Tmux.until
iter	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func (p *Pattern) iter(pfun algo.Algo, tokens []Token, caseSensitive bool, normalize bool, forward bool, pattern []rune, withPos bool, slab *util.Slab) (Offset, int, *[]int) {$/;"	f
joinTokens	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^func joinTokens(tokens []Token) string {$/;"	f
jsonContentType	vim/.vim/pack/plugins/start/fzf/src/server.go	/^	jsonContentType  = "Content-Type: application\/json" + crlf$/;"	c
jump	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
jumpAcceptEnabled	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	jumpAcceptEnabled$/;"	c
jumpDisabled	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	jumpDisabled jumpMode = iota$/;"	c
jumpEnabled	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	jumpEnabled$/;"	c
jumpMode	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type jumpMode int$/;"	t
jumpToBookmarks	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToBookmarks() abort$/;"	f
jumpToChild	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(node, last) abort$/;"	f
jumpToFirstChild	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node) abort$/;"	f
jumpToLastChild	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node) abort$/;"	f
jumpToNextHunk	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:jumpToNextHunk(node)$/;"	f
jumpToNextSibling	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node) abort$/;"	f
jumpToParent	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node) abort$/;"	f
jumpToPrevHunk	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:jumpToPrevHunk(node)$/;"	f
jumpToPrevSibling	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node) abort$/;"	f
jumpToRoot	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot() abort$/;"	f
jumpToSibling	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(node, forward) abort$/;"	f
jump_format	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump_format(line)$/;"	f
jump_sink	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump_sink(lines)$/;"	f
keyMatch	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func keyMatch(key tui.Event, event tui.Event) bool {$/;"	f
key_sink	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
kill	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def kill$/;"	f	class:Tmux
killPreview	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) killPreview() {$/;"	f
known_files.get	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:known_files.get(fname) abort dict$/;"	f
known_files.has	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:known_files.has(fname) abort dict$/;"	f
known_files.put	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:known_files.put(fileinfo, ...) abort dict$/;"	f
known_files.rm	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:known_files.rm(fname) abort dict$/;"	f
labelOpts	vim/.vim/pack/plugins/start/fzf/src/options.go	/^type labelOpts struct {$/;"	t
labelPrinter	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type labelPrinter func(tui.Window, int)$/;"	t
lash	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lash(...)$/;"	f
lash	ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! s:lash(...)$/;"	f
lash	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lash(...)$/;"	f
lash	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! s:lash(...)$/;"	f
lastChunk	vim/.vim/pack/plugins/start/fzf/src/chunklist.go	/^func (cl *ChunkList) lastChunk() *Chunk {$/;"	f
lastvisual	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lastvisual()$/;"	f
lastvisual	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lastvisual()$/;"	f
layoutDefault	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	layoutDefault layoutType = iota$/;"	c
layoutReverse	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	layoutReverse$/;"	c
layoutReverseList	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	layoutReverseList$/;"	c
layoutType	vim/.vim/pack/plugins/start/fzf/src/options.go	/^type layoutType int$/;"	t
leavepre	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:leavepre()$/;"	f
leavepre	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:leavepre()$/;"	f
line_handler	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
lineout	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! s:lineout(dict)$/;"	f
lineout	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! s:lineout(dict)$/;"	f
lines	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^  let lines = s:collect(a:temps)$/;"	v
link_fzf_in_path	vim/.vim/pack/plugins/start/fzf/install	/^link_fzf_in_path() {$/;"	f
listenAddress	vim/.vim/pack/plugins/start/fzf/src/server.go	/^type listenAddress struct {$/;"	t
loaded_nerd_tree	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_vim_devicons	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:loaded_vim_devicons() abort$/;"	f
loaded_vim_nerdtree_syntax_highlight	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:loaded_vim_nerdtree_syntax_highlight() abort$/;"	f
loaded_vim_nerdtree_tabs	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:loaded_vim_nerdtree_tabs() abort$/;"	f
log	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:log(m)$/;"	f
log	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:log(m)$/;"	f
lsCmd	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lsCmd()$/;"	f
lsCmd	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lsCmd()$/;"	f
main	vim/.vim/pack/plugins/start/fzf/main.go	/^func main() {$/;"	f
main	vim/.vim/pack/plugins/start/fzf/main.go	/^package main$/;"	p
makeImageBorder	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) makeImageBorder(width int, top bool) string {$/;"	f
makeSpace	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) makeSpace() {$/;"	f
makeSpinner	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func makeSpinner(unicode bool) []string {$/;"	f
manPage	vim/.vim/pack/plugins/start/fzf/main.go	/^var manPage []byte$/;"	v
manual_update_tags	vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
manual_update_tags	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
markEmptyLine	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) markEmptyLine(line int) {$/;"	f
markOtherLine	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) markOtherLine(line int) {$/;"	f
mark_sink	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
mark_window	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:mark_window() abort$/;"	f
markerBottom	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	markerBottom$/;"	c
markerClass	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type markerClass int$/;"	t
markerMiddle	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	markerMiddle$/;"	c
markerSingle	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	markerSingle markerClass = iota$/;"	c
markerTop	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	markerTop$/;"	c
maskActionContents	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func maskActionContents(action string) string {$/;"	f
matchChunk	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func (p *Pattern) matchChunk(chunk *Chunk, space []Result, slab *util.Slab) []Result {$/;"	f
matchControlSequence	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^func matchControlSequence(s string) int {$/;"	f
matchOperatingSystemCommand	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^func matchOperatingSystemCommand(s string) int {$/;"	f
match_count	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^          def match_count$/;"	f	class:Tmux.until
match_window_opts	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:match_window_opts()$/;"	f
match_window_opts	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:match_window_opts()$/;"	f
matchfname	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchfname(item, pat)$/;"	f
matchfname	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchfname(item, pat)$/;"	f
matchlens	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchlens(str, pat, ...)$/;"	f
matchlens	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchlens(str, pat, ...)$/;"	f
matchtabe	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchtabe(item, pat)$/;"	f
matchtabe	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchtabe(item, pat)$/;"	f
matchtabs	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchtabs(item, pat)$/;"	f
matchtabs	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchtabs(item, pat)$/;"	f
max	ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:max(len, max)$/;"	f
max	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:max(len, max)$/;"	f
maxContentLength	vim/.vim/pack/plugins/start/fzf/src/server.go	/^	maxContentLength = 1024 * 1024$/;"	c
maxFocusEvents	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^const maxFocusEvents = 10000$/;"	c
maxInputBuffer	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^	maxInputBuffer  = 1024 * 1024$/;"	c
maxItems	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) maxItems() int {$/;"	f
maxMulti	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	maxMulti          = math.MaxInt32$/;"	c
maxPartitions	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	maxPartitions           = 32$/;"	c
maxPatternLength	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	maxPatternLength  = 300$/;"	c
maxf	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:maxf(len)$/;"	f
maxf	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:maxf(len)$/;"	f
mayTriggerPreview	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func mayTriggerPreview(opts *Options) bool {$/;"	f
maybe_map_scope	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:maybe_map_scope(scopestr) abort$/;"	f
merge	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func (p ColorPair) merge(other ColorPair, except Color) ColorPair {$/;"	f
merge_opts	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
mergedGet	vim/.vim/pack/plugins/start/fzf/src/merger.go	/^func (mg *Merger) mergedGet(idx int) Result {$/;"	f
mergelists	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:mergelists()$/;"	f
mergelists	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:mergelists()$/;"	f
mergerCacheMax	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	mergerCacheMax int = 100000$/;"	c
mfunc	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mfunc()$/;"	f
mfunc	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mfunc()$/;"	f
migemo	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:migemo(str)$/;"	f
migemo	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:migemo(str)$/;"	f
migrateVariable	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:migrateVariable(oldv, newv) abort$/;"	f
minHeight	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	minHeight = 3$/;"	c
minItem	vim/.vim/pack/plugins/start/fzf/src/item.go	/^var minItem = Item{text: util.Chars{Index: math.MinInt32}}$/;"	v
minRank	vim/.vim/pack/plugins/start/fzf/src/result.go	/^func minRank() Result {$/;"	f
minWidth	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	minWidth  = 4$/;"	c
mixedsort	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mixedsort(...)$/;"	f
mixedsort	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mixedsort(...)$/;"	f
mkfifo	vim/.vim/pack/plugins/start/fzf/src/proxy_unix.go	/^func mkfifo(path string, mode uint32) (string, error) {$/;"	f
mkfifo	vim/.vim/pack/plugins/start/fzf/src/proxy_windows.go	/^func mkfifo(path string, mode uint32) (string, error) {$/;"	f
mmode	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mmode()$/;"	f
mmode	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mmode()$/;"	f
modevar	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:modevar()$/;"	f
modevar	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:modevar()$/;"	f
modify	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:modify(entry, type)$/;"	f
modify	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:modify(entry, type)$/;"	f
mouseSequence	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) mouseSequence(sz *int) Event {$/;"	f
move	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) move(y int, x int, clear bool) {$/;"	f
move	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) move(y int, x int) {$/;"	f
msg	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:msg(name, cwd)$/;"	f
msg	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:msg(name, cwd)$/;"	f
mtype	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mtype()$/;"	f
mtype	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mtype()$/;"	f
multipliers	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:multipliers(...)$/;"	f
multipliers	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:multipliers(...)$/;"	f
narrowable	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:narrowable()$/;"	f
narrowable	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:narrowable()$/;"	f
nearestRunnerId	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! s:nearestRunnerId() abort$/;"	f
needPreviewWindow	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) needPreviewWindow() bool {$/;"	f
needWinpty	vim/.vim/pack/plugins/start/fzf/src/winpty.go	/^func needWinpty(_ *Options) bool {$/;"	f
needWinpty	vim/.vim/pack/plugins/start/fzf/src/winpty_windows.go	/^func needWinpty(opts *Options) bool {$/;"	f
nerdtree#caseSensitiveFS	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#caseSensitiveFS() abort$/;"	f
nerdtree#checkForBrowse	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir) abort$/;"	f
nerdtree#closeBookmarksOnOpen	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeBookmarksOnOpen() abort$/;"	f
nerdtree#closeTreeOnOpen	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeTreeOnOpen() abort$/;"	f
nerdtree#compareNodePaths	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodePaths(p1, p2) abort$/;"	f
nerdtree#compareNodes	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2) abort$/;"	f
nerdtree#completeBookmarks	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P) abort$/;"	f
nerdtree#deprecated	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...) abort$/;"	f
nerdtree#echo	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg) abort$/;"	f
nerdtree#echoError	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg) abort$/;"	f
nerdtree#echoWarning	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg) abort$/;"	f
nerdtree#exec	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd, ignoreAll) abort$/;"	f
nerdtree#has_opt	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name) abort$/;"	f
nerdtree#loadClassFiles	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles() abort$/;"	f
nerdtree#onBufLeave	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#onBufLeave() abort$/;"	f
nerdtree#osDefaultCaseSensitiveFS	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#osDefaultCaseSensitiveFS() abort$/;"	f
nerdtree#pathEquals	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#pathEquals(lhs, rhs) abort$/;"	f
nerdtree#postSourceActions	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions() abort$/;"	f
nerdtree#renderView	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView() abort$/;"	f
nerdtree#runningCygwin	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningCygwin() abort$/;"	f
nerdtree#runningMac	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningMac() abort$/;"	f
nerdtree#runningWindows	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows() abort$/;"	f
nerdtree#slash	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#slash() abort$/;"	f
nerdtree#ui_glue#bookmarkNode	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...) abort$/;"	f
nerdtree#ui_glue#chRootCwd	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd() abort$/;"	f
nerdtree#ui_glue#clearBookmarks	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks) abort$/;"	f
nerdtree#ui_glue#createDefaultBindings	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings() abort$/;"	f
nerdtree#ui_glue#invokeKeyMap	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key) abort$/;"	f
nerdtree#ui_glue#openBookmark	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name) abort$/;"	f
nerdtree#ui_glue#revealBookmark	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name) abort$/;"	f
nerdtree#ui_glue#setupCommands	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands() abort$/;"	f
nerdtree#ui_glue#upDir	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(preserveState) abort$/;"	f
nerdtree#version	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version(...) abort$/;"	f
nerdtreegitplugin	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^augroup nerdtreegitplugin$/;"	a
newItem	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func newItem(str string) *Item {$/;"	f
newItems	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func newItems(str ...string) []*Item {$/;"	f
newJob	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:newJob(name, opts) abort$/;"	f
newRange	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^func newRange(begin int, end int) Range {$/;"	f
new_shell	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.TestFish
new_shell	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.TestBash
new_shell	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.TestZsh
newcache	ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! s:newcache(cwd)$/;"	f
newcache	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! s:newcache(cwd)$/;"	f
next	vim/.vim/pack/plugins/start/fzf/src/history.go	/^func (h *History) next() string {$/;"	f
nextAnsiEscapeSequence	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^func nextAnsiEscapeSequence(s string) (int, int) {$/;"	f
nextInt	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func nextInt(args []string, i *int, message string) (int, error) {$/;"	f
nextString	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func nextString(args []string, i *int, message string) (string, error) {$/;"	f
noSeparatorLine	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) noSeparatorLine() bool {$/;"	f
noSeparatorLine	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func noSeparatorLine(style infoStyle, separator bool) bool {$/;"	f
nocache	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nocache(...)$/;"	f
nocache	ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:nocache()$/;"	f
nocache	ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! s:nocache()$/;"	f
nocache	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nocache(...)$/;"	f
nocache	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:nocache()$/;"	f
nocache	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! s:nocache()$/;"	f
nonamecond	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nonamecond(str, filpath)$/;"	f
nonamecond	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nonamecond(str, filpath)$/;"	f
normalizeRune	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func normalizeRune(r rune) rune {$/;"	f
normalized	vim/.vim/pack/plugins/start/fzf/src/algo/normalize.go	/^var normalized = map[rune]rune{$/;"	v
nosort	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nosort()$/;"	f
nosort	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nosort()$/;"	f
nosplit	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nosplit()$/;"	f
nosplit	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nosplit()$/;"	f
notifyOnCont	vim/.vim/pack/plugins/start/fzf/src/terminal_unix.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f
notifyOnCont	vim/.vim/pack/plugins/start/fzf/src/terminal_windows.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f
notifyOnResize	vim/.vim/pack/plugins/start/fzf/src/terminal_unix.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f
notifyOnResize	vim/.vim/pack/plugins/start/fzf/src/terminal_windows.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f
notifyStop	vim/.vim/pack/plugins/start/fzf/src/terminal_unix.go	/^func notifyStop(p *os.Process) {$/;"	f
notifyStop	vim/.vim/pack/plugins/start/fzf/src/terminal_windows.go	/^func notifyStop(p *os.Process) {$/;"	f
numItemLines	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) numItemLines(item *Item, atMost int) (int, bool) {$/;"	f
numPartitionsMultiplier	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	numPartitionsMultiplier = 8$/;"	c
nvim_job_exit_wrapper	vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
nvim_job_exit_wrapper	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
nvim_job_out_wrapper	vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
nvim_job_out_wrapper	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
offset	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:offset(lines, height)$/;"	f
offset	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:offset(lines, height)$/;"	f
offsetComponentRegex	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^var offsetComponentRegex *regexp.Regexp$/;"	v
offsetPollTries	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^	offsetPollTries = 10$/;"	c
offsetRegexp	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^var offsetRegexp = regexp.MustCompile("(.*)\\x1b\\\\[([0-9]+);([0-9]+)R")$/;"	v
offsetRegexpBegin	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^var offsetRegexpBegin = regexp.MustCompile("^\\x1b\\\\[[0-9]+;[0-9]+R")$/;"	v
offsetTrimCharsRegex	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^var offsetTrimCharsRegex *regexp.Regexp$/;"	v
onCursorHold	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onCursorHold(fname)$/;"	f
onFileUpdate	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onFileUpdate(fname)$/;"	f
onGitStatusFailedCB	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitStatusFailedCB(job) abort$/;"	f
onGitStatusSuccessCB	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitStatusSuccessCB(job) abort$/;"	f
onGitWorkdirFailedCB	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitWorkdirFailedCB(job) abort$/;"	f
onGitWorkdirSuccessCB	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitWorkdirSuccessCB(job) abort$/;"	f
onNERDTreeDirChanged	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onNERDTreeDirChanged(path) abort$/;"	f
onNERDTreeInit	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onNERDTreeInit(path) abort$/;"	f
open	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(target)$/;"	f
open	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:open(cmd, target)$/;"	f
openExplorer	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node) abort$/;"	f
openFold	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openFold() abort dict$/;"	f
openFold	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:openFold() abort dict$/;"	f
openHSplit	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target) abort$/;"	f
openHSplitBookmark	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplitBookmark(bm) abort$/;"	f
openInNewTab	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target) abort$/;"	f
openInNewTabSilent	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target) abort$/;"	f
openKindFold	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:openKindFold(kind) abort dict$/;"	f
openNodeRecursively	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node) abort$/;"	f
openParents	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openParents() abort dict$/;"	f
openTty	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func openTty(mode int) (*os.File, error) {$/;"	f
openTtyIn	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func openTtyIn() (*os.File, error) {$/;"	f
openTtyIn	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^func openTtyIn() (*os.File, error) {$/;"	f
openTtyOut	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func openTtyOut() (*os.File, error) {$/;"	f
openTtyOut	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^func openTtyOut() (*os.File, error) {$/;"	f
openVSplit	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target) abort$/;"	f
openVSplitBookmark	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplitBookmark(bm) abort$/;"	f
openfile	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:openfile(cmd, fid, tail, chkmod, ...)$/;"	f
openfile	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:openfile(cmd, fid, tail, chkmod, ...)$/;"	f
optString	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func optString(arg string, prefixes ...string) (bool, string) {$/;"	f
optionalNextString	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func optionalNextString(args []string, i *int) (bool, string) {$/;"	f
optionalNumeric	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func optionalNumeric(args []string, i *int, defaultValue int) (int, error) {$/;"	f
optionalRunes	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^func (chars *Chars) optionalRunes() []rune {$/;"	f
opts	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:opts(...)$/;"	f
opts	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:opts(...)$/;"	f
opts	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^  let opts['sink*'] = remove(opts, 'sink')$/;"	v
opts	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^    let opts['sink*'] = opts.sinklist " For backward compatibility$/;"	v
optsFor	vim/.vim/pack/plugins/start/fzf/src/options_test.go	/^func optsFor(words ...string) *Options {$/;"	f
origin	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) origin() {$/;"	f
output	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) output() bool {$/;"	f
overflow	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) overflow(runes []rune, max int) bool {$/;"	f
overflow32	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^	overflow32 uint32 = 0x80808080$/;"	c
overflow64	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^	overflow64 uint64 = 0x8080808080808080$/;"	c
override	vim/.vim/pack/plugins/start/fzf/src/history.go	/^func (h *History) override(str string) {$/;"	f
parseActionList	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseActionList(masked string, original string, prevActions []*action, putAllowed bool) ([]*action, error) {$/;"	f
parseAlgo	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseAlgo(str string) (algo.Algo, error) {$/;"	f
parseAnsiCode	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^func parseAnsiCode(s string, delimiter byte) (int, byte, string) {$/;"	f
parseBorder	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseBorder(str string, optional bool) (tui.BorderShape, error) {$/;"	f
parseGetParams	vim/.vim/pack/plugins/start/fzf/src/server.go	/^func parseGetParams(query string) getParams {$/;"	f
parseHeight	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseHeight(str string, index int) (heightSpec, error) {$/;"	f
parseInfoStyle	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseInfoStyle(str string) (infoStyle, string, error) {$/;"	f
parseKeyChords	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseKeyChords(str string, message string) (map[tui.Event]string, error) {$/;"	f
parseKeyChordsImpl	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseKeyChordsImpl(str string, message string) (map[tui.Event]string, error) {$/;"	f
parseKeymap	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseKeymap(keymap map[tui.Event][]*action, str string) error {$/;"	f
parseLabelPosition	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseLabelPosition(opts *labelOpts, arg string) error {$/;"	f
parseLayout	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseLayout(str string) (layoutType, error) {$/;"	f
parseListenAddress	vim/.vim/pack/plugins/start/fzf/src/server.go	/^func parseListenAddress(address string) (listenAddress, error) {$/;"	f
parseMargin	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseMargin(opt string, margin string) ([4]sizeSpec, error) {$/;"	f
parseMarkerMultiLine	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseMarkerMultiLine(str string) (*[3]string, error) {$/;"	f
parseOptions	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseOptions(index *int, opts *Options, allArgs []string) error {$/;"	f
parsePlaceholder	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func parsePlaceholder(match string) (bool, string, placeholderFlags) {$/;"	f
parsePreviewWindow	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parsePreviewWindow(opts *previewOpts, input string) error {$/;"	f
parsePreviewWindowImpl	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parsePreviewWindowImpl(opts *previewOpts, input string) error {$/;"	f
parsePrompt	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) parsePrompt(prompt string) (func(), int) {$/;"	f
parseSingleActionList	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseSingleActionList(str string) ([]*action, error) {$/;"	f
parseSize	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseSize(str string, maxPercent float64, label string) (sizeSpec, error) {$/;"	f
parseTerms	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func parseTerms(fuzzy bool, caseMode Case, normalize bool, str string) []termSet {$/;"	f
parseTheme	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseTheme(defaultTheme *tui.ColorTheme, str string) (*tui.ColorTheme, error) {$/;"	f
parseTiebreak	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseTiebreak(str string) ([]criterion, error) {$/;"	f
parseTmuxOptions	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseTmuxOptions(arg string, index int) (*tmuxOptions, error) {$/;"	f
parseToggleSort	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseToggleSort(keymap map[tui.Event][]*action, str string) error {$/;"	f
parseWalkerOpts	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func parseWalkerOpts(str string) (walkerOpts, error) {$/;"	f
parseline	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:parseline(line)$/;"	f
parseline	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:parseline(line)$/;"	f
partialResult	vim/.vim/pack/plugins/start/fzf/src/matcher.go	/^type partialResult struct {$/;"	t
parts	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:parts(str)$/;"	f
parts	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:parts(str)$/;"	f
passThroughRegex	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^var passThroughRegex *regexp.Regexp$/;"	v
paste	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def paste(str)$/;"	f	class:Tmux
path2str	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:path2str(path) abort$/;"	f
pathshorten	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:pathshorten(str)$/;"	f
pathshorten	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:pathshorten(str)$/;"	f
pausedState	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	pausedState$/;"	c
placeCursor	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) placeCursor() {$/;"	f
placeholder	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^var placeholder *regexp.Regexp$/;"	v
placeholderFlags	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type placeholderFlags struct {$/;"	t
pluck	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
popup	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:popup(opts) abort$/;"	f
popup_support	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:popup_support()$/;"	f
posArray	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func posArray(withPos bool, len int) *[]int {$/;"	f
posCenter	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	posCenter$/;"	c
posDown	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	posDown$/;"	c
posLeft	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	posLeft$/;"	c
posRight	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	posRight$/;"	c
posUp	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	posUp windowPosition = iota$/;"	c
postProcessOptions	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func postProcessOptions(opts *Options) error {$/;"	f
prepare	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def prepare$/;"	f
prepend_opts	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
present	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:present(dict, ...)$/;"	f
prettify	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:prettify(obj) abort$/;"	f
prettifyDict	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:prettifyDict(obj, prefix, level, indent) abort$/;"	f
prettifyList	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:prettifyList(obj, prefix, level, indent) abort$/;"	f
prev_default_command	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^    let prev_default_command = $FZF_DEFAULT_COMMAND$/;"	v
previewBookmark	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewBookmark(bookmark) abort$/;"	f
previewCancelWait	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	previewCancelWait = 500 * time.Millisecond$/;"	c
previewChunkDelay	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	previewChunkDelay = 100 * time.Millisecond$/;"	c
previewDelayed	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	previewDelayed    = 500 * time.Millisecond$/;"	c
previewNodeCurrent	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node) abort$/;"	f
previewNodeHSplit	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node) abort$/;"	f
previewNodeHSplitBookmark	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplitBookmark(bookmark) abort$/;"	f
previewNodeVSplit	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node) abort$/;"	f
previewNodeVSplitBookmark	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplitBookmark(bookmark) abort$/;"	f
previewOpts	vim/.vim/pack/plugins/start/fzf/src/options.go	/^type previewOpts struct {$/;"	t
previewRequest	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type previewRequest struct {$/;"	t
previewResult	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type previewResult struct {$/;"	t
previewed	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type previewed struct {$/;"	t
previewer	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type previewer struct {$/;"	t
previous	vim/.vim/pack/plugins/start/fzf/src/history.go	/^func (h *History) previous() string {$/;"	f
printAll	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) printAll() {$/;"	f
printBar	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) printBar(lineNum int, forceRedraw bool, barRange [2]int) bool {$/;"	f
printColoredString	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) printColoredString(window tui.Window, text []rune, offsets []colorOffset, colBase tui.ColorPair) {$/;"	f
printHeader	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) printHeader() {$/;"	f
printHighlighted	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) printHighlighted(result Result, colBase tui.ColorPair, colMatch tui.ColorPair, current bool, match bool, lineNum int, maxLineNum int, forceRedraw bool, preTask func(markerClass), postTask func(int, int, bool)) int {$/;"	f
printInfo	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) printInfo() {$/;"	f
printItem	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) printItem(result Result, line int, maxLine int, index int, current bool, barRange [2]int) int {$/;"	f
printLabel	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) printLabel(window tui.Window, render labelPrinter, opts labelOpts, length int, borderShape tui.BorderShape, redrawBorder bool) {$/;"	f
printList	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) printList() {$/;"	f
printPreview	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) printPreview() {$/;"	f
printPreviewDelayed	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) printPreviewDelayed() {$/;"	f
printPrompt	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) printPrompt() {$/;"	f
printScript	vim/.vim/pack/plugins/start/fzf/main.go	/^func printScript(label string, content []byte) {$/;"	f
printString	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) printString(text string, pair ColorPair) {$/;"	f
process	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:process(entries, type)$/;"	f
process	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:process(fname, ftype)$/;"	f
process	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:process(clines, ...)$/;"	f
process	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:process(entries, type)$/;"	f
process	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:process(fname, ftype)$/;"	f
process	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:process(clines, ...)$/;"	f
processExecution	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func processExecution(action actionType) bool {$/;"	f
processScheme	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func processScheme(opts *Options) error {$/;"	f
processTabs	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) processTabs(runes []rune, prefixWidth int) (string, int) {$/;"	f
process_options_file	vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
process_options_file	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
progressMinDuration	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	progressMinDuration     = 200 * time.Millisecond$/;"	c
promptLine	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) promptLine() int {$/;"	f
promptToDelBuffer	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
protector	vim/.vim/pack/plugins/start/fzf/src/protector/protector.go	/^package protector$/;"	p
protector	vim/.vim/pack/plugins/start/fzf/src/protector/protector_openbsd.go	/^package protector$/;"	p
push	vim/.vim/pack/plugins/start/fzf/src/chunklist.go	/^func (c *Chunk) push(trans ItemBuilder, data []byte) bool {$/;"	f
pushd	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:pushd(dict)$/;"	f
pwindowSize	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) pwindowSize() tui.TermSize {$/;"	f
queryCache	vim/.vim/pack/plugins/start/fzf/src/cache.go	/^type queryCache map[string][]Result$/;"	t
queryCacheMax	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	queryCacheMax int = chunkSize \/ 5$/;"	c
quitSignal	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type quitSignal struct {$/;"	t
randResult	vim/.vim/pack/plugins/start/fzf/src/merger_test.go	/^func randResult() Result {$/;"	f
rangeEllipsis	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^const rangeEllipsis = 0$/;"	c
readChannel	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^func (r *Reader) readChannel(inputChan chan string) bool {$/;"	f
readFile	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func readFile(path string) ([]byte, error) {$/;"	f
readFiles	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^func (r *Reader) readFiles(root string, opts walkerOpts, ignores []string) bool {$/;"	f
readFromCommand	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^func (r *Reader) readFromCommand(command string, environ []string) bool {$/;"	f
readFromStdin	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^func (r *Reader) readFromStdin() bool {$/;"	f
readerBufferSize	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	readerBufferSize       = 64 * 1024$/;"	c
readerPollIntervalMax	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	readerPollIntervalMax  = 50 * time.Millisecond$/;"	c
readerPollIntervalMin	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	readerPollIntervalMin  = 10 * time.Millisecond$/;"	c
readerPollIntervalStep	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	readerPollIntervalStep = 5 * time.Millisecond$/;"	c
readerSlabSize	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	readerSlabSize         = 128 * 1024$/;"	c
record	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:record(bufnr)$/;"	f
record	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:record(bufnr)$/;"	f
reduce_line	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
reformat	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:reformat(mrufs, ...)$/;"	f
reformat	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:reformat(mrufs, ...)$/;"	f
refreshCurrent	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node) abort$/;"	f
refreshGitStatus	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:refreshGitStatus(name, workdir) abort$/;"	f
refreshRoot	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot() abort$/;"	f
regexfilter	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:regexfilter(str)$/;"	f
regexfilter	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:regexfilter(str)$/;"	f
regisfilter	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:regisfilter(reg)$/;"	f
regisfilter	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:regisfilter(reg)$/;"	f
reloadOnStart	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func (opts *Options) reloadOnStart() bool {$/;"	f
remarksigns	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:remarksigns()$/;"	f
remarksigns	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:remarksigns()$/;"	f
remove	vim/.vim/pack/plugins/start/fzf/uninstall	/^remove() {$/;"	f
removeChild	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:removeChild(tag) dict abort$/;"	f
removeFiles	vim/.vim/pack/plugins/start/fzf/src/functions.go	/^func removeFiles(files []string) {$/;"	f
removeTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:removeTag(tag) dict abort$/;"	f
remove_layout	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
remove_line	vim/.vim/pack/plugins/start/fzf/uninstall	/^remove_line() {$/;"	f
renameBuffer	vim/.vim/pack/plugins/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:renameBuffer(bufNum, newNodeName, isDirectory)$/;"	f
renderPreviewArea	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewArea(unchanged bool) {$/;"	f
renderPreviewScrollbar	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewScrollbar(yoff int, barLength int, barStart int) {$/;"	f
renderPreviewSpinner	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewSpinner() {$/;"	f
renderPreviewText	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewText(height int, lines []string, lineNo int, unchanged bool) {$/;"	f
repeat	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func repeat(r rune, times int) string {$/;"	f
replacePlaceholder	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) replacePlaceholder(template string, forcePlus bool, input string, list []*Item) (string, []string) {$/;"	f
replacePlaceholder	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func replacePlaceholder(params replacePlaceholderParams) (string, []string) {$/;"	f
replacePlaceholderParams	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type replacePlaceholderParams struct {$/;"	t
replacePlaceholderTest	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func replacePlaceholderTest(template string, stripAnsi bool, delimiter Delimiter, printsep string, forcePlus bool, query string, allItems []*Item) string {$/;"	f
reqActivate	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqActivate$/;"	c
reqBecome	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqBecome$/;"	c
reqClose	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqClose$/;"	c
reqFatal	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqFatal$/;"	c
reqFullRedraw	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqFullRedraw$/;"	c
reqHeader	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqHeader$/;"	c
reqInfo	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqInfo$/;"	c
reqJump	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqJump$/;"	c
reqList	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqList$/;"	c
reqPreviewDelayed	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqPreviewDelayed$/;"	c
reqPreviewDisplay	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqPreviewDisplay$/;"	c
reqPreviewEnqueue	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqPreviewEnqueue$/;"	c
reqPreviewRefresh	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqPreviewRefresh$/;"	c
reqPrintQuery	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqPrintQuery$/;"	c
reqPrompt	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqPrompt util.EventType = iota$/;"	c
reqQuit	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqQuit$/;"	c
reqRedrawBorderLabel	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqRedrawBorderLabel$/;"	c
reqRedrawPreviewLabel	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqRedrawPreviewLabel$/;"	c
reqReinit	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqReinit$/;"	c
reqReset	vim/.vim/pack/plugins/start/fzf/src/matcher.go	/^	reqReset$/;"	c
reqResize	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^	reqResize$/;"	c
reqRetry	vim/.vim/pack/plugins/start/fzf/src/matcher.go	/^	reqRetry util.EventType = iota$/;"	c
reset	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:reset() abort dict$/;"	f
resizeWindows	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) resizeWindows(forcePreview bool) {$/;"	f
restart	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^func (r *Reader) restart(command commandSpec, environ []string) {$/;"	f
restoreTerminal	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) restoreTerminal() {$/;"	f
restoreTerminal	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) restoreTerminal() error {$/;"	f
resumableState	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type resumableState int$/;"	t
retire	vim/.vim/pack/plugins/start/fzf/src/cache.go	/^func (cc *ChunkCache) retire(chunk ...*Chunk) {$/;"	f
reuseWin	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
reverse_list	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:reverse_list(opts)$/;"	f
revision	vim/.vim/pack/plugins/start/fzf/main.go	/^var revision = "devel"$/;"	v
revision	vim/.vim/pack/plugins/start/fzf/src/core.go	/^type revision struct {$/;"	t
rmcup	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) rmcup() {$/;"	f
rstrip	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:rstrip(str)$/;"	f
rubout	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) rubout(pattern string) {$/;"	f
runInitProfileTests	vim/.vim/pack/plugins/start/fzf/src/options_pprof_test.go	/^var runInitProfileTests = flag.Bool("test-init-profile", false, "run init profile tests")$/;"	v
runProxy	vim/.vim/pack/plugins/start/fzf/src/proxy.go	/^func runProxy(commandPrefix string, cmdBuilder func(temp string) *exec.Cmd, opts *Options, withExports bool) (int, error) {$/;"	f
runTmux	vim/.vim/pack/plugins/start/fzf/src/tmux.go	/^func runTmux(args []string, opts *Options) (int, error) {$/;"	f
runWinpty	vim/.vim/pack/plugins/start/fzf/src/winpty.go	/^func runWinpty(_ []string, _ *Options) (int, error) {$/;"	f
runWinpty	vim/.vim/pack/plugins/start/fzf/src/winpty_windows.go	/^func runWinpty(args []string, opts *Options) (int, error) {$/;"	f
run_system	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:run_system(cmd, version) abort$/;"	f
runeWidth	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^func runeWidth(r rune) int {$/;"	f
s:Bookmark	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:Creator	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
s:Event	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
s:FlagSet	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:Job	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let s:Job = {$/;"	v
s:KeyMap	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
s:Listener	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^let s:Listener = {$/;"	v
s:Logger	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:Logger = {}$/;"	v
s:MenuController	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:NERDTree	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:Notifier	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
s:Opener	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
s:Path	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
s:State	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/state.vim	/^let s:State = {$/;"	v
s:TYPE	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'bool': type(0), 'dict': type({}), 'funcref': type(function('call')), 'string': type(''), 'list': type([])}$/;"	v
s:TreeDirNode	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeFileNode	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:UI	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
s:added_db_files	vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_db_files	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:added_dbs	vim-gutentags/autoload/gutentags/cscope_maps.vim	/^let s:added_dbs = []$/;"	v
s:added_dbs	vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:added_dbs = []$/;"	v
s:added_dbs	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:added_dbs	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^let s:added_dbs = []$/;"	v
s:added_dbs	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:added_dbs = []$/;"	v
s:ansi	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cyan': 36}$/;"	v
s:ars	ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:ars = ['s:maxdepth', 's:maxfiles', 's:compare_lim', 's:glob', 's:caching']$/;"	v
s:ars	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:ars = ['s:maxdepth', 's:maxfiles', 's:compare_lim', 's:glob', 's:caching']$/;"	v
s:assert	vim/.vim/pack/plugins/start/nerdtree-git-plugin/tests/test_all.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:autocommands_done	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:autocommands_done = 0$/;"	v
s:base_dir	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^  let s:base_dir = expand('<sfile>:h:h')$/;"	v
s:bin	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = {$/;"	v
s:bin_dir	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:bin_dir = expand('<sfile>:p:h:h:h').'\/bin\/'$/;"	v
s:bins	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:bins = [$/;"	v
s:bins	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:bins = [$/;"	v
s:buffer_seqno	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:buffer_seqno = 0$/;"	v
s:ccex	ctrlp.vim/autoload/ctrlp.vim	/^let s:ccex = s:pref.'clear_cache_on_exit'$/;"	v
s:ccex	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^let s:ccex = s:pref.'clear_cache_on_exit'$/;"	v
s:checked	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:checked = 0$/;"	v
s:checked	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^let s:checked = {}$/;"	v
s:checked_ctags	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:checked_ctags       = 0$/;"	v
s:checked_ctags_types	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:checked_ctags_types = 0$/;"	v
s:compare_lim	ctrlp.vim/autoload/ctrlp.vim	/^let s:compare_lim = 3000$/;"	v
s:compare_lim	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^let s:compare_lim = 3000$/;"	v
s:compare_typeinfo	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/sorting.vim	/^let s:compare_typeinfo = {}$/;"	v
s:cpo_save	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:ctags_is_uctags	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:ctags_is_uctags     = 0$/;"	v
s:debug	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:debug   = 0 | :lockvar s:debug$/;"	v
s:debug_enabled	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/debug.vim	/^let s:debug_enabled = 0$/;"	v
s:debug_file	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/debug.vim	/^let s:debug_file = ''$/;"	v
s:default_action	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
s:default_action	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^let s:default_action = {$/;"	v
s:default_vals	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:default_vals = {$/;"	v
s:delayed_update_files	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:delayed_update_files = []$/;"	v
s:did_check_exe	vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:did_check_exe	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:dirArrows	vim/.vim/pack/plugins/start/nerdtree/syntax/nerdtree.vim	/^    let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowExpandable, '~]\\-')$/;"	v
s:dircounts	ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:dircounts = {}$/;"	v
s:dircounts	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:dircounts = {}$/;"	v
s:error	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:error   = 3 | :lockvar s:error$/;"	v
s:expand_bufnr	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:expand_bufnr = -1$/;"	v
s:ficounts	ctrlp.vim/autoload/ctrlp.vim	/^let s:ficounts = {}$/;"	v
s:ficounts	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^let s:ficounts = {}$/;"	v
s:filecounts	ctrlp.vim/autoload/ctrlp/rtscript.vim	/^let s:filecounts = {}$/;"	v
s:filecounts	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^let s:filecounts = {}$/;"	v
s:fmt_excmd	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:fmt_excmd = '   '.s:blue('%-38s', 'Statement').'%s'$/;"	v
s:fpats	ctrlp.vim/autoload/ctrlp.vim	/^let s:fpats = {$/;"	v
s:fpats	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^let s:fpats = {$/;"	v
s:fzf_go	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^let s:fzf_go = s:base_dir.'\/bin\/fzf'$/;"	v
s:fzf_tmux	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^let s:fzf_tmux = s:base_dir.'\/bin\/fzf-tmux'$/;"	v
s:glbs	ctrlp.vim/autoload/ctrlp.vim	/^let s:glbs = { 'magic': 1, 'to': 1, 'tm': 0, 'sb': 1, 'hls': 0, 'im': 0,$/;"	v
s:glbs	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^let s:glbs = { 'magic': 1, 'to': 1, 'tm': 0, 'sb': 1, 'hls': 0, 'im': 0,$/;"	v
s:hlgrps	ctrlp.vim/autoload/ctrlp.vim	/^let s:hlgrps = {$/;"	v
s:hlgrps	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^let s:hlgrps = {$/;"	v
s:ics	vim/.vim/pack/plugins/start/tagbar/syntax/tagbar.vim	/^let s:ics = escape(join(g:tagbar_iconchars, ''), ']^\\-')$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/changes.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/line.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/mixed.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/rtscript.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/tag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	ctrlp.vim/autoload/ctrlp/undo.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/changes.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/line.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mixed.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/tag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:indicatorMap	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus.vim	/^    let s:indicatorMap = {$/;"	v
s:info	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:info    = 1 | :lockvar s:info$/;"	v
s:init_done	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:init_done = 0$/;"	v
s:is_maximized	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:is_maximized    = 0$/;"	v
s:is_win	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	vim/.vim/pack/plugins/start/fzf.vim/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:is_win = gitstatus#isWin()$/;"	v
s:is_wsl_bash	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:is_wsl_bash = s:is_win && (exepath('bash') =~? 'Windows[\/\\\\]system32[\/\\\\]bash.exe$')$/;"	v
s:keyMaps	vim/.vim/pack/plugins/start/nerdtree/lib/nerdtree/key_map.vim	/^let s:keyMaps = {}$/;"	v
s:known_files	vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_files	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:known_files = {$/;"	v
s:known_files	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_projects	vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:known_projects	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:kprange	ctrlp.vim/autoload/ctrlp.vim	/^let s:kprange = {$/;"	v
s:kprange	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^let s:kprange = {$/;"	v
s:last_alt_bufnr	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:last_alt_bufnr = -1$/;"	v
s:last_highlight_tline	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:last_highlight_tline = 0$/;"	v
s:last_wildignores	vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:last_wildignores	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:launcher	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^  let s:launcher = '%s'$/;"	v
s:launcher	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^  let s:launcher = function('s:xterm_launcher')$/;"	v
s:layout_keys	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:layout_keys	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^let s:layout_keys = ['window', 'tmux', 'up', 'down', 'left', 'right']$/;"	v
s:listener	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:listener = gitstatus#listener#New(g:)$/;"	v
s:logger	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:logger = gitstatus#log#NewLogger(g:NERDTreeGitStatusLogLevel)$/;"	v
s:min_version	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:min_version = '0.23.0'$/;"	v
s:nearby_disabled	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:nearby_disabled = 0$/;"	v
s:need_cmd_window	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^let s:need_cmd_window = has('win32unix') && $TERM_PROGRAM ==# 'mintty' && s:compare_versions($TERM_PROGRAM_VERSION, '3.4.5') < 0 && !executable('winpty')$/;"	v
s:need_migrate_vals	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:need_migrate_vals = {$/;"	v
s:new_window	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:new_window      = 1$/;"	v
s:nvim	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait'))$/;"	v
s:old_cpo	vim/.vim/pack/plugins/start/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpoptions$/;"	v
s:osDefaultCaseSensitiveFS	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^    let s:osDefaultCaseSensitiveFS = 0$/;"	v
s:osDefaultCaseSensitiveFS	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^    let s:osDefaultCaseSensitiveFS = 1$/;"	v
s:pattern	vim/.vim/pack/plugins/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=#\\([^-+# ]\\)\\@='$/;"	v
s:pattern	vim/.vim/pack/plugins/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=+\\([^-+# ]\\)\\@='$/;"	v
s:pattern	vim/.vim/pack/plugins/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=-\\([^-+# ]\\)\\@='$/;"	v
s:pattern	vim/.vim/pack/plugins/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . '][-+# ]\\?\\)\\@<=[^*(]\\+\\(\\*\\?\\(([^)]\\+)\\)\\? :\\)\\@='$/;"	v
s:pattern	vim/.vim/pack/plugins/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(^[' . s:ics . '] \\?\\)\\@3<=[^-+: ]\\+[^:]\\+$'$/;"	v
s:pattern	vim/.vim/pack/plugins/start/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\S\\@<![' . s:ics . ']\\([-+# ]\\?\\)\\@='$/;"	v
s:paused	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:paused = 0$/;"	v
s:pwin_by_tagbar	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:pwin_by_tagbar = 0$/;"	v
s:rootNERDTreePath	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree.vim	/^let s:rootNERDTreePath = resolve(expand('<sfile>:p:h:h'))$/;"	v
s:runner_exe	vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	vim-gutentags/autoload/gutentags/cscope_maps.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = '"' . gutentags#get_plat_file('update_tags') . '"'$/;"	v
s:runner_exe	vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_gtags')$/;"	v
s:runner_exe	vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_pyscopedb')$/;"	v
s:runner_exe	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = '"' . gutentags#get_plat_file('update_tags') . '"'$/;"	v
s:runner_exe	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_gtags')$/;"	v
s:runner_exe	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_pyscopedb')$/;"	v
s:short_help	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:short_help      = 1$/;"	v
s:singular_types	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:singular_types = {$/;"	v
s:statusline_in_use	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:statusline_in_use = 0$/;"	v
s:suite	vim/.vim/pack/plugins/start/nerdtree-git-plugin/tests/test_all.vim	/^let s:suite = themis#suite('Test for nerdtree-git-plugin')$/;"	v
s:tab	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:tab = "\\t"$/;"	v
s:term_marker	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^  let s:term_marker = ";#FZF"$/;"	v
s:term_marker	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^  let s:term_marker = '&::FZF'$/;"	v
s:text	ctrlp.vim/autoload/ctrlp/undo.vim	/^let s:text = map(['second', 'seconds', 'minutes', 'hours', 'days', 'weeks',$/;"	v
s:text	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^let s:text = map(['second', 'seconds', 'minutes', 'hours', 'days', 'weeks',$/;"	v
s:tree_up_dir_line	vim/.vim/pack/plugins/start/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:type_formatters	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters = {}$/;"	v
s:type_formatters	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.BOOL]    = { bol -> bol ? 'v:true' : 'v:false' }$/;"	v
s:type_formatters	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.DICT]    = { dct -> s:prettifyDict(dct, '  \\ ', 0, '  ') }$/;"	v
s:type_formatters	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.FLOAT]   = { flt -> string(flt) }$/;"	v
s:type_formatters	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.FUNCREF] = { fn  -> string(fn) }$/;"	v
s:type_formatters	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.LIST]    = { lst -> s:prettifyList(lst, '  \\ ', 0, '  ') }$/;"	v
s:type_formatters	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.NULL]    = { nul -> string(nul) }$/;"	v
s:type_formatters	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.NUMBER]  = { nbr -> string(nbr) }$/;"	v
s:type_formatters	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.STRING]  = { str -> printf("'%s'", str) }$/;"	v
s:type_init_done	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:type_init_done    = 0$/;"	v
s:types	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:types = {$/;"	v
s:types	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:types = {$/;"	v
s:types	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:types = {$/;"	v
s:unix_redir	vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	vim-gutentags/autoload/gutentags/cscope_maps.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unmerged_status	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^let s:unmerged_status = {$/;"	v
s:update_in_progress	vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_in_progress	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_queue	vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:update_queue	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:versions	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^let s:versions = {}$/;"	v
s:vim8	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim_quitting	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:vim_quitting = 0$/;"	v
s:visibility_symbols	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^    let s:visibility_symbols = g:tagbar_visibility_symbols$/;"	v
s:visibility_symbols	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^let s:visibility_symbols = {$/;"	v
s:warned	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:warned = 0$/;"	v
s:warned	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^let s:warned = 0$/;"	v
s:warning	vim/.vim/pack/plugins/start/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:warning = 2 | :lockvar s:warning$/;"	v
s:warnings	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:warnings = {$/;"	v
s:wide	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:wide = 120$/;"	v
s:wig_cond	ctrlp.vim/autoload/ctrlp/utils.vim	/^let s:wig_cond = v:version > 702 || ( v:version == 702 && has('patch051') )$/;"	v
s:wig_cond	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/utils.vim	/^let s:wig_cond = v:version > 702 || ( v:version == 702 && has('patch051') )$/;"	v
s:wildignores_options_path	vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:wildignores_options_path	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:window_expanded	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:window_pos	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:window_pos = {$/;"	v
s:winpath	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^let s:winpath = {}$/;"	v
s:winrestcmd	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^let s:winrestcmd      = ''$/;"	v
sameContentLayout	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func (a previewOpts) sameContentLayout(b previewOpts) bool {$/;"	f
sameLayout	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func (a previewOpts) sameLayout(b previewOpts) bool {$/;"	f
samerootsyml	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:samerootsyml(each, isfile, cwd)$/;"	f
samerootsyml	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:samerootsyml(each, isfile, cwd)$/;"	f
sanstail	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sanstail(str)$/;"	f
sanstail	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sanstail(str)$/;"	f
savebookmark	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:savebookmark(name, cwd)$/;"	f
savebookmark	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:savebookmark(name, cwd)$/;"	f
savetofile	ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:savetofile(mrufs)$/;"	f
savetofile	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:savetofile(mrufs)$/;"	f
scan	vim/.vim/pack/plugins/start/fzf/src/matcher.go	/^func (m *Matcher) scan(request MatchRequest) (*Merger, bool) {$/;"	f
scoreGapExtension	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	scoreGapExtension = -1$/;"	c
scoreGapStart	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	scoreGapStart     = -3$/;"	c
scoreMatch	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^	scoreMatch        = 16$/;"	c
searchRequest	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type searchRequest struct {$/;"	t
search_history_sink	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
selectItem	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) selectItem(item *Item) bool {$/;"	f
selectItemChanged	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) selectItemChanged(item *Item) bool {$/;"	f
select_count	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^          def select_count$/;"	f	class:Tmux.until
selectedItem	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^type selectedItem struct {$/;"	t
send_keys	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def send_keys(*args)$/;"	f	class:Tmux
setBg	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) setBg() string {$/;"	f
setFolded	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:setFolded(folded) abort dict$/;"	f
setHightlighting	vim/.vim/pack/plugins/start/nerdtree-git-plugin/after/syntax/nerdtree.vim	/^function! s:setHightlighting() abort$/;"	f
setRunnerName	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! s:setRunnerName() abort$/;"	f
set_var	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.TestFish
set_var	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.TestShell
setentries	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:setentries()$/;"	f
setentries	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:setentries()$/;"	f
settype	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:settype(type)$/;"	f
settype	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:settype(type)$/;"	f
setup	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestBase
setup	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestBase.TestGoFZF
setup	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.TestShell
setupNERDTreeKeyMappings	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:setupNERDTreeKeyMappings()$/;"	f
setupNERDTreeListeners	vim/.vim/pack/plugins/start/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:setupNERDTreeListeners(listener) abort$/;"	f
setupTerminal	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) setupTerminal() {$/;"	f
setupTerminal	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) setupTerminal() error {$/;"	f
setup_keymaps	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^function! s:setup_keymaps() abort$/;"	f
setup_options	vim/.vim/pack/plugins/start/tagbar/plugin/tagbar.vim	/^function! s:setup_options() abort$/;"	f
setupblank	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:setupblank()$/;"	f
setupblank	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:setupblank()$/;"	f
sh	vim/.vim/pack/plugins/start/fzf/src/proxy_unix.go	/^func sh() (string, error) {$/;"	f
sh	vim/.vim/pack/plugins/start/fzf/src/proxy_windows.go	/^func sh() (string, error) {$/;"	f
shPath	vim/.vim/pack/plugins/start/fzf/src/proxy_windows.go	/^var shPath atomic.Value$/;"	v
shell	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.TestFish
shell	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.TestBash
shell	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.TestZsh
shellType	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^type shellType int$/;"	t
shellTypeCmd	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^	shellTypeCmd$/;"	c
shellTypePowerShell	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^	shellTypePowerShell$/;"	c
shellTypeUnknown	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^	shellTypeUnknown shellType = iota$/;"	c
shellesc_cmd	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:shellesc_cmd(arg)$/;"	f
shellscript	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^    let shellscript = s:fzf_tempname()$/;"	v
shortest	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:shortest(lens)$/;"	f
shortest	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:shortest(lens)$/;"	f
shortpath	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
shortpath	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:shortpath()$/;"	f
showMenu	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node) abort$/;"	f
sizeSpec	vim/.vim/pack/plugins/start/fzf/src/options.go	/^type sizeSpec struct {$/;"	t
slab	vim/.vim/pack/plugins/start/fzf/src/pattern_test.go	/^var slab *util.Slab$/;"	v
slab16Size	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	slab16Size int = 100 * 1024 \/\/ 200KB * 32 = 12.8MB$/;"	c
slab32Size	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	slab32Size int = 2048       \/\/ 8KB * 32 = 256KB$/;"	c
sliceChunks	vim/.vim/pack/plugins/start/fzf/src/matcher.go	/^func (m *Matcher) sliceChunks(chunks []*Chunk) [][]*Chunk {$/;"	f
smcup	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) smcup() {$/;"	f
sortCriteria	vim/.vim/pack/plugins/start/fzf/src/result.go	/^var sortCriteria []criterion$/;"	v
sortSelected	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) sortSelected() []selectedItem {$/;"	f
sortTags	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:sortTags(compare_typeinfo) abort dict$/;"	f
sort_buffers	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
spinnerDuration	vim/.vim/pack/plugins/start/fzf/src/constants.go	/^	spinnerDuration   = 100 * time.Millisecond$/;"	c
split	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:split(dict)$/;"	f
splitNth	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func splitNth(str string) ([]Range, error) {$/;"	f
splitRegexp	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	splitRegexp      *regexp.Regexp$/;"	v
splittable	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:splittable(dict)$/;"	f
startEventPoller	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^func (r *Reader) startEventPoller() {$/;"	f
startHttpServer	vim/.vim/pack/plugins/start/fzf/src/server.go	/^func startHttpServer(address listenAddress, actionChannel chan []*action, getHandler func(getParams) string) (net.Listener, int, error) {$/;"	f
stderr	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) stderr(str string) {$/;"	f
stderrInternal	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (r *LightRenderer) stderrInternal(str string, allowNLCR bool, resetCode string) {$/;"	f
stderrInternal	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func (w *LightWindow) stderrInternal(str string, allowNLCR bool, resetCode string) {$/;"	f
stdin	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^    let stdin = has_key(a:dict, 'source') ? '' : '< \/dev\/tty'$/;"	v
str	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:str(longsig, full) abort dict$/;"	f
strLines	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func strLines(str string) []string {$/;"	f
strfmt	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:strfmt() abort dict$/;"	f
strfmt	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:strfmt() abort dict$/;"	f
stringBytes	vim/.vim/pack/plugins/start/fzf/src/functions.go	/^func stringBytes(data string) []byte {$/;"	f
strip	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
strip_white_space	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^function! s:strip_white_space(l,r,line) abort$/;"	f
strwidth	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:strwidth(str)$/;"	f
strwidth	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:strwidth(str)$/;"	f
style	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^func (p ColorPair) style() tcell.Style {$/;"	f
sublist	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sublist(l, s, e)$/;"	f
sublist	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sublist(l, s, e)$/;"	f
sublist7071	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sublist7071(l, s, e)$/;"	f
sublist7071	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sublist7071(l, s, e)$/;"	f
suite.BuildGitStatusCommand	vim/.vim/pack/plugins/start/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.BuildGitStatusCommand() abort$/;"	f
suite.BuildGitWorkdirCommand	vim/.vim/pack/plugins/start/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.BuildGitWorkdirCommand() abort$/;"	f
suite.CustomIndicator	vim/.vim/pack/plugins/start/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.CustomIndicator() abort$/;"	f
suite.Initializing	vim/.vim/pack/plugins/start/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.Initializing() abort$/;"	f
suite.Logger	vim/.vim/pack/plugins/start/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.Logger() abort$/;"	f
suite.UpdateParentDirsStatus	vim/.vim/pack/plugins/start/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.UpdateParentDirsStatus() abort$/;"	f
surroundings	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^function! s:surroundings() abort$/;"	f
syntax	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:syntax()$/;"	f
syntax	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:syntax()$/;"	f
syntax	ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:syntax()$/;"	f
syntax	ctrlp.vim/autoload/ctrlp/line.vim	/^fu! s:syntax()$/;"	f
syntax	ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! s:syntax()$/;"	f
syntax	ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:syntax()$/;"	f
syntax	ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:syntax()$/;"	f
syntax	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:syntax()$/;"	f
syntax	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:syntax()$/;"	f
syntax	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:syntax()$/;"	f
syntax	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/line.vim	/^fu! s:syntax()$/;"	f
syntax	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! s:syntax()$/;"	f
syntax	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:syntax()$/;"	f
syntax	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:syntax()$/;"	f
tagbar#CloseWindow	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#CloseWindow() abort$/;"	f
tagbar#ForceUpdate	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#ForceUpdate() abort$/;"	f
tagbar#GetTagNearLine	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#GetTagNearLine(lnum, ...) abort$/;"	f
tagbar#IsOpen	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#IsOpen() abort$/;"	f
tagbar#OpenWindow	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#OpenWindow(...) abort$/;"	f
tagbar#RestoreSession	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#RestoreSession() abort$/;"	f
tagbar#SetFoldLevel	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#SetFoldLevel(level, force) abort$/;"	f
tagbar#StopAutoUpdate	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#StopAutoUpdate() abort$/;"	f
tagbar#ToggleWindow	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#ToggleWindow(...) abort$/;"	f
tagbar#Update	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#Update() abort$/;"	f
tagbar#autoopen	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#autoopen(...) abort$/;"	f
tagbar#currentfile	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#currentfile() abort$/;"	f
tagbar#currenttag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttag(fmt, default, ...) abort$/;"	f
tagbar#currenttagtype	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttagtype(fmt, default) abort$/;"	f
tagbar#debug#enabled	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#enabled() abort$/;"	f
tagbar#debug#log	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log(msg) abort$/;"	f
tagbar#debug#log_ctags_output	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log_ctags_output(output) abort$/;"	f
tagbar#debug#start_debug	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#start_debug(...) abort$/;"	f
tagbar#debug#stop_debug	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#stop_debug() abort$/;"	f
tagbar#gettypeconfig	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#gettypeconfig(type) abort$/;"	f
tagbar#getusertypes	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#getusertypes() abort$/;"	f
tagbar#highlighttag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#highlighttag(openfolds, force) abort$/;"	f
tagbar#inspect	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#inspect(var) abort$/;"	f
tagbar#is_paused	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#is_paused() abort$/;"	f
tagbar#jump	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#jump() abort$/;"	f
tagbar#jumpToNearbyTag	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#jumpToNearbyTag(direction, ...) abort$/;"	f
tagbar#printfileinfo	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#printfileinfo() abort$/;"	f
tagbar#prototypes#basetag#new	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! tagbar#prototypes#basetag#new(name) abort$/;"	f
tagbar#prototypes#fileinfo#new	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! tagbar#prototypes#fileinfo#new(fname, ftype, typeinfo) abort$/;"	f
tagbar#prototypes#kindheadertag#new	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! tagbar#prototypes#kindheadertag#new(name) abort$/;"	f
tagbar#prototypes#normaltag#new	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! tagbar#prototypes#normaltag#new(name) abort$/;"	f
tagbar#prototypes#pseudotag#new	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! tagbar#prototypes#pseudotag#new(name) abort$/;"	f
tagbar#prototypes#splittag#new	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! tagbar#prototypes#splittag#new(name) abort$/;"	f
tagbar#prototypes#typeinfo#new	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! tagbar#prototypes#typeinfo#new(...) abort$/;"	f
tagbar#sorting#sort	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/sorting.vim	/^function! tagbar#sorting#sort(tags, compareby, compare_typeinfo) abort$/;"	f
tagbar#state#get_current_file	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#get_current_file(force_current) abort$/;"	f
tagbar#state#set_current_file	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_current_file(fileinfo) abort$/;"	f
tagbar#state#set_paused	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_paused() abort$/;"	f
tagbar#toggle_pause	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! tagbar#toggle_pause() abort$/;"	f
tagbar#types#ctags#init	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/types/ctags.vim	/^function! tagbar#types#ctags#init(supported_types) abort$/;"	f
tagbar#types#uctags#init	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/types/uctags.vim	/^function! tagbar#types#uctags#init(supported_types) abort$/;"	f
tags_sink	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
tail	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:tail()$/;"	f
tail	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:tail()$/;"	f
teardown	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestBase
teardown	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestBase.TestGoFZF
teardown	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.TestShell
templateToString	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func templateToString(format string, data interface{}) string {$/;"	f
tempname	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def tempname$/;"	f	class:TestBase
term	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^type term struct {$/;"	t
termEqual	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^	termEqual$/;"	c
termExact	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^	termExact$/;"	c
termFuzzy	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^	termFuzzy termType = iota$/;"	c
termPrefix	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^	termPrefix$/;"	c
termSet	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^type termSet []term$/;"	t
termSuffix	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^	termSuffix$/;"	c
termType	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^type termType int$/;"	t
term_opts	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^        let term_opts.curwin = 1$/;"	v
term_opts	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^        let term_opts.hidden = 1$/;"	v
term_opts	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^        let term_opts.term_kill = 'term'$/;"	v
term_opts	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^      let term_opts = {'exit_cb': function(fzf.on_exit)}$/;"	v
terminate	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^func (r *Reader) terminate() {$/;"	f
testCase	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^type testCase struct {$/;"	t
testCommands	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^func testCommands(t *testing.T, tests []testCase) {$/;"	f
testParserReference	vim/.vim/pack/plugins/start/fzf/src/ansi_test.go	/^func testParserReference(t testing.TB, str string) {$/;"	f
test_accept_non_empty	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_accept_non_empty$/;"	f	class:TestBase.TestGoFZF
test_accept_non_empty_with_empty_list	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_empty_list$/;"	f	class:TestBase.TestGoFZF
test_accept_non_empty_with_multi_selection	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_multi_selection$/;"	f	class:TestBase.TestGoFZF
test_accept_or_print_query_with_match	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_accept_or_print_query_with_match$/;"	f	class:TestBase.TestGoFZF
test_accept_or_print_query_with_multi_selection	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_accept_or_print_query_with_multi_selection$/;"	f	class:TestBase.TestGoFZF
test_accept_or_print_query_without_match	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_accept_or_print_query_without_match$/;"	f	class:TestBase.TestGoFZF
test_alt_c	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_alt_c$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.TestShell
test_alt_c_command	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_alt_c_command$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.TestShell
test_backward_delete_char_eof	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_backward_delete_char_eof$/;"	f	class:TestBase.TestGoFZF
test_backward_eof	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_backward_eof$/;"	f	class:TestBase.TestGoFZF
test_become	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_become$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort
test_become_tty	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_become_tty$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_bind	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_bind$/;"	f	class:TestBase.TestGoFZF
test_bind_print_query	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_bind_print_query$/;"	f	class:TestBase.TestGoFZF
test_bind_replace_query	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_bind_replace_query$/;"	f	class:TestBase.TestGoFZF
test_cancel	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_cancel$/;"	f	class:TestBase.TestGoFZF
test_change_and_transform_header	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_change_and_transform_header$/;"	f	class:TestBase.TestGoFZF
test_change_first_last	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_change_first_last$/;"	f	class:TestBase.TestGoFZF
test_change_header	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_change_header$/;"	f	class:TestBase.TestGoFZF
test_change_preview_window	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_change_preview_window$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_change_preview_window_rotate	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_change_preview_window_rotate$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_change_preview_window_rotate_hidden	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_change_preview_window_rotate_hidden$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_change_preview_window_rotate_hidden_down	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_change_preview_window_rotate_hidden_down$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_change_preview_window_should_not_reset_change_preview	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_change_preview_window_should_not_reset_change_preview$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_change_prompt	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_change_prompt$/;"	f	class:TestBase.TestGoFZF
test_change_query	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_change_query$/;"	f	class:TestBase.TestGoFZF
test_clear_list_when_header_lines_changed_due_to_reload	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_clear_list_when_header_lines_changed_due_to_reload$/;"	f	class:TestBase.TestGoFZF
test_clear_query	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_clear_query$/;"	f	class:TestBase.TestGoFZF
test_clear_selection	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_clear_selection$/;"	f	class:TestBase.TestGoFZF
test_close	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_close$/;"	f	class:TestBase.TestGoFZF
test_complete_quoted_command	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_complete_quoted_command$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.TestZsh
test_ctrl_r	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_ctrl_r$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.TestShell
test_ctrl_r_abort	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_ctrl_r_abort$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.TestShell
test_ctrl_r_multiline	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_ctrl_r_multiline$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.TestShell
test_ctrl_t	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_ctrl_t$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.TestShell
test_ctrl_t_unicode	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_ctrl_t_unicode$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.TestShell
test_custom_completion	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_custom_completion$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.CompletionTest
test_custom_completion_api	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_custom_completion_api$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.CompletionTest
test_cycle	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_cycle$/;"	f	class:TestBase.TestGoFZF
test_default_extended	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_default_extended$/;"	f	class:TestBase.TestGoFZF
test_delete_with_modifiers	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_delete_with_modifiers$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_dir_completion	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_dir_completion$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.CompletionTest
test_disabled	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_disabled$/;"	f	class:TestBase.TestGoFZF
test_disabled_preview_update	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_disabled_preview_update$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_dynamic_completion_loader	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_dynamic_completion_loader$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.TestBash
test_ellipsis	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_ellipsis$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_escaped_meta_characters	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_escaped_meta_characters$/;"	f	class:TestBase.TestGoFZF
test_exact	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_exact$/;"	f	class:TestBase.TestGoFZF
test_execute	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_execute$/;"	f	class:TestBase.TestGoFZF
test_execute_multi	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_execute_multi$/;"	f	class:TestBase.TestGoFZF
test_execute_plus_flag	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_execute_plus_flag$/;"	f	class:TestBase.TestGoFZF
test_execute_shell	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_execute_shell$/;"	f	class:TestBase.TestGoFZF
test_exit_0	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_exit_0$/;"	f	class:TestBase.TestGoFZF
test_exit_0_exit_code	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_exit_0_exit_code$/;"	f	class:TestBase.TestGoFZF
test_exitstatus_empty	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_exitstatus_empty$/;"	f	class:TestBase.TestGoFZF
test_expect	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_expect$/;"	f	class:TestBase.TestGoFZF
test_expect_print_query	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_expect_print_query$/;"	f	class:TestBase.TestGoFZF
test_expect_print_query_select_1	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_expect_print_query_select_1$/;"	f	class:TestBase.TestGoFZF
test_expect_printable_character_print_query	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_expect_printable_character_print_query$/;"	f	class:TestBase.TestGoFZF
test_expect_with_bound_actions	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_expect_with_bound_actions$/;"	f	class:TestBase.TestGoFZF
test_file_completion	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_file_completion$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.CompletionTest
test_file_completion_root	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_file_completion_root$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.CompletionTest
test_file_completion_unicode	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_file_completion_unicode$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.CompletionTest
test_file_word	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_file_word$/;"	f	class:TestBase.TestGoFZF
test_filter_exitstatus	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_filter_exitstatus$/;"	f	class:TestBase.TestGoFZF
test_focus_event	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_focus_event$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_fzf_default_command	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_fzf_default_command$/;"	f	class:TestBase.TestGoFZF
test_fzf_default_command_failure	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_fzf_default_command_failure$/;"	f	class:TestBase.TestGoFZF
test_fzf_multi_line	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_fzf_multi_line$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_fzf_multi_line_no_pointer_and_marker	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_fzf_multi_line_no_pointer_and_marker$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_fzf_multi_line_reverse	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_fzf_multi_line_reverse$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_fzf_pos	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_fzf_pos$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_header	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_header$/;"	f	class:TestBase.TestGoFZF
test_header_and_header_lines	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_header_and_header_lines$/;"	f	class:TestBase.TestGoFZF
test_header_and_header_lines_reverse	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse$/;"	f	class:TestBase.TestGoFZF
test_header_and_header_lines_reverse_list	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse_list$/;"	f	class:TestBase.TestGoFZF
test_header_first	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_header_first$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_header_first_reverse	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_header_first_reverse$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_header_lines	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_header_lines$/;"	f	class:TestBase.TestGoFZF
test_header_lines_overflow	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_header_lines_overflow$/;"	f	class:TestBase.TestGoFZF
test_header_lines_reverse	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_header_lines_reverse$/;"	f	class:TestBase.TestGoFZF
test_header_lines_reverse_list	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_header_lines_reverse_list$/;"	f	class:TestBase.TestGoFZF
test_header_lines_with_nth	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_header_lines_with_nth$/;"	f	class:TestBase.TestGoFZF
test_header_reverse	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_header_reverse$/;"	f	class:TestBase.TestGoFZF
test_header_reverse_list	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_header_reverse_list$/;"	f	class:TestBase.TestGoFZF
test_height_range_fit	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_height_range_fit$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_height_range_fit_preview_above	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_height_range_fit_preview_above$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_height_range_fit_preview_above_alternative	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_height_range_fit_preview_above_alternative$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_height_range_fit_preview_left	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_height_range_fit_preview_left$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_height_range_overflow	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_height_range_overflow$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_height_range_with_exit_0	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_height_range_with_exit_0$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_history	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_history$/;"	f	class:TestBase.TestGoFZF
test_hscroll_off	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_hscroll_off$/;"	f	class:TestBase.TestGoFZF
test_info_command	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_command$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_info_command_inline	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_command_inline$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_info_command_inline_right	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_command_inline_right$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_info_command_right	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_command_right$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_info_hidden	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_hidden$/;"	f	class:TestBase.TestGoFZF
test_info_inline_right	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_inline_right$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_info_inline_right_clearance	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_inline_right_clearance$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_info_inline_separator	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_inline_separator$/;"	f	class:TestBase.TestGoFZF
test_info_no_separator	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_no_separator$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_info_right	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_right$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_info_separator_ansi_colors_and_tabs	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_separator_ansi_colors_and_tabs$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_info_separator_no_unicode	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_separator_no_unicode$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_info_separator_repeat	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_separator_repeat$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_info_separator_unicode	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_info_separator_unicode$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_interrupt_execute	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_interrupt_execute$/;"	f	class:TestBase.TestGoFZF
test_invalid_cache	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_invalid_cache$/;"	f	class:TestBase.TestGoFZF
test_invalid_cache_query_type	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_invalid_cache_query_type$/;"	f	class:TestBase.TestGoFZF
test_invalid_option	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_invalid_option$/;"	f	class:TestBase.TestGoFZF
test_inverse_only_search_should_not_sort_the_result	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_inverse_only_search_should_not_sort_the_result$/;"	f	class:TestBase.TestGoFZF
test_item_index_reset_on_reload	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_item_index_reset_on_reload$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_jump	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_jump$/;"	f	class:TestBase.TestGoFZF
test_jump_accept	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_jump_accept$/;"	f	class:TestBase.TestGoFZF
test_jump_events	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_jump_events$/;"	f	class:TestBase.TestGoFZF
test_keep_right	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_keep_right$/;"	f	class:TestBase.TestGoFZF
test_key_bindings	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_key_bindings$/;"	f	class:TestBase.TestGoFZF
test_kill_default_command_on_abort	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_kill_default_command_on_abort$/;"	f	class:TestBase.TestGoFZF
test_kill_default_command_on_accept	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_kill_default_command_on_accept$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort
test_kill_reload_command_on_abort	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_kill_reload_command_on_abort$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept
test_kill_reload_command_on_accept	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_kill_reload_command_on_accept$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort
test_labels_bottom	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_labels_bottom$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_labels_center	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_labels_center$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_labels_left	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_labels_left$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_labels_right	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_labels_right$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_labels_variables	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_labels_variables$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_listen	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_listen$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_listen_with_api_key	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_listen_with_api_key$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort
test_long_line	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_long_line$/;"	f	class:TestBase.TestGoFZF
test_margin	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_margin$/;"	f	class:TestBase.TestGoFZF
test_margin_reverse	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_margin_reverse$/;"	f	class:TestBase.TestGoFZF
test_margin_reverse_list	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_margin_reverse_list$/;"	f	class:TestBase.TestGoFZF
test_marker	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_marker$/;"	f	class:TestBase.TestGoFZF
test_multi_action	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_multi_action$/;"	f	class:TestBase.TestGoFZF
test_multi_max	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_multi_max$/;"	f	class:TestBase.TestGoFZF
test_multi_order	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_multi_order$/;"	f	class:TestBase.TestGoFZF
test_no_clear	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_no_clear$/;"	f	class:TestBase.TestGoFZF
test_no_extra_newline_issue_3209	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_no_extra_newline_issue_3209$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort
test_normalized_match	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_normalized_match$/;"	f	class:TestBase.TestGoFZF
test_one_and_zero	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_one_and_zero$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_or_operator	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_or_operator$/;"	f	class:TestBase.TestGoFZF
test_partial_caching	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_partial_caching$/;"	f	class:TestBase.TestGoFZF
test_pointer	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_pointer$/;"	f	class:TestBase.TestGoFZF
test_pointer_with_jump	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_pointer_with_jump$/;"	f	class:TestBase.TestGoFZF
test_pos	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_pos$/;"	f	class:TestBase.TestGoFZF
test_prev_next_selected	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_prev_next_selected$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_preview	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview$/;"	f	class:TestBase.TestGoFZF
test_preview_bindings_with_default_preview	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_bindings_with_default_preview$/;"	f	class:TestBase.TestGoFZF
test_preview_bindings_without_default_preview	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_bindings_without_default_preview$/;"	f	class:TestBase.TestGoFZF
test_preview_clear_screen	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_clear_screen$/;"	f	class:TestBase.TestGoFZF
test_preview_correct_tab_width_after_ansi_reset_code	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_correct_tab_width_after_ansi_reset_code$/;"	f	class:TestBase.TestGoFZF
test_preview_file	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_file$/;"	f	class:TestBase.TestGoFZF
test_preview_flags	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_flags$/;"	f	class:TestBase.TestGoFZF
test_preview_header	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_header$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_preview_hidden	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_hidden$/;"	f	class:TestBase.TestGoFZF
test_preview_q_no_match	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_q_no_match$/;"	f	class:TestBase.TestGoFZF
test_preview_q_no_match_with_initial_query	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_q_no_match_with_initial_query$/;"	f	class:TestBase.TestGoFZF
test_preview_scroll_begin_and_offset	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_and_offset$/;"	f	class:TestBase.TestGoFZF
test_preview_scroll_begin_constant	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_constant$/;"	f	class:TestBase.TestGoFZF
test_preview_scroll_begin_expr	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_expr$/;"	f	class:TestBase.TestGoFZF
test_preview_size_0	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_size_0$/;"	f	class:TestBase.TestGoFZF
test_preview_size_0_hidden	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_size_0_hidden$/;"	f	class:TestBase.TestGoFZF
test_preview_update_on_select	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_update_on_select$/;"	f	class:TestBase.TestGoFZF
test_preview_window_follow	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_window_follow$/;"	f	class:TestBase.TestGoFZF
test_preview_window_hidden_on_focus	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_preview_window_hidden_on_focus$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_process_completion	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_process_completion$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.CompletionTest
test_put	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_put$/;"	f	class:TestBase.TestGoFZF
test_query_unicode	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_query_unicode$/;"	f	class:TestBase.TestGoFZF
test_read0	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_read0$/;"	f	class:TestBase.TestGoFZF
test_reload	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload$/;"	f	class:TestBase.TestGoFZF
test_reload_and_change	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload_and_change$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_reload_and_change_cache	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload_and_change_cache$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_reload_and_change_preview_should_update_preview	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload_and_change_preview_should_update_preview$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_reload_disabled_case1	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload_disabled_case1$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_reload_disabled_case2	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload_disabled_case2$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_reload_disabled_case3	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload_disabled_case3$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_reload_disabled_case4	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload_disabled_case4$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_reload_disabled_case5	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload_disabled_case5$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_reload_disabled_case6	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload_disabled_case6$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_reload_even_when_theres_no_match	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload_even_when_theres_no_match$/;"	f	class:TestBase.TestGoFZF
test_reload_should_terminate_standard_input_stream	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload_should_terminate_standard_input_stream$/;"	f	class:TestBase.TestGoFZF
test_reload_should_update_preview	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload_should_update_preview$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_reload_sync	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_reload_sync$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_result_event	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_result_event$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_scroll	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_scroll$/;"	f	class:TestBase.TestGoFZF
test_scroll_off	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_scroll_off$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_scroll_off_large	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_scroll_off_large$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_select_1	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_select_1$/;"	f	class:TestBase.TestGoFZF
test_select_1_exit_0_fail	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_select_1_exit_0_fail$/;"	f	class:TestBase.TestGoFZF
test_select_all_deselect_all_toggle_all	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_select_all_deselect_all_toggle_all$/;"	f	class:TestBase.TestGoFZF
test_select_deselect	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_select_deselect$/;"	f	class:TestBase.TestGoFZF
test_show_and_hide_preview	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_show_and_hide_preview$/;"	f	class:TestBase.TestGoFZF
test_smart_case_for_each_term	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_smart_case_for_each_term$/;"	f	class:TestBase.TestGoFZF
test_ssh_completion	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_ssh_completion$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.CompletionTest
test_start_event	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_start_event$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_start_on_reload	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_start_on_reload$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_strip_xterm_osc_sequence	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_strip_xterm_osc_sequence$/;"	f	class:TestBase.TestGoFZF
test_sync	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_sync$/;"	f	class:TestBase.TestGoFZF
test_tabstop	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_tabstop$/;"	f	class:TestBase.TestGoFZF
test_tac	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_tac$/;"	f	class:TestBase.TestGoFZF
test_tac_nosort	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_tac_nosort$/;"	f	class:TestBase.TestGoFZF
test_tac_sort	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_tac_sort$/;"	f	class:TestBase.TestGoFZF
test_tiebreak	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_tiebreak$/;"	f	class:TestBase.TestGoFZF
test_tiebreak_begin_algo_v2	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_tiebreak_begin_algo_v2$/;"	f	class:TestBase.TestGoFZF
test_tiebreak_chunk	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_tiebreak_chunk$/;"	f	class:TestBase.TestGoFZF
test_tiebreak_end	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_tiebreak_end$/;"	f	class:TestBase.TestGoFZF
test_tiebreak_index_begin	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_tiebreak_index_begin$/;"	f	class:TestBase.TestGoFZF
test_tiebreak_length_with_nth	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_tiebreak_length_with_nth$/;"	f	class:TestBase.TestGoFZF
test_toggle_alternative_preview_window	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_toggle_alternative_preview_window$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort
test_toggle_header	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_toggle_header$/;"	f	class:TestBase.TestGoFZF
test_toggle_preview_without_default_preview_command	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_toggle_preview_without_default_preview_command$/;"	f	class:TestBase.TestGoFZF
test_toggle_preview_wrap	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_toggle_preview_wrap$/;"	f	class:TestBase.TestGoFZF
test_toggle_sort	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_toggle_sort$/;"	f	class:TestBase.TestGoFZF
test_track	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_track$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort
test_track_action	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_track_action$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_track
test_transform	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_transform$/;"	f	class:TestBase.TestGoFZF
test_transform_prompt	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_transform_prompt$/;"	f	class:TestBase.TestGoFZF
test_transform_query	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_transform_query$/;"	f	class:TestBase.TestGoFZF
test_unbind_rebind	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_unbind_rebind$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.test_kill_reload_command_on_accept
test_unicode_case	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_unicode_case$/;"	f	class:TestBase.TestGoFZF
test_unset_completion	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_unset_completion$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.CompletionTest
test_vanilla	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_vanilla$/;"	f	class:TestBase.TestGoFZF
test_with_nth	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_with_nth$/;"	f	class:TestBase.TestGoFZF
test_with_nth_ansi	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_with_nth_ansi$/;"	f	class:TestBase.TestGoFZF
test_with_nth_basic	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_with_nth_basic$/;"	f	class:TestBase.TestGoFZF
test_with_nth_no_ansi	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def test_with_nth_no_ansi$/;"	f	class:TestBase.TestGoFZF
textdialog	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:textdialog(str)$/;"	f
textdialog	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:textdialog(str)$/;"	f
textobject	vim/.vim/pack/plugins/start/vim-commentary/plugin/commentary.vim	/^function! s:textobject(inner) abort$/;"	f
timeoutInterval	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^	timeoutInterval = 10$/;"	c
tmuxIndex	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! s:tmuxIndex() abort$/;"	f
tmuxOptions	vim/.vim/pack/plugins/start/fzf/src/options.go	/^type tmuxOptions struct {$/;"	t
tmuxPaneId	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! s:tmuxPaneId() abort$/;"	f
tmuxProperty	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! s:tmuxProperty(property) abort$/;"	f
tmuxSession	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! s:tmuxSession() abort$/;"	f
tmuxWindowId	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! s:tmuxWindowId() abort$/;"	f
tmux_enabled	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:tmux_enabled()$/;"	f
toActions	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func toActions(types ...actionType) []*action {$/;"	f
toAnsiString	vim/.vim/pack/plugins/start/fzf/src/ansi.go	/^func toAnsiString(color tui.Color, offset int) string {$/;"	f
toggleFold	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:toggleFold(fileinfo) abort dict$/;"	f
toggleIgnoreFilter	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter() abort$/;"	f
toggleItem	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) toggleItem(item *Item) bool {$/;"	f
toggleShowBookmarks	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks() abort$/;"	f
toggleShowFileLines	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFileLines() abort$/;"	f
toggleShowFiles	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles() abort$/;"	f
toggleShowHidden	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden() abort$/;"	f
toggleZoom	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom() abort$/;"	f
trackCurrent	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	trackCurrent$/;"	c
trackDisabled	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	trackDisabled trackOption = iota$/;"	c
trackEnabled	vim/.vim/pack/plugins/start/fzf/src/options.go	/^	trackEnabled$/;"	c
trackOption	vim/.vim/pack/plugins/start/fzf/src/options.go	/^type trackOption int$/;"	t
transformInput	vim/.vim/pack/plugins/start/fzf/src/pattern.go	/^func (p *Pattern) transformInput(item *Item) []Token {$/;"	f
trimLeft	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) trimLeft(runes []rune, width int) ([]rune, int32) {$/;"	f
trimMessage	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) trimMessage(message string, maxWidth int) string {$/;"	f
trimPath	vim/.vim/pack/plugins/start/fzf/src/reader.go	/^func trimPath(path string) string {$/;"	f
trimQuery	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func trimQuery(query string) []rune {$/;"	f
trimRight	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) trimRight(runes []rune, width int) ([]rune, bool) {$/;"	f
truncateQuery	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) truncateQuery() {$/;"	f
tryLock	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) tryLock(timeout time.Duration) bool {$/;"	f
trySkip	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^func trySkip(input *util.Chars, caseSensitive bool, b byte, from int) int {$/;"	f
try_curl	vim/.vim/pack/plugins/start/fzf/install	/^try_curl() {$/;"	f
try_wget	vim/.vim/pack/plugins/start/fzf/install	/^try_wget() {$/;"	f
tty	vim/.vim/pack/plugins/start/fzf/src/tui/ttyname_unix.go	/^var tty atomic.Value$/;"	v
ttyin	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^var ttyin *os.File$/;"	v
ttyname	vim/.vim/pack/plugins/start/fzf/src/tui/ttyname_unix.go	/^func ttyname() string {$/;"	f
ttyname	vim/.vim/pack/plugins/start/fzf/src/tui/ttyname_windows.go	/^func ttyname() string {$/;"	f
tui	vim/.vim/pack/plugins/start/fzf/src/tui/dummy.go	/^package tui$/;"	p
tui	vim/.vim/pack/plugins/start/fzf/src/tui/eventtype_string.go	/^package tui$/;"	p
tui	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^package tui$/;"	p
tui	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^package tui$/;"	p
tui	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^package tui$/;"	p
tui	vim/.vim/pack/plugins/start/fzf/src/tui/tcell.go	/^package tui$/;"	p
tui	vim/.vim/pack/plugins/start/fzf/src/tui/tcell_test.go	/^package tui$/;"	p
tui	vim/.vim/pack/plugins/start/fzf/src/tui/ttyname_unix.go	/^package tui$/;"	p
tui	vim/.vim/pack/plugins/start/fzf/src/tui/ttyname_windows.go	/^package tui$/;"	p
tui	vim/.vim/pack/plugins/start/fzf/src/tui/tui.go	/^package tui$/;"	p
tui	vim/.vim/pack/plugins/start/fzf/src/tui/tui_test.go	/^package tui$/;"	p
unmarksigns	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:unmarksigns()$/;"	f
unmarksigns	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:unmarksigns()$/;"	f
unset_var	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def unset_var(name)$/;"	f	class:TestBase.TestGoFZF.test_kill_default_command_on_abort.test_kill_default_command_on_accept.test_kill_reload_command_on_abort.TestShell
until	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def until(refresh = false, timeout: DEFAULT_TIMEOUT)$/;"	f	class:Tmux
upDirCurrentRootClosed	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed() abort$/;"	f
upDirCurrentRootOpen	vim/.vim/pack/plugins/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen() abort$/;"	f
updatePromptOffset	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) updatePromptOffset() ([]rune, []rune) {$/;"	f
updateTerminalSize	vim/.vim/pack/plugins/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f
updateTerminalSize	vim/.vim/pack/plugins/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f
update_tags	vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
update_tags	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
use_raw_list	vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
use_raw_list	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	vim/.vim/pack/plugins/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
use_sh	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:use_sh()$/;"	f
usrign	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:usrign(item, type)$/;"	f
usrign	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:usrign(item, type)$/;"	f
util	vim/.vim/pack/plugins/start/fzf/src/util/atexit.go	/^package util$/;"	p
util	vim/.vim/pack/plugins/start/fzf/src/util/atexit_test.go	/^package util$/;"	p
util	vim/.vim/pack/plugins/start/fzf/src/util/atomicbool.go	/^package util$/;"	p
util	vim/.vim/pack/plugins/start/fzf/src/util/atomicbool_test.go	/^package util$/;"	p
util	vim/.vim/pack/plugins/start/fzf/src/util/chars.go	/^package util$/;"	p
util	vim/.vim/pack/plugins/start/fzf/src/util/chars_test.go	/^package util$/;"	p
util	vim/.vim/pack/plugins/start/fzf/src/util/eventbox.go	/^package util$/;"	p
util	vim/.vim/pack/plugins/start/fzf/src/util/eventbox_test.go	/^package util$/;"	p
util	vim/.vim/pack/plugins/start/fzf/src/util/slab.go	/^package util$/;"	p
util	vim/.vim/pack/plugins/start/fzf/src/util/util.go	/^package util$/;"	p
util	vim/.vim/pack/plugins/start/fzf/src/util/util_test.go	/^package util$/;"	p
util	vim/.vim/pack/plugins/start/fzf/src/util/util_unix.go	/^package util$/;"	p
util	vim/.vim/pack/plugins/start/fzf/src/util/util_windows.go	/^package util$/;"	p
vacantdict	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:vacantdict(dict)$/;"	f
vacantdict	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:vacantdict(dict)$/;"	f
validateOptions	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func validateOptions(opts *Options) error {$/;"	f
validateSign	vim/.vim/pack/plugins/start/fzf/src/options.go	/^func validateSign(sign string, signOptName string) error {$/;"	f
validate_layout	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:validate_layout(layout)$/;"	f
validfile	ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:validfile(fname, ftype)$/;"	f
validfile	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:validfile(fname, ftype)$/;"	f
version	vim/.vim/pack/plugins/start/fzf/main.go	/^var version = "0.54"$/;"	v
version_requirement	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:version_requirement(val, min)$/;"	f
vimuxPaneOptions	vim/.vim/pack/plugins/start/vimux/plugin/vimux.vim	/^function! s:vimuxPaneOptions() abort$/;"	f
visibleHeaderLines	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) visibleHeaderLines() int {$/;"	f
vmove	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) vmove(o int, allowCycle bool) {$/;"	f
vset	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) vset(o int) bool {$/;"	f
wait	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^def wait(timeout = DEFAULT_TIMEOUT)$/;"	f
walker	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:walker(m, p, d)$/;"	f
walker	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:walker(m, p, d)$/;"	f
walkerOpts	vim/.vim/pack/plugins/start/fzf/src/options.go	/^type walkerOpts struct {$/;"	t
want	vim/.vim/pack/plugins/start/fzf/src/terminal_test.go	/^type want struct {$/;"	t
warn	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
warn	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:warn(msg)$/;"	f
warning	vim/.vim/pack/plugins/start/tagbar/autoload/tagbar.vim	/^function! s:warning(msg) abort$/;"	f
whiteChars	vim/.vim/pack/plugins/start/fzf/src/algo/algo.go	/^const whiteChars = " \\t\\n\\v\\f\\r\\x85\\xA0"$/;"	c
whiteSuffix	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^var whiteSuffix *regexp.Regexp$/;"	v
windowPosition	vim/.vim/pack/plugins/start/fzf/src/options.go	/^type windowPosition int$/;"	t
windows_sink	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
winpath	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:winpath(path)$/;"	f
withIndex	vim/.vim/pack/plugins/start/fzf/src/result_test.go	/^func withIndex(i *Item, index int) *Item {$/;"	f
withInputPipe	vim/.vim/pack/plugins/start/fzf/src/proxy_unix.go	/^func withInputPipe(input string, task func(io.WriteCloser)) error {$/;"	f
withInputPipe	vim/.vim/pack/plugins/start/fzf/src/proxy_windows.go	/^func withInputPipe(input string, task func(io.WriteCloser)) error {$/;"	f
withOutputPipe	vim/.vim/pack/plugins/start/fzf/src/proxy_unix.go	/^func withOutputPipe(output string, task func(io.ReadCloser)) error {$/;"	f
withOutputPipe	vim/.vim/pack/plugins/start/fzf/src/proxy_windows.go	/^func withOutputPipe(output string, task func(io.ReadCloser)) error {$/;"	f
withPrefixLengths	vim/.vim/pack/plugins/start/fzf/src/tokenizer.go	/^func withPrefixLengths(tokens []string, begin int) []Token {$/;"	f
wrap	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
wrapCols	vim/.vim/pack/plugins/start/fzf/src/terminal.go	/^func (t *Terminal) wrapCols() int {$/;"	f
wrapLine	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^func wrapLine(input string, prefixLength int, max int, tabstop int) []wrappedLine {$/;"	f
wrap_cmds	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
wrapped	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^  let wrapped['sink*'] = remove(wrapped, 'newsink')$/;"	v
wrappedLine	vim/.vim/pack/plugins/start/fzf/src/tui/light.go	/^type wrappedLine struct {$/;"	t
write_triggered_update_tags	vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
write_triggered_update_tags	vim/.vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
writecache	ctrlp.vim/autoload/ctrlp.vim	/^fu! s:writecache(cafile)$/;"	f
writecache	ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:writecache(lines)$/;"	f
writecache	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:writecache(cafile)$/;"	f
writecache	vim/.vim/pack/plugins/start/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:writecache(lines)$/;"	f
writefile	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:writefile(...)$/;"	f
writelines	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^  def writelines(lines)$/;"	f	class:TestBase
xterm_launcher	vim/.vim/pack/plugins/start/fzf/plugin/fzf.vim	/^function! s:xterm_launcher()$/;"	f
yank_to_register	vim/.vim/pack/plugins/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:yank_to_register(data)$/;"	f
zsh	vim/.vim/pack/plugins/start/fzf/test/test_go.rb	/^    def zsh$/;"	f	class:Shell
zshCompletion	vim/.vim/pack/plugins/start/fzf/main.go	/^var zshCompletion []byte$/;"	v
zshKeyBindings	vim/.vim/pack/plugins/start/fzf/main.go	/^var zshKeyBindings []byte$/;"	v
